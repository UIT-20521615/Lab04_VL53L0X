
LabCuoi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800ce30  0800ce30  0001ce30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d31c  0800d31c  000204a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d31c  0800d31c  000204a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d31c  0800d31c  000204a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d31c  0800d31c  0001d31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d320  0800d320  0001d320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0800d324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200004a0  0800d7c4  000204a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800d7c4  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013abb  00000000  00000000  000204c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251f  00000000  00000000  00033f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198bc  00000000  00000000  000381e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012681  00000000  00000000  00051aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8b3  00000000  00000000  00064125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f09d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  000f0a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004a0 	.word	0x200004a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ce18 	.word	0x0800ce18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004a4 	.word	0x200004a4
 800014c:	0800ce18 	.word	0x0800ce18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a3a      	ldr	r2, [pc, #232]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <MX_GPIO_Init+0x108>)
 8000c54:	f000 fe5a 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5e:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <MX_GPIO_Init+0x10c>)
 8000c60:	f000 fe54 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_GPIO_Init+0x108>)
 8000c7a:	f000 fcc3 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <MX_GPIO_Init+0x108>)
 8000c98:	f000 fcb4 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0x10c>)
 8000cb6:	f000 fca5 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_GPIO_Init+0x10c>)
 8000cd0:	f000 fc98 	bl	8001604 <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <MX_I2C1_Init+0x54>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_I2C1_Init+0x58>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_I2C1_Init+0x50>)
 8000d26:	f000 fe09 	bl	800193c <HAL_I2C_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d30:	f000 f94d 	bl	8000fce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200004bc 	.word	0x200004bc
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	000186a0 	.word	0x000186a0

08000d44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <HAL_I2C_MspInit+0x70>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d123      	bne.n	8000dac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d80:	2312      	movs	r3, #18
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_I2C_MspInit+0x78>)
 8000d90:	f000 fc38 	bl	8001604 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_I2C_MspInit+0x74>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fab3 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f8bb 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f7ff ff03 	bl	8000bd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dd2:	f7ff ff89 	bl	8000ce8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dd6:	f000 fa0f 	bl	80011f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MessageLen = sprintf((char*)Message, "VL53L0X\n\r");
 8000dda:	4951      	ldr	r1, [pc, #324]	; (8000f20 <main+0x160>)
 8000ddc:	4851      	ldr	r0, [pc, #324]	; (8000f24 <main+0x164>)
 8000dde:	f008 fa65 	bl	80092ac <siprintf>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <main+0x168>)
 8000de8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <main+0x168>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	494c      	ldr	r1, [pc, #304]	; (8000f24 <main+0x164>)
 8000df4:	484d      	ldr	r0, [pc, #308]	; (8000f2c <main+0x16c>)
 8000df6:	f002 fa35 	bl	8003264 <HAL_UART_Transmit>

    Dev->I2cHandle = &hi2c1;
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <main+0x170>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <main+0x174>)
 8000e00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    Dev->I2cDevAddr = 0x52;
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <main+0x170>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2252      	movs	r2, #82	; 0x52
 8000e0a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Disable XSHUT
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e14:	4848      	ldr	r0, [pc, #288]	; (8000f38 <main+0x178>)
 8000e16:	f000 fd79 	bl	800190c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f000 faea 	bl	80013f4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Enable XSHUT
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e26:	4844      	ldr	r0, [pc, #272]	; (8000f38 <main+0x178>)
 8000e28:	f000 fd70 	bl	800190c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000e2c:	2014      	movs	r0, #20
 8000e2e:	f000 fae1 	bl	80013f4 <HAL_Delay>

    //
    // VL53L0X init for Single Measurement
    //

    VL53L0X_WaitDeviceBooted( Dev );
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <main+0x170>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fe8e 	bl	8003b58 <VL53L0X_WaitDeviceBooted>
    VL53L0X_DataInit( Dev );
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <main+0x170>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fba3 	bl	800358c <VL53L0X_DataInit>
    VL53L0X_StaticInit( Dev );
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <main+0x170>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fd02 	bl	8003854 <VL53L0X_StaticInit>
    VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <main+0x170>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1c7a      	adds	r2, r7, #1
 8000e56:	1cb9      	adds	r1, r7, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fb97 	bl	800458c <VL53L0X_PerformRefCalibration>
    VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <main+0x170>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1cfa      	adds	r2, r7, #3
 8000e64:	1d39      	adds	r1, r7, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 f81e 	bl	8004ea8 <VL53L0X_PerformRefSpadManagement>
    VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <main+0x170>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 ff0e 	bl	8003c94 <VL53L0X_SetDeviceMode>

    // Enable/Disable Sigma and Signal check
    VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <main+0x170>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 f97f 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
    VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <main+0x170>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 f978 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
    VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <main+0x170>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f641 1299 	movw	r2, #6553	; 0x1999
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 fa1e 	bl	80042e0 <VL53L0X_SetLimitCheckValue>
    VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <main+0x170>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 fa16 	bl	80042e0 <VL53L0X_SetLimitCheckValue>
    VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <main+0x170>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 ff44 	bl	8003d4a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0x170>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2212      	movs	r2, #18
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 ff63 	bl	8003d96 <VL53L0X_SetVcselPulsePeriod>
    VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <main+0x170>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	220e      	movs	r2, #14
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 ff5c 	bl	8003d96 <VL53L0X_SetVcselPulsePeriod>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <main+0x170>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4916      	ldr	r1, [pc, #88]	; (8000f3c <main+0x17c>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fdf3 	bl	8004ad0 <VL53L0X_PerformSingleRangingMeasurement>

	  if(RangingData.RangeStatus == 0)
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <main+0x17c>)
 8000eec:	7e1b      	ldrb	r3, [r3, #24]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d112      	bne.n	8000f18 <main+0x158>
	  {
		  MessageLen = sprintf((char*)Message, "Dist: %imm\n\r", RangingData.RangeMilliMeter);
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <main+0x17c>)
 8000ef4:	891b      	ldrh	r3, [r3, #8]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4911      	ldr	r1, [pc, #68]	; (8000f40 <main+0x180>)
 8000efa:	480a      	ldr	r0, [pc, #40]	; (8000f24 <main+0x164>)
 8000efc:	f008 f9d6 	bl	80092ac <siprintf>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <main+0x168>)
 8000f06:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <main+0x168>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <main+0x164>)
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <main+0x16c>)
 8000f14:	f002 f9a6 	bl	8003264 <HAL_UART_Transmit>

	  }
	  HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	; 0x64
 8000f1a:	f000 fa6b 	bl	80013f4 <HAL_Delay>
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000f1e:	e7de      	b.n	8000ede <main+0x11e>
 8000f20:	0800ce30 	.word	0x0800ce30
 8000f24:	20000510 	.word	0x20000510
 8000f28:	20000550 	.word	0x20000550
 8000f2c:	20000704 	.word	0x20000704
 8000f30:	20000000 	.word	0x20000000
 8000f34:	200004bc 	.word	0x200004bc
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	20000554 	.word	0x20000554
 8000f40:	0800ce3c 	.word	0x0800ce3c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	2228      	movs	r2, #40	; 0x28
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 fb30 	bl	80085b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fd09 	bl	80029a4 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f98:	f000 f819 	bl	8000fce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 ff76 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fc2:	f000 f804 	bl	8000fce <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3740      	adds	r7, #64	; 0x40
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd2:	b672      	cpsid	i
}
 8000fd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_MspInit+0x40>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_MspInit+0x40>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_MspInit+0x40>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_MspInit+0x40>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_MspInit+0x40>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_MspInit+0x40>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f9ab 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <_kill>:

int _kill(int pid, int sig)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001082:	f007 fa61 	bl	8008548 <__errno>
 8001086:	4603      	mov	r3, r0
 8001088:	2216      	movs	r2, #22
 800108a:	601a      	str	r2, [r3, #0]
  return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_exit>:

void _exit (int status)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffe7 	bl	8001078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010aa:	e7fe      	b.n	80010aa <_exit+0x12>

080010ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010be:	f3af 8000 	nop.w
 80010c2:	4601      	mov	r1, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_read+0x12>
  }

  return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e009      	b.n	800110c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf1      	blt.n	80010f8 <_write+0x12>
  }
  return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001144:	605a      	str	r2, [r3, #4]
  return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f007 f9ca 	bl	8008548 <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20005000 	.word	0x20005000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20000700 	.word	0x20000700
 80011e8:	200007a0 	.word	0x200007a0

080011ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART1_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001230:	f001 ffc8 	bl	80031c4 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f7ff fec8 	bl	8000fce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000704 	.word	0x20000704
 8001248:	40013800 	.word	0x40013800

0800124c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0x8c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d131      	bne.n	80012d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_UART_MspInit+0x90>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_UART_MspInit+0x90>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_UART_MspInit+0x90>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0x90>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UART_MspInit+0x90>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_UART_MspInit+0x90>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_UART_MspInit+0x94>)
 80012b2:	f000 f9a7 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0x94>)
 80012cc:	f000 f99a 	bl	8001604 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800

080012e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e4:	f7ff ff82 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012ea:	490c      	ldr	r1, [pc, #48]	; (800131c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001300:	4c09      	ldr	r4, [pc, #36]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130e:	f007 f921 	bl	8008554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff fd55 	bl	8000dc0 <main>
  bx lr
 8001316:	4770      	bx	lr
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8001320:	0800d324 	.word	0x0800d324
  ldr r2, =_sbss
 8001324:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8001328:	200007a0 	.word	0x200007a0

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f92b 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fe44 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f935 	bl	80015ea <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f90b 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000004 	.word	0x20000004
 80013b4:	2000000c 	.word	0x2000000c
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x20>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	2000074c 	.word	0x2000074c

080013e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	2000074c 	.word	0x2000074c

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fff0 	bl	80013e0 <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffe0 	bl	80013e0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000000c 	.word	0x2000000c

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff90 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff49 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff5e 	bl	8001484 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffb0 	bl	8001558 <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b08b      	sub	sp, #44	; 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e169      	b.n	80018ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001618:	2201      	movs	r2, #1
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8158 	bne.w	80018e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a9a      	ldr	r2, [pc, #616]	; (80018a4 <HAL_GPIO_Init+0x2a0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d05e      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001640:	4a98      	ldr	r2, [pc, #608]	; (80018a4 <HAL_GPIO_Init+0x2a0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d875      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001646:	4a98      	ldr	r2, [pc, #608]	; (80018a8 <HAL_GPIO_Init+0x2a4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d058      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 800164c:	4a96      	ldr	r2, [pc, #600]	; (80018a8 <HAL_GPIO_Init+0x2a4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d86f      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001652:	4a96      	ldr	r2, [pc, #600]	; (80018ac <HAL_GPIO_Init+0x2a8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d052      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001658:	4a94      	ldr	r2, [pc, #592]	; (80018ac <HAL_GPIO_Init+0x2a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d869      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800165e:	4a94      	ldr	r2, [pc, #592]	; (80018b0 <HAL_GPIO_Init+0x2ac>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04c      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001664:	4a92      	ldr	r2, [pc, #584]	; (80018b0 <HAL_GPIO_Init+0x2ac>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d863      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800166a:	4a92      	ldr	r2, [pc, #584]	; (80018b4 <HAL_GPIO_Init+0x2b0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d046      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001670:	4a90      	ldr	r2, [pc, #576]	; (80018b4 <HAL_GPIO_Init+0x2b0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d85d      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001676:	2b12      	cmp	r3, #18
 8001678:	d82a      	bhi.n	80016d0 <HAL_GPIO_Init+0xcc>
 800167a:	2b12      	cmp	r3, #18
 800167c:	d859      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <HAL_GPIO_Init+0x80>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	080016ff 	.word	0x080016ff
 8001688:	080016d9 	.word	0x080016d9
 800168c:	080016eb 	.word	0x080016eb
 8001690:	0800172d 	.word	0x0800172d
 8001694:	08001733 	.word	0x08001733
 8001698:	08001733 	.word	0x08001733
 800169c:	08001733 	.word	0x08001733
 80016a0:	08001733 	.word	0x08001733
 80016a4:	08001733 	.word	0x08001733
 80016a8:	08001733 	.word	0x08001733
 80016ac:	08001733 	.word	0x08001733
 80016b0:	08001733 	.word	0x08001733
 80016b4:	08001733 	.word	0x08001733
 80016b8:	08001733 	.word	0x08001733
 80016bc:	08001733 	.word	0x08001733
 80016c0:	08001733 	.word	0x08001733
 80016c4:	08001733 	.word	0x08001733
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016f5 	.word	0x080016f5
 80016d0:	4a79      	ldr	r2, [pc, #484]	; (80018b8 <HAL_GPIO_Init+0x2b4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016d6:	e02c      	b.n	8001732 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e029      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	3304      	adds	r3, #4
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e024      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	3308      	adds	r3, #8
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e01f      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	330c      	adds	r3, #12
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e01a      	b.n	8001734 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001706:	2304      	movs	r3, #4
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e013      	b.n	8001734 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	611a      	str	r2, [r3, #16]
          break;
 800171e:	e009      	b.n	8001734 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	615a      	str	r2, [r3, #20]
          break;
 800172a:	e003      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x130>
          break;
 8001732:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d801      	bhi.n	800173e <HAL_GPIO_Init+0x13a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	e001      	b.n	8001742 <HAL_GPIO_Init+0x13e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d802      	bhi.n	8001750 <HAL_GPIO_Init+0x14c>
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x152>
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	3b08      	subs	r3, #8
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	210f      	movs	r1, #15
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80b1 	beq.w	80018e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800179c:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <HAL_GPIO_Init+0x2bc>)
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a40      	ldr	r2, [pc, #256]	; (80018c4 <HAL_GPIO_Init+0x2c0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_GPIO_Init+0x1ec>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a3f      	ldr	r2, [pc, #252]	; (80018c8 <HAL_GPIO_Init+0x2c4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_GPIO_Init+0x1e8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a3e      	ldr	r2, [pc, #248]	; (80018cc <HAL_GPIO_Init+0x2c8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1e4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a3d      	ldr	r2, [pc, #244]	; (80018d0 <HAL_GPIO_Init+0x2cc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_GPIO_Init+0x1e0>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017e4:	2304      	movs	r3, #4
 80017e6:	e004      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017f0:	2300      	movs	r3, #0
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001802:	492f      	ldr	r1, [pc, #188]	; (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	492c      	ldr	r1, [pc, #176]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4928      	ldr	r1, [pc, #160]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4922      	ldr	r1, [pc, #136]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	491e      	ldr	r1, [pc, #120]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4918      	ldr	r1, [pc, #96]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4914      	ldr	r1, [pc, #80]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d021      	beq.n	80018d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e021      	b.n	80018e6 <HAL_GPIO_Init+0x2e2>
 80018a2:	bf00      	nop
 80018a4:	10320000 	.word	0x10320000
 80018a8:	10310000 	.word	0x10310000
 80018ac:	10220000 	.word	0x10220000
 80018b0:	10210000 	.word	0x10210000
 80018b4:	10120000 	.word	0x10120000
 80018b8:	10110000 	.word	0x10110000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	40010800 	.word	0x40010800
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40011400 	.word	0x40011400
 80018d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_GPIO_Init+0x304>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	4909      	ldr	r1, [pc, #36]	; (8001908 <HAL_GPIO_Init+0x304>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f ae8e 	bne.w	8001618 <HAL_GPIO_Init+0x14>
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	372c      	adds	r7, #44	; 0x2c
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e12b      	b.n	8001ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff f9ee 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800198e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800199e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019a0:	f001 fbca 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80019a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a81      	ldr	r2, [pc, #516]	; (8001bb0 <HAL_I2C_Init+0x274>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d807      	bhi.n	80019c0 <HAL_I2C_Init+0x84>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a80      	ldr	r2, [pc, #512]	; (8001bb4 <HAL_I2C_Init+0x278>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e006      	b.n	80019ce <HAL_I2C_Init+0x92>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a7d      	ldr	r2, [pc, #500]	; (8001bb8 <HAL_I2C_Init+0x27c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf94      	ite	ls
 80019c8:	2301      	movls	r3, #1
 80019ca:	2300      	movhi	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0e7      	b.n	8001ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4a78      	ldr	r2, [pc, #480]	; (8001bbc <HAL_I2C_Init+0x280>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_I2C_Init+0x274>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d802      	bhi.n	8001a10 <HAL_I2C_Init+0xd4>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	e009      	b.n	8001a24 <HAL_I2C_Init+0xe8>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a69      	ldr	r2, [pc, #420]	; (8001bc0 <HAL_I2C_Init+0x284>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	3301      	adds	r3, #1
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	495c      	ldr	r1, [pc, #368]	; (8001bb0 <HAL_I2C_Init+0x274>)
 8001a40:	428b      	cmp	r3, r1
 8001a42:	d819      	bhi.n	8001a78 <HAL_I2C_Init+0x13c>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e59      	subs	r1, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a58:	400b      	ands	r3, r1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_I2C_Init+0x138>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e59      	subs	r1, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a72:	e051      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e04f      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d111      	bne.n	8001aa4 <HAL_I2C_Init+0x168>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e012      	b.n	8001aca <HAL_I2C_Init+0x18e>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Init+0x196>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e022      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <HAL_I2C_Init+0x1bc>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e58      	subs	r0, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	440b      	add	r3, r1
 8001ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af6:	e00f      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	0099      	lsls	r1, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6809      	ldr	r1, [r1, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6911      	ldr	r1, [r2, #16]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68d2      	ldr	r2, [r2, #12]
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	000186a0 	.word	0x000186a0
 8001bb4:	001e847f 	.word	0x001e847f
 8001bb8:	003d08ff 	.word	0x003d08ff
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	10624dd3 	.word	0x10624dd3

08001bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	817b      	strh	r3, [r7, #10]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fc02 	bl	80013e0 <HAL_GetTick>
 8001bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	f040 80e0 	bne.w	8001dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2319      	movs	r3, #25
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4970      	ldr	r1, [pc, #448]	; (8001db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fc9e 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0d3      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2C_Master_Transmit+0x50>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0cc      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d007      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2221      	movs	r2, #33	; 0x21
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2210      	movs	r2, #16
 8001c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	893a      	ldrh	r2, [r7, #8]
 8001c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c7c:	8979      	ldrh	r1, [r7, #10]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fb08 	bl	8002298 <I2C_MasterRequestWrite>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e08d      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca8:	e066      	b.n	8001d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	6a39      	ldr	r1, [r7, #32]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fd5c 	bl	800276c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d107      	bne.n	8001cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d11b      	bne.n	8001d4c <HAL_I2C_Master_Transmit+0x188>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d017      	beq.n	8001d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	6a39      	ldr	r1, [r7, #32]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fd53 	bl	80027fc <I2C_WaitOnBTFFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00d      	beq.n	8001d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d107      	bne.n	8001d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e01a      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d194      	bne.n	8001caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e000      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	00100002 	.word	0x00100002
 8001dbc:	ffff0000 	.word	0xffff0000

08001dc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fb02 	bl	80013e0 <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	f040 824b 	bne.w	8002282 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2319      	movs	r3, #25
 8001df2:	2201      	movs	r2, #1
 8001df4:	497f      	ldr	r1, [pc, #508]	; (8001ff4 <HAL_I2C_Master_Receive+0x234>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fb9e 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
 8001e04:	e23e      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_I2C_Master_Receive+0x54>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e237      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d007      	beq.n	8001e3a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2222      	movs	r2, #34	; 0x22
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2210      	movs	r2, #16
 8001e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	893a      	ldrh	r2, [r7, #8]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a5f      	ldr	r2, [pc, #380]	; (8001ff8 <HAL_I2C_Master_Receive+0x238>)
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e7c:	8979      	ldrh	r1, [r7, #10]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fa8a 	bl	800239c <I2C_MasterRequestRead>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1f8      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d113      	bne.n	8001ec2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e1cc      	b.n	800225c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d11e      	bne.n	8001f08 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eda:	b672      	cpsid	i
}
 8001edc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f04:	b662      	cpsie	i
}
 8001f06:	e035      	b.n	8001f74 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d11e      	bne.n	8001f4e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f4a:	b662      	cpsie	i
}
 8001f4c:	e012      	b.n	8001f74 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f74:	e172      	b.n	800225c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	f200 811f 	bhi.w	80021be <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d123      	bne.n	8001fd0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fc7d 	bl	800288c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e173      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fce:	e145      	b.n	800225c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d152      	bne.n	800207e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4906      	ldr	r1, [pc, #24]	; (8001ffc <HAL_I2C_Master_Receive+0x23c>)
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 faa8 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e148      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
 8001ff2:	bf00      	nop
 8001ff4:	00100002 	.word	0x00100002
 8001ff8:	ffff0000 	.word	0xffff0000
 8001ffc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002046:	b662      	cpsie	i
}
 8002048:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207c:	e0ee      	b.n	800225c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	2200      	movs	r2, #0
 8002086:	4981      	ldr	r1, [pc, #516]	; (800228c <HAL_I2C_Master_Receive+0x4cc>)
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 fa55 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0f5      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_I2C_Master_Receive+0x4d0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	08db      	lsrs	r3, r3, #3
 80020e4:	4a6b      	ldr	r2, [pc, #428]	; (8002294 <HAL_I2C_Master_Receive+0x4d4>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0a1a      	lsrs	r2, r3, #8
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00da      	lsls	r2, r3, #3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d118      	bne.n	8002136 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f043 0220 	orr.w	r2, r3, #32
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002126:	b662      	cpsie	i
}
 8002128:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0a6      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d1d9      	bne.n	80020f8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002186:	b662      	cpsie	i
}
 8002188:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021bc:	e04e      	b.n	800225c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fb62 	bl	800288c <I2C_WaitOnRXNEFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e058      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b04      	cmp	r3, #4
 8002210:	d124      	bne.n	800225c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b03      	cmp	r3, #3
 8002218:	d107      	bne.n	800222a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002228:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f ae88 	bne.w	8001f76 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	00010004 	.word	0x00010004
 8002290:	20000004 	.word	0x20000004
 8002294:	14f8b589 	.word	0x14f8b589

08002298 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	460b      	mov	r3, r1
 80022a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d006      	beq.n	80022c2 <I2C_MasterRequestWrite+0x2a>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d003      	beq.n	80022c2 <I2C_MasterRequestWrite+0x2a>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c0:	d108      	bne.n	80022d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e00b      	b.n	80022ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d107      	bne.n	80022ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f91d 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002312:	d103      	bne.n	800231c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e035      	b.n	800238c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002328:	d108      	bne.n	800233c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	e01b      	b.n	8002374 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800233c:	897b      	ldrh	r3, [r7, #10]
 800233e:	11db      	asrs	r3, r3, #7
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f003 0306 	and.w	r3, r3, #6
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f063 030f 	orn	r3, r3, #15
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <I2C_MasterRequestWrite+0xfc>)
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f966 	bl	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e010      	b.n	800238c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <I2C_MasterRequestWrite+0x100>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f956 	bl	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	00010008 	.word	0x00010008
 8002398:	00010002 	.word	0x00010002

0800239c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	460b      	mov	r3, r1
 80023aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d006      	beq.n	80023d6 <I2C_MasterRequestRead+0x3a>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d003      	beq.n	80023d6 <I2C_MasterRequestRead+0x3a>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d4:	d108      	bne.n	80023e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e00b      	b.n	8002400 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	2b11      	cmp	r3, #17
 80023ee:	d107      	bne.n	8002400 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f893 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002426:	d103      	bne.n	8002430 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e079      	b.n	8002528 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800243c:	d108      	bne.n	8002450 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800243e:	897b      	ldrh	r3, [r7, #10]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	e05f      	b.n	8002510 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002450:	897b      	ldrh	r3, [r7, #10]
 8002452:	11db      	asrs	r3, r3, #7
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 0306 	and.w	r3, r3, #6
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f063 030f 	orn	r3, r3, #15
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4930      	ldr	r1, [pc, #192]	; (8002530 <I2C_MasterRequestRead+0x194>)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f8dc 	bl	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e054      	b.n	8002528 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800247e:	897b      	ldrh	r3, [r7, #10]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4929      	ldr	r1, [pc, #164]	; (8002534 <I2C_MasterRequestRead+0x198>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8cc 	bl	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e044      	b.n	8002528 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f831 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ea:	d103      	bne.n	80024f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e017      	b.n	8002528 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024f8:	897b      	ldrh	r3, [r7, #10]
 80024fa:	11db      	asrs	r3, r3, #7
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f003 0306 	and.w	r3, r3, #6
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f063 030e 	orn	r3, r3, #14
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <I2C_MasterRequestRead+0x198>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f888 	bl	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	00010008 	.word	0x00010008
 8002534:	00010002 	.word	0x00010002

08002538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002548:	e048      	b.n	80025dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d044      	beq.n	80025dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7fe ff45 	bl	80013e0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d139      	bne.n	80025dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10d      	bne.n	800258e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	43da      	mvns	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	e00c      	b.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d116      	bne.n	80025dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e023      	b.n	8002624 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	0c1b      	lsrs	r3, r3, #16
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10d      	bne.n	8002602 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	e00c      	b.n	800261c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	429a      	cmp	r2, r3
 8002620:	d093      	beq.n	800254a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800263a:	e071      	b.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	d123      	bne.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e067      	b.n	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d041      	beq.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269c:	f7fe fea0 	bl	80013e0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d136      	bne.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10c      	bne.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e00b      	b.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	43da      	mvns	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e021      	b.n	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10c      	bne.n	8002744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e00b      	b.n	800275c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4013      	ands	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	f47f af6d 	bne.w	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002778:	e034      	b.n	80027e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8e3 	bl	8002946 <I2C_IsAcknowledgeFailed>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e034      	b.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d028      	beq.n	80027e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7fe fe25 	bl	80013e0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11d      	bne.n	80027e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b80      	cmp	r3, #128	; 0x80
 80027b4:	d016      	beq.n	80027e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e007      	b.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	d1c3      	bne.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002808:	e034      	b.n	8002874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f89b 	bl	8002946 <I2C_IsAcknowledgeFailed>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e034      	b.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d028      	beq.n	8002874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7fe fddd 	bl	80013e0 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11d      	bne.n	8002874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d016      	beq.n	8002874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e007      	b.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d1c3      	bne.n	800280a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002898:	e049      	b.n	800292e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d119      	bne.n	80028dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0210 	mvn.w	r2, #16
 80028b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e030      	b.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028dc:	f7fe fd80 	bl	80013e0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d302      	bcc.n	80028f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11d      	bne.n	800292e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d016      	beq.n	800292e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e007      	b.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d1ae      	bne.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295c:	d11b      	bne.n	8002996 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002966:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0204 	orr.w	r2, r3, #4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e272      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8087 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c4:	4b92      	ldr	r3, [pc, #584]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d00c      	beq.n	80029ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d0:	4b8f      	ldr	r3, [pc, #572]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d112      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5e>
 80029dc:	4b8c      	ldr	r3, [pc, #560]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d10b      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ea:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d06c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x12c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d168      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e24c      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x76>
 8002a0c:	4b80      	ldr	r3, [pc, #512]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a7f      	ldr	r2, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	e02e      	b.n	8002a78 <HAL_RCC_OscConfig+0xd4>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xd4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0xbc>
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a71      	ldr	r2, [pc, #452]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xd4>
 8002a60:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a67      	ldr	r2, [pc, #412]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fcae 	bl	80013e0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe fcaa 	bl	80013e0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e200      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe4>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fc9a 	bl	80013e0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fc96 	bl	80013e0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1ec      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x10c>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ade:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aea:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x18c>
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x176>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1c0      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4939      	ldr	r1, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fc4f 	bl	80013e0 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fc4b 	bl	80013e0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1a1      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4927      	ldr	r1, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe fc2e 	bl	80013e0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fc2a 	bl	80013e0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e180      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03a      	beq.n	8002c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d019      	beq.n	8002bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fc0e 	bl	80013e0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fc0a 	bl	80013e0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e160      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f000 face 	bl	8003188 <RCC_Delay>
 8002bec:	e01c      	b.n	8002c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fbf4 	bl	80013e0 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fbf0 	bl	80013e0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d908      	bls.n	8002c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e146      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	42420000 	.word	0x42420000
 8002c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e9      	bne.n	8002bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a6 	beq.w	8002d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a87      	ldr	r2, [pc, #540]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b7f      	ldr	r3, [pc, #508]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7e      	ldr	r2, [pc, #504]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fbb1 	bl	80013e0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe fbad 	bl	80013e0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e103      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x312>
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a6e      	ldr	r2, [pc, #440]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	e02d      	b.n	8002d12 <HAL_RCC_OscConfig+0x36e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x334>
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a66      	ldr	r2, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	e01c      	b.n	8002d12 <HAL_RCC_OscConfig+0x36e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x356>
 8002ce0:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a60      	ldr	r2, [pc, #384]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a5d      	ldr	r2, [pc, #372]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x36e>
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fb61 	bl	80013e0 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fb5d 	bl	80013e0 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0b1      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ee      	beq.n	8002d22 <HAL_RCC_OscConfig+0x37e>
 8002d44:	e014      	b.n	8002d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fb4b 	bl	80013e0 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fb47 	bl	80013e0 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e09b      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8087 	beq.w	8002e9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d061      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d146      	bne.n	8002e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fb1b 	bl	80013e0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe fb17 	bl	80013e0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e06d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d108      	bne.n	8002de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4921      	ldr	r1, [pc, #132]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a19      	ldr	r1, [r3, #32]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	491b      	ldr	r1, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x4cc>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe faeb 	bl	80013e0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe fae7 	bl	80013e0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e03d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46a>
 8002e2c:	e035      	b.n	8002e9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fad4 	bl	80013e0 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fad0 	bl	80013e0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e026      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x498>
 8002e5a:	e01e      	b.n	8002e9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e019      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_OscConfig+0x500>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0d0      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4965      	ldr	r1, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d040      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e073      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06b      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4936      	ldr	r1, [pc, #216]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe fa22 	bl	80013e0 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe fa1e 	bl	80013e0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e053      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d210      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4922      	ldr	r1, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f821 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490a      	ldr	r1, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1cc>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f980 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000
 800306c:	40021000 	.word	0x40021000
 8003070:	0800ce4c 	.word	0x0800ce4c
 8003074:	20000004 	.word	0x20000004
 8003078:	20000008 	.word	0x20000008

0800307c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCC_GetSysClockFreq+0x94>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x30>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x36>
 80030aa:	e027      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ae:	613b      	str	r3, [r7, #16]
      break;
 80030b0:	e027      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a17      	ldr	r2, [pc, #92]	; (8003118 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_GetSysClockFreq+0x94>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0c5b      	lsrs	r3, r3, #17
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <HAL_RCC_GetSysClockFreq+0x98>)
 80030de:	fb03 f202 	mul.w	r2, r3, r2
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e004      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	613b      	str	r3, [r7, #16]
      break;
 80030fa:	e002      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fe:	613b      	str	r3, [r7, #16]
      break;
 8003100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003102:	693b      	ldr	r3, [r7, #16]
}
 8003104:	4618      	mov	r0, r3
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	007a1200 	.word	0x007a1200
 8003118:	0800ce64 	.word	0x0800ce64
 800311c:	0800ce74 	.word	0x0800ce74
 8003120:	003d0900 	.word	0x003d0900

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <HAL_RCC_GetHCLKFreq+0x10>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff2 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	0800ce5c 	.word	0x0800ce5c

08003160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003164:	f7ff ffde 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0adb      	lsrs	r3, r3, #11
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	0800ce5c 	.word	0x0800ce5c

08003188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <RCC_Delay+0x34>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <RCC_Delay+0x38>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0a5b      	lsrs	r3, r3, #9
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a4:	bf00      	nop
  }
  while (Delay --);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	60fa      	str	r2, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <RCC_Delay+0x1c>
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000004 	.word	0x20000004
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e042      	b.n	800325c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe f82e 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	; 0x24
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f91d 	bl	8003448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800321c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800322c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800323c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	d16d      	bne.n	8003360 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_UART_Transmit+0x2c>
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e066      	b.n	8003362 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2221      	movs	r2, #33	; 0x21
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a2:	f7fe f89d 	bl	80013e0 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d108      	bne.n	80032d0 <HAL_UART_Transmit+0x6c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e003      	b.n	80032d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d8:	e02a      	b.n	8003330 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f840 	bl	800336a <UART_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e036      	b.n	8003362 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3302      	adds	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e007      	b.n	8003322 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1cf      	bne.n	80032da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f810 	bl	800336a <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e006      	b.n	8003362 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b090      	sub	sp, #64	; 0x40
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	e050      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d04c      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0x30>
 800338a:	f7fe f829 	bl	80013e0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003396:	429a      	cmp	r2, r3
 8003398:	d241      	bcs.n	800341e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ba:	637a      	str	r2, [r7, #52]	; 0x34
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e5      	bne.n	800339a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	613b      	str	r3, [r7, #16]
   return(result);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3314      	adds	r3, #20
 80033ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ee:	623a      	str	r2, [r7, #32]
 80033f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	69f9      	ldr	r1, [r7, #28]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e5      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e00f      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d09f      	beq.n	800337c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3740      	adds	r7, #64	; 0x40
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003482:	f023 030c 	bic.w	r3, r3, #12
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	430b      	orrs	r3, r1
 800348e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	; (800355c <UART_SetConfig+0x114>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7ff fe56 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	e002      	b.n	80034be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034b8:	f7ff fe3e 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80034bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <UART_SetConfig+0x118>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	0119      	lsls	r1, r3, #4
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009a      	lsls	r2, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <UART_SetConfig+0x118>)
 80034f6:	fba3 0302 	umull	r0, r3, r3, r2
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2064      	movs	r0, #100	; 0x64
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	3332      	adds	r3, #50	; 0x32
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <UART_SetConfig+0x118>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	4419      	add	r1, r3
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fbb2 f2f3 	udiv	r2, r2, r3
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <UART_SetConfig+0x118>)
 800352e:	fba3 0302 	umull	r0, r3, r3, r2
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2064      	movs	r0, #100	; 0x64
 8003536:	fb00 f303 	mul.w	r3, r0, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	3332      	adds	r3, #50	; 0x32
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <UART_SetConfig+0x118>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	440a      	add	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40013800 	.word	0x40013800
 8003560:	51eb851f 	.word	0x51eb851f

08003564 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f001 fcac 	bl	8004ed2 <VL53L0X_get_offset_calibration_data_micro_meter>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b096      	sub	sp, #88	; 0x58
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800359a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2188      	movs	r1, #136	; 0x88
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f004 fe9e 	bl	80082e8 <VL53L0X_WrByte>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035c0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80035ca:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a9e      	ldr	r2, [pc, #632]	; (800384c <VL53L0X_DataInit+0x2c0>)
 80035d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a9d      	ldr	r2, [pc, #628]	; (8003850 <VL53L0X_DataInit+0x2c4>)
 80035da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fac1 	bl	8003b72 <VL53L0X_GetDeviceParameters>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80035f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d112      	bne.n	8003624 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80035fe:	2300      	movs	r3, #0
 8003600:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003602:	2300      	movs	r3, #0
 8003604:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f103 0410 	add.w	r4, r3, #16
 800360c:	f107 0510 	add.w	r5, r7, #16
 8003610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800361c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2264      	movs	r2, #100	; 0x64
 8003628:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003632:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800363c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003646:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003652:	2201      	movs	r2, #1
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f004 fe46 	bl	80082e8 <VL53L0X_WrByte>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003664:	4313      	orrs	r3, r2
 8003666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800366a:	2201      	movs	r2, #1
 800366c:	21ff      	movs	r1, #255	; 0xff
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f004 fe3a 	bl	80082e8 <VL53L0X_WrByte>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800367c:	4313      	orrs	r3, r2
 800367e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003682:	2200      	movs	r2, #0
 8003684:	2100      	movs	r1, #0
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f004 fe2e 	bl	80082e8 <VL53L0X_WrByte>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003694:	4313      	orrs	r3, r2
 8003696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800369a:	f107 030f 	add.w	r3, r7, #15
 800369e:	461a      	mov	r2, r3
 80036a0:	2191      	movs	r1, #145	; 0x91
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f004 fea2 	bl	80083ec <VL53L0X_RdByte>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80036be:	2201      	movs	r2, #1
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f004 fe10 	bl	80082e8 <VL53L0X_WrByte>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80036d6:	2200      	movs	r2, #0
 80036d8:	21ff      	movs	r1, #255	; 0xff
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f004 fe04 	bl	80082e8 <VL53L0X_WrByte>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f004 fdf8 	bl	80082e8 <VL53L0X_WrByte>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003700:	4313      	orrs	r3, r2
 8003702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003706:	2300      	movs	r3, #0
 8003708:	653b      	str	r3, [r7, #80]	; 0x50
 800370a:	e014      	b.n	8003736 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800370c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003710:	2b00      	cmp	r3, #0
 8003712:	d114      	bne.n	800373e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003716:	b29b      	uxth	r3, r3
 8003718:	2201      	movs	r2, #1
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fd31 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800372a:	4313      	orrs	r3, r2
 800372c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003732:	3301      	adds	r3, #1
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	2b05      	cmp	r3, #5
 800373a:	dde7      	ble.n	800370c <VL53L0X_DataInit+0x180>
 800373c:	e000      	b.n	8003740 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800373e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003740:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003748:	2200      	movs	r2, #0
 800374a:	2102      	movs	r1, #2
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fd19 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003758:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003760:	2200      	movs	r2, #0
 8003762:	2103      	movs	r1, #3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fd0d 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003770:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003778:	2200      	movs	r2, #0
 800377a:	2104      	movs	r1, #4
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fd01 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003788:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003790:	2200      	movs	r2, #0
 8003792:	2105      	movs	r1, #5
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fcf5 	bl	8004184 <VL53L0X_SetLimitCheckEnable>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80037a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d108      	bne.n	80037ba <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80037a8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fd96 	bl	80042e0 <VL53L0X_SetLimitCheckValue>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80037ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80037c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037c6:	2101      	movs	r1, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fd89 	bl	80042e0 <VL53L0X_SetLimitCheckValue>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d108      	bne.n	80037ee <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80037dc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80037e0:	2102      	movs	r1, #2
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fd7c 	bl	80042e0 <VL53L0X_SetLimitCheckValue>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d107      	bne.n	8003806 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80037f6:	2200      	movs	r2, #0
 80037f8:	2103      	movs	r1, #3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fd70 	bl	80042e0 <VL53L0X_SetLimitCheckValue>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003806:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	2101      	movs	r1, #1
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f004 fd64 	bl	80082e8 <VL53L0X_WrByte>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800382e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800383e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003842:	4618      	mov	r0, r3
 8003844:	3758      	adds	r7, #88	; 0x58
 8003846:	46bd      	mov	sp, r7
 8003848:	bdb0      	pop	{r4, r5, r7, pc}
 800384a:	bf00      	nop
 800384c:	00016b85 	.word	0x00016b85
 8003850:	000970a4 	.word	0x000970a4

08003854 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003854:	b5b0      	push	{r4, r5, r7, lr}
 8003856:	b09e      	sub	sp, #120	; 0x78
 8003858:	af02      	add	r7, sp, #8
 800385a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f004 fea4 	bl	80085b8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003890:	2101      	movs	r1, #1
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f002 fa6f 	bl	8005d76 <VL53L0X_get_info_from_device>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80038a4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80038ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80038b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d80d      	bhi.n	80038d4 <VL53L0X_StaticInit+0x80>
 80038b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80038c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d806      	bhi.n	80038d4 <VL53L0X_StaticInit+0x80>
 80038c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80038ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	d90b      	bls.n	80038ec <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80038d4:	f107 0218 	add.w	r2, r7, #24
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f001 fcf1 	bl	80052c6 <VL53L0X_perform_ref_spad_management>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80038ea:	e009      	b.n	8003900 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80038ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038f0:	461a      	mov	r2, r3
 80038f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 fef2 	bl	80056de <VL53L0X_set_reference_spads>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003900:	4b94      	ldr	r3, [pc, #592]	; (8003b54 <VL53L0X_StaticInit+0x300>)
 8003902:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003904:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10f      	bne.n	800392c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003924:	66bb      	str	r3, [r7, #104]	; 0x68
 8003926:	e001      	b.n	800392c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003928:	4b8a      	ldr	r3, [pc, #552]	; (8003b54 <VL53L0X_StaticInit+0x300>)
 800392a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800392c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003934:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f003 fdc0 	bl	80074bc <VL53L0X_load_tuning_settings>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003942:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800394a:	2300      	movs	r3, #0
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2304      	movs	r3, #4
 8003950:	2200      	movs	r2, #0
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f001 f8eb 	bl	8004b30 <VL53L0X_SetGpioConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003960:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003964:	2b00      	cmp	r3, #0
 8003966:	d121      	bne.n	80039ac <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003968:	2201      	movs	r2, #1
 800396a:	21ff      	movs	r1, #255	; 0xff
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f004 fcbb 	bl	80082e8 <VL53L0X_WrByte>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003978:	f107 031a 	add.w	r3, r7, #26
 800397c:	461a      	mov	r2, r3
 800397e:	2184      	movs	r1, #132	; 0x84
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f004 fd5d 	bl	8008440 <VL53L0X_RdWord>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800398e:	4313      	orrs	r3, r2
 8003990:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003994:	2200      	movs	r2, #0
 8003996:	21ff      	movs	r1, #255	; 0xff
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f004 fca5 	bl	80082e8 <VL53L0X_WrByte>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	461a      	mov	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80039c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8cf 	bl	8003b72 <VL53L0X_GetDeviceParameters>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80039da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d110      	bne.n	8003a04 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80039e2:	f107 0319 	add.w	r3, r7, #25
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f98f 	bl	8003d0c <VL53L0X_GetFractionEnable>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80039f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80039fc:	7e7a      	ldrb	r2, [r7, #25]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003a04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10e      	bne.n	8003a2a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f103 0410 	add.w	r4, r3, #16
 8003a12:	f107 051c 	add.w	r5, r7, #28
 8003a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d111      	bne.n	8003a56 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003a32:	f107 0319 	add.w	r3, r7, #25
 8003a36:	461a      	mov	r2, r3
 8003a38:	2101      	movs	r1, #1
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f004 fcd6 	bl	80083ec <VL53L0X_RdByte>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003a46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003a4e:	7e7a      	ldrb	r2, [r7, #25]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003a56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9c6 	bl	8003df4 <VL53L0X_SetSequenceStepEnable>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003a6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003a76:	2200      	movs	r2, #0
 8003a78:	2102      	movs	r1, #2
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9ba 	bl	8003df4 <VL53L0X_SetSequenceStepEnable>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003a86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003a9e:	f107 0313 	add.w	r3, r7, #19
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f98d 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ab2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003aba:	7cfa      	ldrb	r2, [r7, #19]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ac2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003aca:	f107 0313 	add.w	r3, r7, #19
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f977 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ade:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ae6:	7cfa      	ldrb	r2, [r7, #19]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003aee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	461a      	mov	r2, r3
 8003afc:	2103      	movs	r1, #3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f002 feb8 	bl	8006874 <get_sequence_step_timeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	461a      	mov	r2, r3
 8003b28:	2104      	movs	r1, #4
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f002 fea2 	bl	8006874 <get_sequence_step_timeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3770      	adds	r7, #112	; 0x70
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bdb0      	pop	{r4, r5, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000010 	.word	0x20000010

08003b58 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003b60:	239d      	movs	r3, #157	; 0x9d
 8003b62:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8af 	bl	8003ce8 <VL53L0X_GetDeviceMode>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fa75 	bl	800408c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	3310      	adds	r3, #16
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 faaa 	bl	800411c <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d107      	bne.n	8003be4 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fcc2 	bl	8003564 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d134      	bne.n	8003c56 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	e02a      	b.n	8003c48 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d12a      	bne.n	8003c50 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3308      	adds	r3, #8
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	3304      	adds	r3, #4
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fbc9 	bl	80043a4 <VL53L0X_GetLimitCheckValue>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d117      	bne.n	8003c54 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	b299      	uxth	r1, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	4413      	add	r3, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fb32 	bl	800429c <VL53L0X_GetLimitCheckEnable>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	ddd1      	ble.n	8003bf2 <VL53L0X_GetDeviceParameters+0x80>
 8003c4e:	e002      	b.n	8003c56 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003c54:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	333c      	adds	r3, #60	; 0x3c
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fc2b 	bl	80044c0 <VL53L0X_GetWrapAroundCheckEnable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d107      	bne.n	8003c86 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f877 	bl	8003d70 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003c82:	4603      	mov	r3, r0
 8003c84:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	bf8c      	ite	hi
 8003caa:	2201      	movhi	r2, #1
 8003cac:	2200      	movls	r2, #0
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d10e      	bne.n	8003cd2 <VL53L0X_SetDeviceMode+0x3e>
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <VL53L0X_SetDeviceMode+0x50>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	741a      	strb	r2, [r3, #16]
		break;
 8003cd0:	e001      	b.n	8003cd6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003cd2:	23f8      	movs	r3, #248	; 0xf8
 8003cd4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	0030000b 	.word	0x0030000b

08003ce8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7c1a      	ldrb	r2, [r3, #16]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	2109      	movs	r1, #9
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f004 fb64 	bl	80083ec <VL53L0X_RdByte>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f003 fa1d 	bl	800719a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003d60:	4603      	mov	r3, r0
 8003d62:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f003 faea 	bl	800735a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
 8003da2:	4613      	mov	r3, r2
 8003da4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003daa:	78ba      	ldrb	r2, [r7, #2]
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f002 ff32 	bl	8006c1a <VL53L0X_set_vcsel_pulse_period>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f003 f9a4 	bl	800712c <VL53L0X_get_vcsel_pulse_period>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
 8003e00:	4613      	mov	r3, r2
 8003e02:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003e10:	f107 030f 	add.w	r3, r7, #15
 8003e14:	461a      	mov	r2, r3
 8003e16:	2101      	movs	r1, #1
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f004 fae7 	bl	80083ec <VL53L0X_RdByte>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d15a      	bne.n	8003ee4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8003e2e:	78bb      	ldrb	r3, [r7, #2]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d12b      	bne.n	8003e8c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d825      	bhi.n	8003e86 <VL53L0X_SetSequenceStepEnable+0x92>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e55 	.word	0x08003e55
 8003e44:	08003e5f 	.word	0x08003e5f
 8003e48:	08003e69 	.word	0x08003e69
 8003e4c:	08003e73 	.word	0x08003e73
 8003e50:	08003e7d 	.word	0x08003e7d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003e54:	7dbb      	ldrb	r3, [r7, #22]
 8003e56:	f043 0310 	orr.w	r3, r3, #16
 8003e5a:	75bb      	strb	r3, [r7, #22]
				break;
 8003e5c:	e043      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003e5e:	7dbb      	ldrb	r3, [r7, #22]
 8003e60:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003e64:	75bb      	strb	r3, [r7, #22]
				break;
 8003e66:	e03e      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003e68:	7dbb      	ldrb	r3, [r7, #22]
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	75bb      	strb	r3, [r7, #22]
				break;
 8003e70:	e039      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003e72:	7dbb      	ldrb	r3, [r7, #22]
 8003e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e78:	75bb      	strb	r3, [r7, #22]
				break;
 8003e7a:	e034      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003e7c:	7dbb      	ldrb	r3, [r7, #22]
 8003e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e82:	75bb      	strb	r3, [r7, #22]
				break;
 8003e84:	e02f      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003e86:	23fc      	movs	r3, #252	; 0xfc
 8003e88:	75fb      	strb	r3, [r7, #23]
 8003e8a:	e02c      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d825      	bhi.n	8003ede <VL53L0X_SetSequenceStepEnable+0xea>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ead 	.word	0x08003ead
 8003e9c:	08003eb7 	.word	0x08003eb7
 8003ea0:	08003ec1 	.word	0x08003ec1
 8003ea4:	08003ecb 	.word	0x08003ecb
 8003ea8:	08003ed5 	.word	0x08003ed5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003eac:	7dbb      	ldrb	r3, [r7, #22]
 8003eae:	f023 0310 	bic.w	r3, r3, #16
 8003eb2:	75bb      	strb	r3, [r7, #22]
				break;
 8003eb4:	e017      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003eb6:	7dbb      	ldrb	r3, [r7, #22]
 8003eb8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003ebc:	75bb      	strb	r3, [r7, #22]
				break;
 8003ebe:	e012      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003ec0:	7dbb      	ldrb	r3, [r7, #22]
 8003ec2:	f023 0304 	bic.w	r3, r3, #4
 8003ec6:	75bb      	strb	r3, [r7, #22]
				break;
 8003ec8:	e00d      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003eca:	7dbb      	ldrb	r3, [r7, #22]
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed0:	75bb      	strb	r3, [r7, #22]
				break;
 8003ed2:	e008      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003ed4:	7dbb      	ldrb	r3, [r7, #22]
 8003ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eda:	75bb      	strb	r3, [r7, #22]
				break;
 8003edc:	e003      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003ede:	23fc      	movs	r3, #252	; 0xfc
 8003ee0:	75fb      	strb	r3, [r7, #23]
 8003ee2:	e000      	b.n	8003ee6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003ee4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	7dba      	ldrb	r2, [r7, #22]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d01e      	beq.n	8003f2c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8003ef6:	7dbb      	ldrb	r3, [r7, #22]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2101      	movs	r1, #1
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f004 f9f3 	bl	80082e8 <VL53L0X_WrByte>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8003f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7dba      	ldrb	r2, [r7, #22]
 8003f12:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8003f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003f24:	6939      	ldr	r1, [r7, #16]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ff0f 	bl	8003d4a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	72fb      	strb	r3, [r7, #11]
 8003f46:	4613      	mov	r3, r2
 8003f48:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003f54:	7afb      	ldrb	r3, [r7, #11]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d836      	bhi.n	8003fc8 <sequence_step_enabled+0x90>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <sequence_step_enabled+0x28>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f75 	.word	0x08003f75
 8003f64:	08003f87 	.word	0x08003f87
 8003f68:	08003f99 	.word	0x08003f99
 8003f6c:	08003fab 	.word	0x08003fab
 8003f70:	08003fbd 	.word	0x08003fbd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003f74:	7abb      	ldrb	r3, [r7, #10]
 8003f76:	111b      	asrs	r3, r3, #4
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	701a      	strb	r2, [r3, #0]
		break;
 8003f84:	e022      	b.n	8003fcc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003f86:	7abb      	ldrb	r3, [r7, #10]
 8003f88:	10db      	asrs	r3, r3, #3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	701a      	strb	r2, [r3, #0]
		break;
 8003f96:	e019      	b.n	8003fcc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003f98:	7abb      	ldrb	r3, [r7, #10]
 8003f9a:	109b      	asrs	r3, r3, #2
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	701a      	strb	r2, [r3, #0]
		break;
 8003fa8:	e010      	b.n	8003fcc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003faa:	7abb      	ldrb	r3, [r7, #10]
 8003fac:	119b      	asrs	r3, r3, #6
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	701a      	strb	r2, [r3, #0]
		break;
 8003fba:	e007      	b.n	8003fcc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003fbc:	7abb      	ldrb	r3, [r7, #10]
 8003fbe:	09db      	lsrs	r3, r3, #7
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	701a      	strb	r2, [r3, #0]
		break;
 8003fc6:	e001      	b.n	8003fcc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003fc8:	23fc      	movs	r3, #252	; 0xfc
 8003fca:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003fee:	f107 030e 	add.w	r3, r7, #14
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f004 f9f8 	bl	80083ec <VL53L0X_RdByte>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004008:	7bba      	ldrb	r2, [r7, #14]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2100      	movs	r1, #0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ff92 	bl	8003f38 <sequence_step_enabled>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d108      	bne.n	8004032 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004020:	7bba      	ldrb	r2, [r7, #14]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	3302      	adds	r3, #2
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff85 	bl	8003f38 <sequence_step_enabled>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800403a:	7bba      	ldrb	r2, [r7, #14]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	2102      	movs	r1, #2
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ff78 	bl	8003f38 <sequence_step_enabled>
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800404c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004054:	7bba      	ldrb	r2, [r7, #14]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	3303      	adds	r3, #3
 800405a:	2103      	movs	r1, #3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff6b 	bl	8003f38 <sequence_step_enabled>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800406e:	7bba      	ldrb	r2, [r7, #14]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	3304      	adds	r3, #4
 8004074:	2104      	movs	r1, #4
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff5e 	bl	8003f38 <sequence_step_enabled>
 800407c:	4603      	mov	r3, r0
 800407e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	461a      	mov	r2, r3
 80040a0:	21f8      	movs	r1, #248	; 0xf8
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f004 f9cc 	bl	8008440 <VL53L0X_RdWord>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80040ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d108      	bne.n	80040c6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	461a      	mov	r2, r3
 80040ba:	2104      	movs	r1, #4
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f004 f9f7 	bl	80084b0 <VL53L0X_RdDWord>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80040ce:	89bb      	ldrh	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	89ba      	ldrh	r2, [r7, #12]
 80040d8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	7f1b      	ldrb	r3, [r3, #28]
 8004106:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	7bba      	ldrb	r2, [r7, #14]
 800410c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800412a:	f107 030e 	add.w	r3, r7, #14
 800412e:	461a      	mov	r2, r3
 8004130:	2120      	movs	r1, #32
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f004 f984 	bl	8008440 <VL53L0X_RdWord>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800413c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d118      	bne.n	8004176 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004144:	89fb      	ldrh	r3, [r7, #14]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
 800415c:	e00b      	b.n	8004176 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800415e:	89fb      	ldrh	r3, [r7, #14]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
 8004190:	4613      	mov	r3, r2
 8004192:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004194:	2300      	movs	r3, #0
 8004196:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80041a4:	887b      	ldrh	r3, [r7, #2]
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d902      	bls.n	80041b0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041aa:	23fc      	movs	r3, #252	; 0xfc
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e05b      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80041b0:	787b      	ldrb	r3, [r7, #1]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	73bb      	strb	r3, [r7, #14]
 80041c2:	e00a      	b.n	80041da <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	330c      	adds	r3, #12
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	2b05      	cmp	r3, #5
 80041de:	d841      	bhi.n	8004264 <VL53L0X_SetLimitCheckEnable+0xe0>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	08004201 	.word	0x08004201
 80041ec:	0800420b 	.word	0x0800420b
 80041f0:	08004221 	.word	0x08004221
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	08004235 	.word	0x08004235
 80041fc:	0800424d 	.word	0x0800424d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004208:	e02e      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800420e:	b29b      	uxth	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	2144      	movs	r1, #68	; 0x44
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f004 f88b 	bl	8008330 <VL53L0X_WrWord>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]

			break;
 800421e:	e023      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004228:	e01e      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004232:	e019      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800423a:	7b7b      	ldrb	r3, [r7, #13]
 800423c:	22fe      	movs	r2, #254	; 0xfe
 800423e:	2160      	movs	r1, #96	; 0x60
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f004 f89f 	bl	8008384 <VL53L0X_UpdateByte>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800424a:	e00d      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004252:	7b7b      	ldrb	r3, [r7, #13]
 8004254:	22ef      	movs	r2, #239	; 0xef
 8004256:	2160      	movs	r1, #96	; 0x60
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f004 f893 	bl	8008384 <VL53L0X_UpdateByte>
 800425e:	4603      	mov	r3, r0
 8004260:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004262:	e001      	b.n	8004268 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004264:	23fc      	movs	r3, #252	; 0xfc
 8004266:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10f      	bne.n	8004290 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004270:	787b      	ldrb	r3, [r7, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4413      	add	r3, r2
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004282:	e005      	b.n	8004290 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	460b      	mov	r3, r1
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d905      	bls.n	80042c0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80042b4:	23fc      	movs	r3, #252	; 0xfc
 80042b6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e008      	b.n	80042d2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80042c0:	897b      	ldrh	r3, [r7, #10]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ca:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7dba      	ldrb	r2, [r7, #22]
 80042d0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	460b      	mov	r3, r1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80042fe:	7dbb      	ldrb	r3, [r7, #22]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004304:	897b      	ldrh	r3, [r7, #10]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	330c      	adds	r3, #12
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	e040      	b.n	8004396 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	2b05      	cmp	r3, #5
 8004318:	d830      	bhi.n	800437c <VL53L0X_SetLimitCheckValue+0x9c>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <VL53L0X_SetLimitCheckValue+0x40>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004339 	.word	0x08004339
 8004324:	08004341 	.word	0x08004341
 8004328:	08004357 	.word	0x08004357
 800432c:	0800435f 	.word	0x0800435f
 8004330:	08004367 	.word	0x08004367
 8004334:	08004367 	.word	0x08004367

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800433e:	e01f      	b.n	8004380 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	2144      	movs	r1, #68	; 0x44
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f003 fff0 	bl	8008330 <VL53L0X_WrWord>
 8004350:	4603      	mov	r3, r0
 8004352:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004354:	e014      	b.n	8004380 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800435c:	e010      	b.n	8004380 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004364:	e00c      	b.n	8004380 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	2164      	movs	r1, #100	; 0x64
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f003 ffdd 	bl	8008330 <VL53L0X_WrWord>
 8004376:	4603      	mov	r3, r0
 8004378:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800437a:	e001      	b.n	8004380 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800437c:	23fc      	movs	r3, #252	; 0xfc
 800437e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004388:	897b      	ldrh	r3, [r7, #10]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	330c      	adds	r3, #12
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	460b      	mov	r3, r1
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	2b05      	cmp	r3, #5
 80043be:	d847      	bhi.n	8004450 <VL53L0X_GetLimitCheckValue+0xac>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <VL53L0X_GetLimitCheckValue+0x24>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043e1 	.word	0x080043e1
 80043cc:	080043ed 	.word	0x080043ed
 80043d0:	08004413 	.word	0x08004413
 80043d4:	0800441f 	.word	0x0800441f
 80043d8:	0800442b 	.word	0x0800442b
 80043dc:	0800442b 	.word	0x0800442b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	77bb      	strb	r3, [r7, #30]
		break;
 80043ea:	e033      	b.n	8004454 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80043ec:	f107 0316 	add.w	r3, r7, #22
 80043f0:	461a      	mov	r2, r3
 80043f2:	2144      	movs	r1, #68	; 0x44
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f004 f823 	bl	8008440 <VL53L0X_RdWord>
 80043fa:	4603      	mov	r3, r0
 80043fc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80043fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004406:	8afb      	ldrh	r3, [r7, #22]
 8004408:	025b      	lsls	r3, r3, #9
 800440a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800440c:	2301      	movs	r3, #1
 800440e:	77bb      	strb	r3, [r7, #30]
		break;
 8004410:	e020      	b.n	8004454 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	77bb      	strb	r3, [r7, #30]
		break;
 800441c:	e01a      	b.n	8004454 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	77bb      	strb	r3, [r7, #30]
		break;
 8004428:	e014      	b.n	8004454 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800442a:	f107 0316 	add.w	r3, r7, #22
 800442e:	461a      	mov	r2, r3
 8004430:	2164      	movs	r1, #100	; 0x64
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f004 f804 	bl	8008440 <VL53L0X_RdWord>
 8004438:	4603      	mov	r3, r0
 800443a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800443c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004444:	8afb      	ldrh	r3, [r7, #22]
 8004446:	025b      	lsls	r3, r3, #9
 8004448:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	77bb      	strb	r3, [r7, #30]
		break;
 800444e:	e001      	b.n	8004454 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004450:	23fc      	movs	r3, #252	; 0xfc
 8004452:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d12a      	bne.n	80044b2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800445c:	7fbb      	ldrb	r3, [r7, #30]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d124      	bne.n	80044ac <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d110      	bne.n	800448a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	330c      	adds	r3, #12
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800447c:	897b      	ldrh	r3, [r7, #10]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004488:	e013      	b.n	80044b2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004490:	897b      	ldrh	r3, [r7, #10]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	330c      	adds	r3, #12
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80044aa:	e002      	b.n	80044b2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044b2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80044ce:	f107 030e 	add.w	r3, r7, #14
 80044d2:	461a      	mov	r2, r3
 80044d4:	2101      	movs	r1, #1
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f003 ff88 	bl	80083ec <VL53L0X_RdByte>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80044e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10e      	bne.n	8004506 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80044e8:	7bba      	ldrb	r2, [r7, #14]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80044f0:	7bbb      	ldrb	r3, [r7, #14]
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	da03      	bge.n	8004500 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e002      	b.n	8004506 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004530:	f107 030e 	add.w	r3, r7, #14
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fbd6 	bl	8003ce8 <VL53L0X_GetDeviceMode>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004548:	7bbb      	ldrb	r3, [r7, #14]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f898 	bl	8004684 <VL53L0X_StartMeasurement>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fb3e 	bl	8005be2 <VL53L0X_measurement_poll_for_completion>
 8004566:	4603      	mov	r3, r0
 8004568:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800456a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800459c:	2301      	movs	r3, #1
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f001 fae0 	bl	8005b68 <VL53L0X_perform_ref_calibration>
 80045a8:	4603      	mov	r3, r0
 80045aa:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80045ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80045ce:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80045d0:	7dbb      	ldrb	r3, [r7, #22]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d005      	beq.n	80045e2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80045d6:	7dbb      	ldrb	r3, [r7, #22]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d002      	beq.n	80045e2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80045dc:	7dbb      	ldrb	r3, [r7, #22]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d147      	bne.n	8004672 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80045e2:	f107 030c 	add.w	r3, r7, #12
 80045e6:	f107 0210 	add.w	r2, r7, #16
 80045ea:	2101      	movs	r1, #1
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fbc3 	bl	8004d78 <VL53L0X_GetInterruptThresholds>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80045fc:	d803      	bhi.n	8004606 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80045fe:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004600:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004604:	d935      	bls.n	8004672 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d131      	bne.n	8004672 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004614:	491a      	ldr	r1, [pc, #104]	; (8004680 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f002 ff50 	bl	80074bc <VL53L0X_load_tuning_settings>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]
 8004620:	e027      	b.n	8004672 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004622:	2204      	movs	r2, #4
 8004624:	21ff      	movs	r1, #255	; 0xff
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f003 fe5e 	bl	80082e8 <VL53L0X_WrByte>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	4313      	orrs	r3, r2
 8004634:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004636:	2200      	movs	r2, #0
 8004638:	2170      	movs	r1, #112	; 0x70
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f003 fe54 	bl	80082e8 <VL53L0X_WrByte>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	4313      	orrs	r3, r2
 8004648:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800464a:	2200      	movs	r2, #0
 800464c:	21ff      	movs	r1, #255	; 0xff
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f003 fe4a 	bl	80082e8 <VL53L0X_WrByte>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	4313      	orrs	r3, r2
 800465c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800465e:	2200      	movs	r2, #0
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f003 fe40 	bl	80082e8 <VL53L0X_WrByte>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	4313      	orrs	r3, r2
 8004670:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004672:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000104 	.word	0x20000104

08004684 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004694:	f107 030e 	add.w	r3, r7, #14
 8004698:	4619      	mov	r1, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fb24 	bl	8003ce8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80046a0:	2201      	movs	r2, #1
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f003 fe1f 	bl	80082e8 <VL53L0X_WrByte>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80046ae:	2201      	movs	r2, #1
 80046b0:	21ff      	movs	r1, #255	; 0xff
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f003 fe18 	bl	80082e8 <VL53L0X_WrByte>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80046bc:	2200      	movs	r2, #0
 80046be:	2100      	movs	r1, #0
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f003 fe11 	bl	80082e8 <VL53L0X_WrByte>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80046d0:	461a      	mov	r2, r3
 80046d2:	2191      	movs	r1, #145	; 0x91
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f003 fe07 	bl	80082e8 <VL53L0X_WrByte>
 80046da:	4603      	mov	r3, r0
 80046dc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80046de:	2201      	movs	r2, #1
 80046e0:	2100      	movs	r1, #0
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f003 fe00 	bl	80082e8 <VL53L0X_WrByte>
 80046e8:	4603      	mov	r3, r0
 80046ea:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80046ec:	2200      	movs	r2, #0
 80046ee:	21ff      	movs	r1, #255	; 0xff
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f003 fdf9 	bl	80082e8 <VL53L0X_WrByte>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80046fa:	2200      	movs	r2, #0
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f003 fdf2 	bl	80082e8 <VL53L0X_WrByte>
 8004704:	4603      	mov	r3, r0
 8004706:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004708:	7bbb      	ldrb	r3, [r7, #14]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d054      	beq.n	80047b8 <VL53L0X_StartMeasurement+0x134>
 800470e:	2b03      	cmp	r3, #3
 8004710:	dc6c      	bgt.n	80047ec <VL53L0X_StartMeasurement+0x168>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <VL53L0X_StartMeasurement+0x98>
 8004716:	2b01      	cmp	r3, #1
 8004718:	d034      	beq.n	8004784 <VL53L0X_StartMeasurement+0x100>
 800471a:	e067      	b.n	80047ec <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800471c:	2201      	movs	r2, #1
 800471e:	2100      	movs	r1, #0
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f003 fde1 	bl	80082e8 <VL53L0X_WrByte>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800472e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d15d      	bne.n	80047f2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8004740:	f107 030d 	add.w	r3, r7, #13
 8004744:	461a      	mov	r2, r3
 8004746:	2100      	movs	r1, #0
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f003 fe4f 	bl	80083ec <VL53L0X_RdByte>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004758:	7b7a      	ldrb	r2, [r7, #13]
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	4013      	ands	r3, r2
 800475e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	429a      	cmp	r2, r3
 8004764:	d107      	bne.n	8004776 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8004766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004774:	d3e1      	bcc.n	800473a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800477c:	d339      	bcc.n	80047f2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800477e:	23f9      	movs	r3, #249	; 0xf9
 8004780:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004782:	e036      	b.n	80047f2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800478c:	2101      	movs	r1, #1
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ff12 	bl	80045b8 <VL53L0X_CheckAndLoadInterruptSettings>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004798:	2202      	movs	r2, #2
 800479a:	2100      	movs	r1, #0
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f003 fda3 	bl	80082e8 <VL53L0X_WrByte>
 80047a2:	4603      	mov	r3, r0
 80047a4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80047a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d123      	bne.n	80047f6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2204      	movs	r2, #4
 80047b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80047b6:	e01e      	b.n	80047f6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80047b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80047c0:	2101      	movs	r1, #1
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff fef8 	bl	80045b8 <VL53L0X_CheckAndLoadInterruptSettings>
 80047c8:	4603      	mov	r3, r0
 80047ca:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80047cc:	2204      	movs	r2, #4
 80047ce:	2100      	movs	r1, #0
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f003 fd89 	bl	80082e8 <VL53L0X_WrByte>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80047da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2204      	movs	r2, #4
 80047e6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80047ea:	e006      	b.n	80047fa <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80047ec:	23f8      	movs	r3, #248	; 0xf8
 80047ee:	75fb      	strb	r3, [r7, #23]
 80047f0:	e004      	b.n	80047fc <VL53L0X_StartMeasurement+0x178>
		break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <VL53L0X_StartMeasurement+0x178>
		break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <VL53L0X_StartMeasurement+0x178>
		break;
 80047fa:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80047fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800481c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d112      	bne.n	800484a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004824:	f107 0308 	add.w	r3, r7, #8
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fb1a 	bl	8004e64 <VL53L0X_GetInterruptMaskStatus>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b04      	cmp	r3, #4
 8004838:	d103      	bne.n	8004842 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e01c      	b.n	800487c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e018      	b.n	800487c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800484a:	f107 030d 	add.w	r3, r7, #13
 800484e:	461a      	mov	r2, r3
 8004850:	2114      	movs	r1, #20
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f003 fdca 	bl	80083ec <VL53L0X_RdByte>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800485c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004864:	7b7b      	ldrb	r3, [r7, #13]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e002      	b.n	800487c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800487c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b096      	sub	sp, #88	; 0x58
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004892:	2300      	movs	r3, #0
 8004894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004898:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800489c:	230c      	movs	r3, #12
 800489e:	2114      	movs	r1, #20
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f003 fcf5 	bl	8008290 <VL53L0X_ReadMulti>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80048ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 80d1 	bne.w	8004a58 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80048c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80048de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048fa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80048fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004900:	b29b      	uxth	r3, r3
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	b29a      	uxth	r2, r3
 8004906:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800490a:	b29b      	uxth	r3, r3
 800490c:	4413      	add	r3, r2
 800490e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004912:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800491e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	b29a      	uxth	r2, r3
 8004928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800492c:	b29b      	uxth	r3, r3
 800492e:	4413      	add	r3, r2
 8004930:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800493a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800493c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800494a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004956:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800495c:	d046      	beq.n	80049ec <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800495e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004960:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004964:	fb02 f303 	mul.w	r3, r2, r3
 8004968:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800496c:	4a57      	ldr	r2, [pc, #348]	; (8004acc <VL53L0X_GetRangingMeasurementData+0x244>)
 800496e:	fb82 1203 	smull	r1, r2, r2, r3
 8004972:	1192      	asrs	r2, r2, #6
 8004974:	17db      	asrs	r3, r3, #31
 8004976:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004978:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	7f1b      	ldrb	r3, [r3, #28]
 8004986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800498a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02c      	beq.n	80049ec <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004992:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004994:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800499e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d10d      	bne.n	80049c0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80049a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80049ac:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80049b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049b4:	e016      	b.n	80049e4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80049b6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80049ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049be:	e011      	b.n	80049e4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80049c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80049ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049cc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80049d4:	121b      	asrs	r3, r3, #8
 80049d6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80049e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80049e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80049ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80049f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004a00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	019b      	lsls	r3, r3, #6
 8004a08:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	75da      	strb	r2, [r3, #23]
 8004a0e:	e006      	b.n	8004a1e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004a16:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004a1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004a22:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004a26:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f003 f9df 	bl	8007df8 <VL53L0X_get_pal_range_status>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004a48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004a50:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a58:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d12f      	bne.n	8004ac0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f107 040c 	add.w	r4, r7, #12
 8004a66:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004a7a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004a88:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004a8e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004a94:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004a9a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004aa0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004aa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004ab0:	f107 050c 	add.w	r5, r7, #12
 8004ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ac0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3750      	adds	r7, #80	; 0x50
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bdb0      	pop	{r4, r5, r7, pc}
 8004acc:	10624dd3 	.word	0x10624dd3

08004ad0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff f8d7 	bl	8003c94 <VL53L0X_SetDeviceMode>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fd16 	bl	8004524 <VL53L0X_PerformSingleMeasurement>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff febe 	bl	8004888 <VL53L0X_GetRangingMeasurementData>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004b18:	2100      	movs	r1, #0
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f962 	bl	8004de4 <VL53L0X_ClearInterruptMask>
 8004b20:	4603      	mov	r3, r0
 8004b22:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	70fb      	strb	r3, [r7, #3]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70bb      	strb	r3, [r7, #2]
 8004b46:	4613      	mov	r3, r2
 8004b48:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004b54:	23f6      	movs	r3, #246	; 0xf6
 8004b56:	73fb      	strb	r3, [r7, #15]
 8004b58:	e107      	b.n	8004d6a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004b5a:	78bb      	ldrb	r3, [r7, #2]
 8004b5c:	2b14      	cmp	r3, #20
 8004b5e:	d110      	bne.n	8004b82 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004b60:	7e3b      	ldrb	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004b66:	2310      	movs	r3, #16
 8004b68:	73bb      	strb	r3, [r7, #14]
 8004b6a:	e001      	b.n	8004b70 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	461a      	mov	r2, r3
 8004b74:	2184      	movs	r1, #132	; 0x84
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f003 fbb6 	bl	80082e8 <VL53L0X_WrByte>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]
 8004b80:	e0f3      	b.n	8004d6a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004b82:	78bb      	ldrb	r3, [r7, #2]
 8004b84:	2b15      	cmp	r3, #21
 8004b86:	f040 8097 	bne.w	8004cb8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	21ff      	movs	r1, #255	; 0xff
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f003 fbaa 	bl	80082e8 <VL53L0X_WrByte>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f003 fba0 	bl	80082e8 <VL53L0X_WrByte>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	21ff      	movs	r1, #255	; 0xff
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f003 fb96 	bl	80082e8 <VL53L0X_WrByte>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f003 fb8c 	bl	80082e8 <VL53L0X_WrByte>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004bda:	2202      	movs	r2, #2
 8004bdc:	2185      	movs	r1, #133	; 0x85
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f003 fb82 	bl	80082e8 <VL53L0X_WrByte>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004bee:	2204      	movs	r2, #4
 8004bf0:	21ff      	movs	r1, #255	; 0xff
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f003 fb78 	bl	80082e8 <VL53L0X_WrByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004c02:	2200      	movs	r2, #0
 8004c04:	21cd      	movs	r1, #205	; 0xcd
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f003 fb6e 	bl	80082e8 <VL53L0X_WrByte>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004c16:	2211      	movs	r2, #17
 8004c18:	21cc      	movs	r1, #204	; 0xcc
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f003 fb64 	bl	80082e8 <VL53L0X_WrByte>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004c2a:	2207      	movs	r2, #7
 8004c2c:	21ff      	movs	r1, #255	; 0xff
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f003 fb5a 	bl	80082e8 <VL53L0X_WrByte>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	21be      	movs	r1, #190	; 0xbe
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f003 fb50 	bl	80082e8 <VL53L0X_WrByte>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004c52:	2206      	movs	r2, #6
 8004c54:	21ff      	movs	r1, #255	; 0xff
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f003 fb46 	bl	80082e8 <VL53L0X_WrByte>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004c66:	2209      	movs	r2, #9
 8004c68:	21cc      	movs	r1, #204	; 0xcc
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f003 fb3c 	bl	80082e8 <VL53L0X_WrByte>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	21ff      	movs	r1, #255	; 0xff
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f003 fb32 	bl	80082e8 <VL53L0X_WrByte>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004c8e:	2201      	movs	r2, #1
 8004c90:	21ff      	movs	r1, #255	; 0xff
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f003 fb28 	bl	80082e8 <VL53L0X_WrByte>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f003 fb1e 	bl	80082e8 <VL53L0X_WrByte>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	e058      	b.n	8004d6a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d121      	bne.n	8004d04 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004cc0:	787b      	ldrb	r3, [r7, #1]
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d81b      	bhi.n	8004cfe <VL53L0X_SetGpioConfig+0x1ce>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <VL53L0X_SetGpioConfig+0x19c>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004ce1 	.word	0x08004ce1
 8004cd0:	08004ce7 	.word	0x08004ce7
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004cf3 	.word	0x08004cf3
 8004cdc:	08004cf9 	.word	0x08004cf9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73bb      	strb	r3, [r7, #14]
				break;
 8004ce4:	e00f      	b.n	8004d06 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73bb      	strb	r3, [r7, #14]
				break;
 8004cea:	e00c      	b.n	8004d06 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004cec:	2302      	movs	r3, #2
 8004cee:	73bb      	strb	r3, [r7, #14]
				break;
 8004cf0:	e009      	b.n	8004d06 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	73bb      	strb	r3, [r7, #14]
				break;
 8004cf6:	e006      	b.n	8004d06 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	73bb      	strb	r3, [r7, #14]
				break;
 8004cfc:	e003      	b.n	8004d06 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8004cfe:	23f5      	movs	r3, #245	; 0xf5
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e000      	b.n	8004d06 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004d04:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8004d0e:	7bbb      	ldrb	r3, [r7, #14]
 8004d10:	461a      	mov	r2, r3
 8004d12:	210a      	movs	r1, #10
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f003 fae7 	bl	80082e8 <VL53L0X_WrByte>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004d26:	7e3b      	ldrb	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73bb      	strb	r3, [r7, #14]
 8004d30:	e001      	b.n	8004d36 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004d32:	2310      	movs	r3, #16
 8004d34:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004d36:	7bbb      	ldrb	r3, [r7, #14]
 8004d38:	22ef      	movs	r2, #239	; 0xef
 8004d3a:	2184      	movs	r1, #132	; 0x84
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f003 fb21 	bl	8008384 <VL53L0X_UpdateByte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	787a      	ldrb	r2, [r7, #1]
 8004d52:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f83f 	bl	8004de4 <VL53L0X_ClearInterruptMask>
 8004d66:	4603      	mov	r3, r0
 8004d68:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	460b      	mov	r3, r1
 8004d86:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	461a      	mov	r2, r3
 8004d92:	210e      	movs	r1, #14
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f003 fb53 	bl	8008440 <VL53L0X_RdWord>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004d9e:	8abb      	ldrh	r3, [r7, #20]
 8004da0:	045b      	lsls	r3, r3, #17
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <VL53L0X_GetInterruptThresholds+0x68>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10f      	bne.n	8004dd4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	461a      	mov	r2, r3
 8004dba:	210c      	movs	r1, #12
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f003 fb3f 	bl	8008440 <VL53L0X_RdWord>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004dc6:	8abb      	ldrh	r3, [r7, #20]
 8004dc8:	045b      	lsls	r3, r3, #17
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <VL53L0X_GetInterruptThresholds+0x68>)
 8004dce:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	1ffe0000 	.word	0x1ffe0000

08004de4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004df6:	2201      	movs	r2, #1
 8004df8:	210b      	movs	r1, #11
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f003 fa74 	bl	80082e8 <VL53L0X_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004e04:	2200      	movs	r2, #0
 8004e06:	210b      	movs	r1, #11
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f003 fa6d 	bl	80082e8 <VL53L0X_WrByte>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004e18:	f107 030d 	add.w	r3, r7, #13
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2113      	movs	r1, #19
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f003 fae3 	bl	80083ec <VL53L0X_RdByte>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004e30:	7bbb      	ldrb	r3, [r7, #14]
 8004e32:	3301      	adds	r3, #1
 8004e34:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004e36:	7b7b      	ldrb	r3, [r7, #13]
 8004e38:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d006      	beq.n	8004e4e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004e40:	7bbb      	ldrb	r3, [r7, #14]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d803      	bhi.n	8004e4e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0d3      	beq.n	8004df6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004e4e:	7bbb      	ldrb	r3, [r7, #14]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004e54:	23f4      	movs	r3, #244	; 0xf4
 8004e56:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004e72:	f107 030e 	add.w	r3, r7, #14
 8004e76:	461a      	mov	r2, r3
 8004e78:	2113      	movs	r1, #19
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f003 fab6 	bl	80083ec <VL53L0X_RdByte>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004e84:	7bbb      	ldrb	r3, [r7, #14]
 8004e86:	f003 0207 	and.w	r2, r3, #7
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	f003 0318 	and.w	r3, r3, #24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004e98:	23fa      	movs	r3, #250	; 0xfa
 8004e9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fa02 	bl	80052c6 <VL53L0X_perform_ref_spad_management>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004ee0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ee4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eea:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004eec:	f107 0308 	add.w	r3, r7, #8
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2128      	movs	r1, #40	; 0x28
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f003 faa3 	bl	8008440 <VL53L0X_RdWord>
 8004efa:	4603      	mov	r3, r0
 8004efc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d11e      	bne.n	8004f44 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004f06:	893b      	ldrh	r3, [r7, #8]
 8004f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004f10:	893b      	ldrh	r3, [r7, #8]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	dd0b      	ble.n	8004f34 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004f1c:	893a      	ldrh	r2, [r7, #8]
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	b21b      	sxth	r3, r3
 8004f26:	461a      	mov	r2, r3
					* 250;
 8004f28:	23fa      	movs	r3, #250	; 0xfa
 8004f2a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e007      	b.n	8004f44 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004f34:	893b      	ldrh	r3, [r7, #8]
 8004f36:	b21b      	sxth	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	23fa      	movs	r3, #250	; 0xfa
 8004f3c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b08b      	sub	sp, #44	; 0x2c
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	fb01 f202 	mul.w	r2, r1, r2
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8e:	e030      	b.n	8004ff2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	4413      	add	r3, r2
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11e      	bne.n	8004fe4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004fa6:	7ffa      	ldrb	r2, [r7, #31]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	fa42 f303 	asr.w	r3, r2, r3
 8004fae:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004fb4:	e016      	b.n	8004fe4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004fb6:	7ffb      	ldrb	r3, [r7, #31]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <get_next_good_spad+0x88>
				success = 1;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	fb03 f202 	mul.w	r2, r3, r2
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	4413      	add	r3, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
				break;
 8004fd6:	e009      	b.n	8004fec <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d3e4      	bcc.n	8004fb6 <get_next_good_spad+0x66>
				coarseIndex++) {
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d202      	bcs.n	8005000 <get_next_good_spad+0xb0>
 8004ffa:	7fbb      	ldrb	r3, [r7, #30]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0c7      	beq.n	8004f90 <get_next_good_spad+0x40>
		}
	}
}
 8005000:	bf00      	nop
 8005002:	372c      	adds	r7, #44	; 0x2c
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
	...

0800500c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	099b      	lsrs	r3, r3, #6
 800501c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <is_aperture+0x30>)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <is_aperture+0x22>
		isAperture = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	200002bc 	.word	0x200002bc

08005040 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005040:	b480      	push	{r7}
 8005042:	b089      	sub	sp, #36	; 0x24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005050:	2308      	movs	r3, #8
 8005052:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	fbb3 f2f2 	udiv	r2, r3, r2
 8005066:	69b9      	ldr	r1, [r7, #24]
 8005068:	fb01 f202 	mul.w	r2, r1, r2
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005078:	23ce      	movs	r3, #206	; 0xce
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e010      	b.n	80050a0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b25a      	sxtb	r2, r3
 8005088:	2101      	movs	r1, #1
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	b25b      	sxtb	r3, r3
 8005092:	4313      	orrs	r3, r2
 8005094:	b259      	sxtb	r1, r3
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	b2ca      	uxtb	r2, r1
 800509e:	701a      	strb	r2, [r3, #0]

	return status;
 80050a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3724      	adds	r7, #36	; 0x24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80050b8:	2306      	movs	r3, #6
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	21b0      	movs	r1, #176	; 0xb0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f003 f8b6 	bl	8008230 <VL53L0X_WriteMulti>
 80050c4:	4603      	mov	r3, r0
 80050c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80050c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80050de:	2306      	movs	r3, #6
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	21b0      	movs	r1, #176	; 0xb0
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f003 f8d3 	bl	8008290 <VL53L0X_ReadMulti>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80050ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b08c      	sub	sp, #48	; 0x30
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	460b      	mov	r3, r1
 8005108:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005112:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005116:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005118:	2300      	movs	r3, #0
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
 800511c:	e02b      	b.n	8005176 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800511e:	f107 031c 	add.w	r3, r7, #28
 8005122:	6a3a      	ldr	r2, [r7, #32]
 8005124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ff12 	bl	8004f50 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d103      	bne.n	800513c <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005134:	23ce      	movs	r3, #206	; 0xce
 8005136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800513a:	e020      	b.n	800517e <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	461a      	mov	r2, r3
 8005140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005142:	4413      	add	r3, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff ff61 	bl	800500c <is_aperture>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005154:	23ce      	movs	r3, #206	; 0xce
 8005156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800515a:	e010      	b.n	800517e <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005164:	6838      	ldr	r0, [r7, #0]
 8005166:	f7ff ff6b 	bl	8005040 <enable_spad_bit>
		currentSpad++;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	3301      	adds	r3, #1
 800516e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	3301      	adds	r3, #1
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
 8005176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	429a      	cmp	r2, r3
 800517c:	d3cf      	bcc.n	800511e <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005184:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ff8d 	bl	80050ae <set_ref_spad_map>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800519a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d121      	bne.n	80051e6 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80051a2:	f107 0314 	add.w	r3, r7, #20
 80051a6:	4619      	mov	r1, r3
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff93 	bl	80050d4 <get_ref_spad_map>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80051b8:	e011      	b.n	80051de <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	4413      	add	r3, r2
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	f107 0114 	add.w	r1, r7, #20
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	440b      	add	r3, r1
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d003      	beq.n	80051d8 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80051d0:	23ce      	movs	r3, #206	; 0xce
 80051d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80051d6:	e006      	b.n	80051e6 <enable_ref_spads+0xec>
			}
			i++;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	3301      	adds	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3e9      	bcc.n	80051ba <enable_ref_spads+0xc0>
		}
	}
	return status;
 80051e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3730      	adds	r7, #48	; 0x30
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b08a      	sub	sp, #40	; 0x28
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800520e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005212:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800521a:	22c0      	movs	r2, #192	; 0xc0
 800521c:	2101      	movs	r1, #1
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f003 f862 	bl	80082e8 <VL53L0X_WrByte>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800522a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fc49 	bl	8004ad0 <VL53L0X_PerformSingleRangingMeasurement>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800524c:	2201      	movs	r2, #1
 800524e:	21ff      	movs	r1, #255	; 0xff
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f003 f849 	bl	80082e8 <VL53L0X_WrByte>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800525c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	21b6      	movs	r1, #182	; 0xb6
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f003 f8e9 	bl	8008440 <VL53L0X_RdWord>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800527c:	2200      	movs	r2, #0
 800527e:	21ff      	movs	r1, #255	; 0xff
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f003 f831 	bl	80082e8 <VL53L0X_WrByte>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800528c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005290:	2b00      	cmp	r3, #0
 8005292:	d112      	bne.n	80052ba <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005298:	461a      	mov	r2, r3
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f003 f823 	bl	80082e8 <VL53L0X_WrByte>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80052a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80052b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80052ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80052c6:	b590      	push	{r4, r7, lr}
 80052c8:	b09d      	sub	sp, #116	; 0x74
 80052ca:	af06      	add	r7, sp, #24
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80052d8:	23b4      	movs	r3, #180	; 0xb4
 80052da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80052de:	2303      	movs	r3, #3
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80052e2:	232c      	movs	r3, #44	; 0x2c
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80052f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80052f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8005300:	2306      	movs	r3, #6
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800532a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800532c:	2300      	movs	r3, #0
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	e009      	b.n	8005346 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005336:	4413      	add	r3, r2
 8005338:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005342:	3301      	adds	r3, #1
 8005344:	64bb      	str	r3, [r7, #72]	; 0x48
 8005346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	429a      	cmp	r2, r3
 800534c:	d3f1      	bcc.n	8005332 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800534e:	2201      	movs	r2, #1
 8005350:	21ff      	movs	r1, #255	; 0xff
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f002 ffc8 	bl	80082e8 <VL53L0X_WrByte>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800535e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005362:	2b00      	cmp	r3, #0
 8005364:	d107      	bne.n	8005376 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005366:	2200      	movs	r2, #0
 8005368:	214f      	movs	r1, #79	; 0x4f
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f002 ffbc 	bl	80082e8 <VL53L0X_WrByte>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005376:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800537e:	222c      	movs	r2, #44	; 0x2c
 8005380:	214e      	movs	r1, #78	; 0x4e
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f002 ffb0 	bl	80082e8 <VL53L0X_WrByte>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800538e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005396:	2200      	movs	r2, #0
 8005398:	21ff      	movs	r1, #255	; 0xff
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f002 ffa4 	bl	80082e8 <VL53L0X_WrByte>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80053a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80053ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80053b2:	461a      	mov	r2, r3
 80053b4:	21b6      	movs	r1, #182	; 0xb6
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f002 ff96 	bl	80082e8 <VL53L0X_WrByte>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80053c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f002 ff8a 	bl	80082e8 <VL53L0X_WrByte>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80053da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80053e2:	f107 0210 	add.w	r2, r7, #16
 80053e6:	f107 0111 	add.w	r1, r7, #17
 80053ea:	2300      	movs	r3, #0
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fbbb 	bl	8005b68 <VL53L0X_perform_ref_calibration>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80053f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d121      	bne.n	8005444 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8005404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005406:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800540c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540e:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800541c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005420:	f107 0218 	add.w	r2, r7, #24
 8005424:	9204      	str	r2, [sp, #16]
 8005426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005428:	9203      	str	r2, [sp, #12]
 800542a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800542c:	9202      	str	r2, [sp, #8]
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	4623      	mov	r3, r4
 8005436:	4602      	mov	r2, r0
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fe5e 	bl	80050fa <enable_ref_spads>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005444:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005448:	2b00      	cmp	r3, #0
 800544a:	d174      	bne.n	8005536 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005450:	f107 0312 	add.w	r3, r7, #18
 8005454:	4619      	mov	r1, r3
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fecb 	bl	80051f2 <perform_ref_signal_measurement>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005462:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005466:	2b00      	cmp	r3, #0
 8005468:	d161      	bne.n	800552e <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800546a:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800546c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800546e:	429a      	cmp	r2, r3
 8005470:	d25d      	bcs.n	800552e <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005472:	2300      	movs	r3, #0
 8005474:	64bb      	str	r3, [r7, #72]	; 0x48
 8005476:	e009      	b.n	800548c <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547c:	4413      	add	r3, r2
 800547e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005488:	3301      	adds	r3, #1
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
 800548c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	429a      	cmp	r2, r3
 8005492:	d3f1      	bcc.n	8005478 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005494:	e002      	b.n	800549c <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005498:	3301      	adds	r3, #1
 800549a:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800549c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80054a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a2:	4413      	add	r3, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fdb1 	bl	800500c <is_aperture>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80054b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d3ee      	bcc.n	8005496 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80054b8:	2301      	movs	r3, #1
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80054cc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80054d0:	f107 0218 	add.w	r2, r7, #24
 80054d4:	9204      	str	r2, [sp, #16]
 80054d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d8:	9203      	str	r2, [sp, #12]
 80054da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054dc:	9202      	str	r2, [sp, #8]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4623      	mov	r3, r4
 80054e6:	4602      	mov	r2, r0
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff fe06 	bl	80050fa <enable_ref_spads>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80054f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11b      	bne.n	8005534 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005500:	f107 0312 	add.w	r3, r7, #18
 8005504:	4619      	mov	r1, r3
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff fe73 	bl	80051f2 <perform_ref_signal_measurement>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005512:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10c      	bne.n	8005534 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800551a:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800551c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800551e:	429a      	cmp	r2, r3
 8005520:	d208      	bcs.n	8005534 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800552c:	e002      	b.n	8005534 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005532:	e000      	b.n	8005536 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005534:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005536:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 80af 	bne.w	800569e <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005540:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005542:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005544:	429a      	cmp	r2, r3
 8005546:	f240 80aa 	bls.w	800569e <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005560:	4618      	mov	r0, r3
 8005562:	f003 f81b 	bl	800859c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005566:	8a7b      	ldrh	r3, [r7, #18]
 8005568:	461a      	mov	r2, r3
 800556a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	bfb8      	it	lt
 8005572:	425b      	neglt	r3, r3
 8005574:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800557c:	e086      	b.n	800568c <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800558a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800558c:	f7ff fce0 	bl	8004f50 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d103      	bne.n	80055a0 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005598:	23ce      	movs	r3, #206	; 0xce
 800559a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800559e:	e07e      	b.n	800569e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80055a0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fd2f 	bl	800500c <is_aperture>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80055be:	e06e      	b.n	800569e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	3301      	adds	r3, #1
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80055d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fd33 	bl	8005040 <enable_spad_bit>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80055e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10c      	bne.n	8005602 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80055e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ea:	3301      	adds	r3, #1
 80055ec:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80055f4:	4619      	mov	r1, r3
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fd59 	bl	80050ae <set_ref_spad_map>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005602:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005606:	2b00      	cmp	r3, #0
 8005608:	d146      	bne.n	8005698 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800560a:	f107 0312 	add.w	r3, r7, #18
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff fdee 	bl	80051f2 <perform_ref_signal_measurement>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800561c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005620:	2b00      	cmp	r3, #0
 8005622:	d13b      	bne.n	800569c <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005624:	8a7b      	ldrh	r3, [r7, #18]
 8005626:	461a      	mov	r2, r3
 8005628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bfb8      	it	lt
 8005630:	425b      	neglt	r3, r3
 8005632:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005634:	8a7b      	ldrh	r3, [r7, #18]
 8005636:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005638:	429a      	cmp	r2, r3
 800563a:	d21c      	bcs.n	8005676 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005640:	429a      	cmp	r2, r3
 8005642:	d914      	bls.n	800566e <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005644:	f107 031c 	add.w	r3, r7, #28
 8005648:	4619      	mov	r1, r3
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fd2f 	bl	80050ae <set_ref_spad_map>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800565c:	f107 011c 	add.w	r1, r7, #28
 8005660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005662:	4618      	mov	r0, r3
 8005664:	f002 ff9a 	bl	800859c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	3b01      	subs	r3, #1
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005674:	e00a      	b.n	800568c <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005680:	f107 031c 	add.w	r3, r7, #28
 8005684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005686:	4618      	mov	r0, r3
 8005688:	f002 ff88 	bl	800859c <memcpy>
		while (!complete) {
 800568c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005690:	2b00      	cmp	r3, #0
 8005692:	f43f af74 	beq.w	800557e <VL53L0X_perform_ref_spad_management+0x2b8>
 8005696:	e002      	b.n	800569e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800569c:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800569e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d115      	bne.n	80056d2 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056aa:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80056b2:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80056d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	375c      	adds	r7, #92	; 0x5c
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}

080056de <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80056de:	b590      	push	{r4, r7, lr}
 80056e0:	b093      	sub	sp, #76	; 0x4c
 80056e2:	af06      	add	r7, sp, #24
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	4613      	mov	r3, r2
 80056ea:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80056f6:	23b4      	movs	r3, #180	; 0xb4
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80056fc:	2306      	movs	r3, #6
 80056fe:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005700:	232c      	movs	r3, #44	; 0x2c
 8005702:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005704:	2201      	movs	r2, #1
 8005706:	21ff      	movs	r1, #255	; 0xff
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f002 fded 	bl	80082e8 <VL53L0X_WrByte>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005714:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005718:	2b00      	cmp	r3, #0
 800571a:	d107      	bne.n	800572c <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800571c:	2200      	movs	r2, #0
 800571e:	214f      	movs	r1, #79	; 0x4f
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f002 fde1 	bl	80082e8 <VL53L0X_WrByte>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800572c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005730:	2b00      	cmp	r3, #0
 8005732:	d107      	bne.n	8005744 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005734:	222c      	movs	r2, #44	; 0x2c
 8005736:	214e      	movs	r1, #78	; 0x4e
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f002 fdd5 	bl	80082e8 <VL53L0X_WrByte>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005744:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800574c:	2200      	movs	r2, #0
 800574e:	21ff      	movs	r1, #255	; 0xff
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f002 fdc9 	bl	80082e8 <VL53L0X_WrByte>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800575c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005768:	461a      	mov	r2, r3
 800576a:	21b6      	movs	r1, #182	; 0xb6
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f002 fdbb 	bl	80082e8 <VL53L0X_WrByte>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005778:	2300      	movs	r3, #0
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
 800577c:	e009      	b.n	8005792 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	4413      	add	r3, r2
 8005784:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	3301      	adds	r3, #1
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3f1      	bcc.n	800577e <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d011      	beq.n	80057c4 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80057a0:	e002      	b.n	80057a8 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	3301      	adds	r3, #1
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80057a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	4413      	add	r3, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fc2b 	bl	800500c <is_aperture>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <VL53L0X_set_reference_spads+0xe6>
 80057bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d3ee      	bcc.n	80057a2 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80057d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d4:	79f9      	ldrb	r1, [r7, #7]
 80057d6:	f107 0214 	add.w	r2, r7, #20
 80057da:	9204      	str	r2, [sp, #16]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	9203      	str	r2, [sp, #12]
 80057e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e2:	9202      	str	r2, [sp, #8]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	4623      	mov	r3, r4
 80057ec:	4602      	mov	r2, r0
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fc83 	bl	80050fa <enable_ref_spads>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80057fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10c      	bne.n	800581c <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	79fa      	ldrb	r2, [r7, #7]
 8005818:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800581c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005820:	4618      	mov	r0, r3
 8005822:	3734      	adds	r7, #52	; 0x34
 8005824:	46bd      	mov	sp, r7
 8005826:	bd90      	pop	{r4, r7, pc}

08005828 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005834:	2300      	movs	r3, #0
 8005836:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	2100      	movs	r1, #0
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f002 fd4b 	bl	80082e8 <VL53L0X_WrByte>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d104      	bne.n	8005868 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9bf 	bl	8005be2 <VL53L0X_measurement_poll_for_completion>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005870:	2100      	movs	r1, #0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fab6 	bl	8004de4 <VL53L0X_ClearInterruptMask>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800587c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005884:	2200      	movs	r2, #0
 8005886:	2100      	movs	r1, #0
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 fd2d 	bl	80082e8 <VL53L0X_WrByte>
 800588e:	4603      	mov	r3, r0
 8005890:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	461a      	mov	r2, r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	70fb      	strb	r3, [r7, #3]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70bb      	strb	r3, [r7, #2]
 80058b4:	4613      	mov	r3, r2
 80058b6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058c0:	2201      	movs	r2, #1
 80058c2:	21ff      	movs	r1, #255	; 0xff
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f002 fd0f 	bl	80082e8 <VL53L0X_WrByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058d4:	2200      	movs	r2, #0
 80058d6:	2100      	movs	r1, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 fd05 	bl	80082e8 <VL53L0X_WrByte>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058e8:	2200      	movs	r2, #0
 80058ea:	21ff      	movs	r1, #255	; 0xff
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f002 fcfb 	bl	80082e8 <VL53L0X_WrByte>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01e      	beq.n	8005940 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	21cb      	movs	r1, #203	; 0xcb
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f002 fd6c 	bl	80083ec <VL53L0X_RdByte>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	4313      	orrs	r3, r2
 800591c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800591e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02a      	beq.n	800597c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005926:	f107 030e 	add.w	r3, r7, #14
 800592a:	461a      	mov	r2, r3
 800592c:	21ee      	movs	r1, #238	; 0xee
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fd5c 	bl	80083ec <VL53L0X_RdByte>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	4313      	orrs	r3, r2
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	e01d      	b.n	800597c <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005940:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005948:	78bb      	ldrb	r3, [r7, #2]
 800594a:	461a      	mov	r2, r3
 800594c:	21cb      	movs	r1, #203	; 0xcb
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f002 fcca 	bl	80082e8 <VL53L0X_WrByte>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	4313      	orrs	r3, r2
 800595c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800595e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005966:	787b      	ldrb	r3, [r7, #1]
 8005968:	2280      	movs	r2, #128	; 0x80
 800596a:	21ee      	movs	r1, #238	; 0xee
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f002 fd09 	bl	8008384 <VL53L0X_UpdateByte>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	4313      	orrs	r3, r2
 800597a:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800597c:	2201      	movs	r2, #1
 800597e:	21ff      	movs	r1, #255	; 0xff
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f002 fcb1 	bl	80082e8 <VL53L0X_WrByte>
 8005986:	4603      	mov	r3, r0
 8005988:	461a      	mov	r2, r3
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	4313      	orrs	r3, r2
 800598e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005990:	2201      	movs	r2, #1
 8005992:	2100      	movs	r1, #0
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f002 fca7 	bl	80082e8 <VL53L0X_WrByte>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80059a4:	2200      	movs	r2, #0
 80059a6:	21ff      	movs	r1, #255	; 0xff
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 fc9d 	bl	80082e8 <VL53L0X_WrByte>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	701a      	strb	r2, [r3, #0]

	return Status;
 80059c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	460b      	mov	r3, r1
 80059e0:	71fb      	strb	r3, [r7, #7]
 80059e2:	4613      	mov	r3, r2
 80059e4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80059fa:	79bb      	ldrb	r3, [r7, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005a06:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f002 fc6b 	bl	80082e8 <VL53L0X_WrByte>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005a1e:	2140      	movs	r1, #64	; 0x40
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff ff01 	bl	8005828 <VL53L0X_perform_single_ref_calibration>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d115      	bne.n	8005a5e <VL53L0X_perform_vhv_calibration+0x8e>
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d112      	bne.n	8005a5e <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005a38:	7d39      	ldrb	r1, [r7, #20]
 8005a3a:	7d7a      	ldrb	r2, [r7, #21]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	2301      	movs	r3, #1
 8005a42:	9302      	str	r3, [sp, #8]
 8005a44:	f107 0313 	add.w	r3, r7, #19
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	2101      	movs	r1, #1
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff ff23 	bl	800589e <VL53L0X_ref_calibration_io>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	75fb      	strb	r3, [r7, #23]
 8005a5c:	e002      	b.n	8005a64 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d112      	bne.n	8005a92 <VL53L0X_perform_vhv_calibration+0xc2>
 8005a6c:	79bb      	ldrb	r3, [r7, #6]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00f      	beq.n	8005a92 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a72:	7dbb      	ldrb	r3, [r7, #22]
 8005a74:	461a      	mov	r2, r3
 8005a76:	2101      	movs	r1, #1
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f002 fc35 	bl	80082e8 <VL53L0X_WrByte>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	7dba      	ldrb	r2, [r7, #22]
 8005a8e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b08a      	sub	sp, #40	; 0x28
 8005aa2:	af04      	add	r7, sp, #16
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	461a      	mov	r2, r3
 8005aac:	460b      	mov	r3, r1
 8005aae:	71fb      	strb	r3, [r7, #7]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005ac4:	79bb      	ldrb	r3, [r7, #6]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005ad0:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f002 fc06 	bl	80082e8 <VL53L0X_WrByte>
 8005adc:	4603      	mov	r3, r0
 8005ade:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005ae8:	2100      	movs	r1, #0
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fe9c 	bl	8005828 <VL53L0X_perform_single_ref_calibration>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d115      	bne.n	8005b28 <VL53L0X_perform_phase_calibration+0x8a>
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d112      	bne.n	8005b28 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005b02:	7d39      	ldrb	r1, [r7, #20]
 8005b04:	7d7a      	ldrb	r2, [r7, #21]
 8005b06:	2301      	movs	r3, #1
 8005b08:	9303      	str	r3, [sp, #12]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9302      	str	r3, [sp, #8]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	f107 0313 	add.w	r3, r7, #19
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff febe 	bl	800589e <VL53L0X_ref_calibration_io>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75fb      	strb	r3, [r7, #23]
 8005b26:	e002      	b.n	8005b2e <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d112      	bne.n	8005b5c <VL53L0X_perform_phase_calibration+0xbe>
 8005b36:	79bb      	ldrb	r3, [r7, #6]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b3c:	7dbb      	ldrb	r3, [r7, #22]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2101      	movs	r1, #1
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f002 fbd0 	bl	80082e8 <VL53L0X_WrByte>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	7dba      	ldrb	r2, [r7, #22]
 8005b58:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005b84:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff ff1f 	bl	80059d0 <VL53L0X_perform_vhv_calibration>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d107      	bne.n	8005bae <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff ff7a 	bl	8005a9e <VL53L0X_perform_phase_calibration>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10f      	bne.n	8005bd6 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bb6:	7dbb      	ldrb	r3, [r7, #22]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2101      	movs	r1, #1
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f002 fb93 	bl	80082e8 <VL53L0X_WrByte>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	7dba      	ldrb	r2, [r7, #22]
 8005bd2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005bf6:	f107 030f 	add.w	r3, r7, #15
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fe fe03 	bl	8004808 <VL53L0X_GetMeasurementDataReady>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d110      	bne.n	8005c30 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d00f      	beq.n	8005c34 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	3301      	adds	r3, #1
 8005c18:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c20:	d302      	bcc.n	8005c28 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005c22:	23f9      	movs	r3, #249	; 0xf9
 8005c24:	75fb      	strb	r3, [r7, #23]
			break;
 8005c26:	e006      	b.n	8005c36 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 fc7d 	bl	8008528 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005c2e:	e7e2      	b.n	8005bf6 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005c34:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	4603      	mov	r3, r0
 8005c4a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	3301      	adds	r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr

08005c66 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c9a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005c9c:	e002      	b.n	8005ca4 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	089b      	lsrs	r3, r3, #2
 8005ca2:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d8f8      	bhi.n	8005c9e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005cac:	e017      	b.n	8005cde <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d30b      	bcc.n	8005cd2 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e002      	b.n	8005cd8 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e4      	bne.n	8005cae <VL53L0X_isqrt+0x24>
	}

	return res;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2183      	movs	r1, #131	; 0x83
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f002 faf1 	bl	80082e8 <VL53L0X_WrByte>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11e      	bne.n	8005d56 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005d1c:	f107 030f 	add.w	r3, r7, #15
 8005d20:	461a      	mov	r2, r3
 8005d22:	2183      	movs	r1, #131	; 0x83
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f002 fb61 	bl	80083ec <VL53L0X_RdByte>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <VL53L0X_device_read_strobe+0x5a>
 8005d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d48:	d3e8      	bcc.n	8005d1c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d50:	d301      	bcc.n	8005d56 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005d52:	23f9      	movs	r3, #249	; 0xf9
 8005d54:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005d56:	2201      	movs	r2, #1
 8005d58:	2183      	movs	r1, #131	; 0x83
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 fac4 	bl	80082e8 <VL53L0X_WrByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b098      	sub	sp, #96	; 0x60
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005da6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005dc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dc6:	2b07      	cmp	r3, #7
 8005dc8:	f000 8408 	beq.w	80065dc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005dcc:	2201      	movs	r2, #1
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f002 fa89 	bl	80082e8 <VL53L0X_WrByte>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005de4:	2201      	movs	r2, #1
 8005de6:	21ff      	movs	r1, #255	; 0xff
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 fa7d 	bl	80082e8 <VL53L0X_WrByte>
 8005dee:	4603      	mov	r3, r0
 8005df0:	461a      	mov	r2, r3
 8005df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f002 fa71 	bl	80082e8 <VL53L0X_WrByte>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005e14:	2206      	movs	r2, #6
 8005e16:	21ff      	movs	r1, #255	; 0xff
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f002 fa65 	bl	80082e8 <VL53L0X_WrByte>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	461a      	mov	r2, r3
 8005e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005e2c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005e30:	461a      	mov	r2, r3
 8005e32:	2183      	movs	r1, #131	; 0x83
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f002 fad9 	bl	80083ec <VL53L0X_RdByte>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005e48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e4c:	f043 0304 	orr.w	r3, r3, #4
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	2183      	movs	r1, #131	; 0x83
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 fa46 	bl	80082e8 <VL53L0X_WrByte>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	21ff      	movs	r1, #255	; 0xff
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f002 fa3a 	bl	80082e8 <VL53L0X_WrByte>
 8005e74:	4603      	mov	r3, r0
 8005e76:	461a      	mov	r2, r3
 8005e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005e82:	2201      	movs	r2, #1
 8005e84:	2181      	movs	r1, #129	; 0x81
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f002 fa2e 	bl	80082e8 <VL53L0X_WrByte>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f002 fb44 	bl	8008528 <VL53L0X_PollingDelay>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005eae:	2201      	movs	r2, #1
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f002 fa18 	bl	80082e8 <VL53L0X_WrByte>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8098 	beq.w	8006002 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005ed2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ed6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 8091 	bne.w	8006002 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005ee0:	226b      	movs	r2, #107	; 0x6b
 8005ee2:	2194      	movs	r1, #148	; 0x94
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 f9ff 	bl	80082e8 <VL53L0X_WrByte>
 8005eea:	4603      	mov	r3, r0
 8005eec:	461a      	mov	r2, r3
 8005eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fef9 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f10:	461a      	mov	r2, r3
 8005f12:	2190      	movs	r1, #144	; 0x90
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f002 facb 	bl	80084b0 <VL53L0X_RdDWord>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f32:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	0bdb      	lsrs	r3, r3, #15
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005f44:	2224      	movs	r2, #36	; 0x24
 8005f46:	2194      	movs	r1, #148	; 0x94
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 f9cd 	bl	80082e8 <VL53L0X_WrByte>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fec7 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f74:	461a      	mov	r2, r3
 8005f76:	2190      	movs	r1, #144	; 0x90
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f002 fa99 	bl	80084b0 <VL53L0X_RdDWord>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	0e1b      	lsrs	r3, r3, #24
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005faa:	2225      	movs	r2, #37	; 0x25
 8005fac:	2194      	movs	r1, #148	; 0x94
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f002 f99a 	bl	80082e8 <VL53L0X_WrByte>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fe94 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2190      	movs	r1, #144	; 0x90
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fa66 	bl	80084b0 <VL53L0X_RdDWord>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	0e1b      	lsrs	r3, r3, #24
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8189 	beq.w	8006320 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800600e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006012:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006016:	2b00      	cmp	r3, #0
 8006018:	f040 8182 	bne.w	8006320 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800601c:	2202      	movs	r2, #2
 800601e:	2194      	movs	r1, #148	; 0x94
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f002 f961 	bl	80082e8 <VL53L0X_WrByte>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800602e:	4313      	orrs	r3, r2
 8006030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fe5b 	bl	8005cf0 <VL53L0X_device_read_strobe>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006042:	4313      	orrs	r3, r2
 8006044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006048:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800604c:	461a      	mov	r2, r3
 800604e:	2190      	movs	r1, #144	; 0x90
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f002 f9cb 	bl	80083ec <VL53L0X_RdByte>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800605e:	4313      	orrs	r3, r2
 8006060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006064:	227b      	movs	r2, #123	; 0x7b
 8006066:	2194      	movs	r1, #148	; 0x94
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f002 f93d 	bl	80082e8 <VL53L0X_WrByte>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006076:	4313      	orrs	r3, r2
 8006078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fe37 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800608a:	4313      	orrs	r3, r2
 800608c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006090:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006094:	461a      	mov	r2, r3
 8006096:	2190      	movs	r1, #144	; 0x90
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f002 f9a7 	bl	80083ec <VL53L0X_RdByte>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80060ac:	2277      	movs	r2, #119	; 0x77
 80060ae:	2194      	movs	r1, #148	; 0x94
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 f919 	bl	80082e8 <VL53L0X_WrByte>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060be:	4313      	orrs	r3, r2
 80060c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fe13 	bl	8005cf0 <VL53L0X_device_read_strobe>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060dc:	461a      	mov	r2, r3
 80060de:	2190      	movs	r1, #144	; 0x90
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 f9e5 	bl	80084b0 <VL53L0X_RdDWord>
 80060e6:	4603      	mov	r3, r0
 80060e8:	461a      	mov	r2, r3
 80060ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	0e5b      	lsrs	r3, r3, #25
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	0c9b      	lsrs	r3, r3, #18
 8006106:	b2db      	uxtb	r3, r3
 8006108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800610c:	b2db      	uxtb	r3, r3
 800610e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	0adb      	lsrs	r3, r3, #11
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611a:	b2db      	uxtb	r3, r3
 800611c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006128:	b2db      	uxtb	r3, r3
 800612a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	b2db      	uxtb	r3, r3
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800613e:	2278      	movs	r2, #120	; 0x78
 8006140:	2194      	movs	r1, #148	; 0x94
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f002 f8d0 	bl	80082e8 <VL53L0X_WrByte>
 8006148:	4603      	mov	r3, r0
 800614a:	461a      	mov	r2, r3
 800614c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006150:	4313      	orrs	r3, r2
 8006152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fdca 	bl	8005cf0 <VL53L0X_device_read_strobe>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006164:	4313      	orrs	r3, r2
 8006166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800616a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800616e:	461a      	mov	r2, r3
 8006170:	2190      	movs	r1, #144	; 0x90
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f002 f99c 	bl	80084b0 <VL53L0X_RdDWord>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006180:	4313      	orrs	r3, r2
 8006182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	0f5b      	lsrs	r3, r3, #29
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006190:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006196:	4413      	add	r3, r2
 8006198:	b2db      	uxtb	r3, r3
 800619a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	0d9b      	lsrs	r3, r3, #22
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	0bdb      	lsrs	r3, r3, #15
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	0a1b      	lsrs	r3, r3, #8
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	019b      	lsls	r3, r3, #6
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80061e6:	2279      	movs	r2, #121	; 0x79
 80061e8:	2194      	movs	r1, #148	; 0x94
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f002 f87c 	bl	80082e8 <VL53L0X_WrByte>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
 80061f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fd76 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800620c:	4313      	orrs	r3, r2
 800620e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006216:	461a      	mov	r2, r3
 8006218:	2190      	movs	r1, #144	; 0x90
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f002 f948 	bl	80084b0 <VL53L0X_RdDWord>
 8006220:	4603      	mov	r3, r0
 8006222:	461a      	mov	r2, r3
 8006224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006228:	4313      	orrs	r3, r2
 800622a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	0e9b      	lsrs	r3, r3, #26
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006238:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800623a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800623e:	4413      	add	r3, r2
 8006240:	b2db      	uxtb	r3, r3
 8006242:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	0cdb      	lsrs	r3, r3, #19
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624e:	b2db      	uxtb	r3, r3
 8006250:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	0b1b      	lsrs	r3, r3, #12
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800625c:	b2db      	uxtb	r3, r3
 800625e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626a:	b2db      	uxtb	r3, r3
 800626c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	b2db      	uxtb	r3, r3
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006280:	227a      	movs	r2, #122	; 0x7a
 8006282:	2194      	movs	r1, #148	; 0x94
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f002 f82f 	bl	80082e8 <VL53L0X_WrByte>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006292:	4313      	orrs	r3, r2
 8006294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fd29 	bl	8005cf0 <VL53L0X_device_read_strobe>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80062ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062b0:	461a      	mov	r2, r3
 80062b2:	2190      	movs	r1, #144	; 0x90
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f002 f8fb 	bl	80084b0 <VL53L0X_RdDWord>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	0f9b      	lsrs	r3, r3, #30
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80062d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062d8:	4413      	add	r3, r2
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	0ddb      	lsrs	r3, r3, #23
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	0a5b      	lsrs	r3, r3, #9
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	089b      	lsrs	r3, r3, #2
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800631a:	2300      	movs	r3, #0
 800631c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80f1 	beq.w	800650e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800632c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006330:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006334:	2b00      	cmp	r3, #0
 8006336:	f040 80ea 	bne.w	800650e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800633a:	227b      	movs	r2, #123	; 0x7b
 800633c:	2194      	movs	r1, #148	; 0x94
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 ffd2 	bl	80082e8 <VL53L0X_WrByte>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800634c:	4313      	orrs	r3, r2
 800634e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fccc 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8006358:	4603      	mov	r3, r0
 800635a:	461a      	mov	r2, r3
 800635c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006360:	4313      	orrs	r3, r2
 8006362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800636a:	461a      	mov	r2, r3
 800636c:	2190      	movs	r1, #144	; 0x90
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f002 f89e 	bl	80084b0 <VL53L0X_RdDWord>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800637c:	4313      	orrs	r3, r2
 800637e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006382:	227c      	movs	r2, #124	; 0x7c
 8006384:	2194      	movs	r1, #148	; 0x94
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 ffae 	bl	80082e8 <VL53L0X_WrByte>
 800638c:	4603      	mov	r3, r0
 800638e:	461a      	mov	r2, r3
 8006390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006394:	4313      	orrs	r3, r2
 8006396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fca8 	bl	8005cf0 <VL53L0X_device_read_strobe>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80063ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063b2:	461a      	mov	r2, r3
 80063b4:	2190      	movs	r1, #144	; 0x90
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 f87a 	bl	80084b0 <VL53L0X_RdDWord>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80063ca:	2273      	movs	r2, #115	; 0x73
 80063cc:	2194      	movs	r1, #148	; 0x94
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 ff8a 	bl	80082e8 <VL53L0X_WrByte>
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063dc:	4313      	orrs	r3, r2
 80063de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fc84 	bl	8005cf0 <VL53L0X_device_read_strobe>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063fa:	461a      	mov	r2, r3
 80063fc:	2190      	movs	r1, #144	; 0x90
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f002 f856 	bl	80084b0 <VL53L0X_RdDWord>
 8006404:	4603      	mov	r3, r0
 8006406:	461a      	mov	r2, r3
 8006408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800640c:	4313      	orrs	r3, r2
 800640e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006416:	b29b      	uxth	r3, r3
 8006418:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800641a:	2274      	movs	r2, #116	; 0x74
 800641c:	2194      	movs	r1, #148	; 0x94
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 ff62 	bl	80082e8 <VL53L0X_WrByte>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642c:	4313      	orrs	r3, r2
 800642e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fc5c 	bl	8005cf0 <VL53L0X_device_read_strobe>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006440:	4313      	orrs	r3, r2
 8006442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800644a:	461a      	mov	r2, r3
 800644c:	2190      	movs	r1, #144	; 0x90
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f002 f82e 	bl	80084b0 <VL53L0X_RdDWord>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800645c:	4313      	orrs	r3, r2
 800645e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006466:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006468:	4313      	orrs	r3, r2
 800646a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800646c:	2275      	movs	r2, #117	; 0x75
 800646e:	2194      	movs	r1, #148	; 0x94
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 ff39 	bl	80082e8 <VL53L0X_WrByte>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800647e:	4313      	orrs	r3, r2
 8006480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fc33 	bl	8005cf0 <VL53L0X_device_read_strobe>
 800648a:	4603      	mov	r3, r0
 800648c:	461a      	mov	r2, r3
 800648e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006492:	4313      	orrs	r3, r2
 8006494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800649c:	461a      	mov	r2, r3
 800649e:	2190      	movs	r1, #144	; 0x90
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f002 f805 	bl	80084b0 <VL53L0X_RdDWord>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80064bc:	2276      	movs	r2, #118	; 0x76
 80064be:	2194      	movs	r1, #148	; 0x94
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 ff11 	bl	80082e8 <VL53L0X_WrByte>
 80064c6:	4603      	mov	r3, r0
 80064c8:	461a      	mov	r2, r3
 80064ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fc0b 	bl	8005cf0 <VL53L0X_device_read_strobe>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064ec:	461a      	mov	r2, r3
 80064ee:	2190      	movs	r1, #144	; 0x90
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 ffdd 	bl	80084b0 <VL53L0X_RdDWord>
 80064f6:	4603      	mov	r3, r0
 80064f8:	461a      	mov	r2, r3
 80064fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064fe:	4313      	orrs	r3, r2
 8006500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800650a:	4313      	orrs	r3, r2
 800650c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800650e:	2200      	movs	r2, #0
 8006510:	2181      	movs	r1, #129	; 0x81
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fee8 	bl	80082e8 <VL53L0X_WrByte>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006520:	4313      	orrs	r3, r2
 8006522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006526:	2206      	movs	r2, #6
 8006528:	21ff      	movs	r1, #255	; 0xff
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fedc 	bl	80082e8 <VL53L0X_WrByte>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006538:	4313      	orrs	r3, r2
 800653a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800653e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006542:	461a      	mov	r2, r3
 8006544:	2183      	movs	r1, #131	; 0x83
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 ff50 	bl	80083ec <VL53L0X_RdByte>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006554:	4313      	orrs	r3, r2
 8006556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800655a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800655e:	f023 0304 	bic.w	r3, r3, #4
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	2183      	movs	r1, #131	; 0x83
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 febd 	bl	80082e8 <VL53L0X_WrByte>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006576:	4313      	orrs	r3, r2
 8006578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800657c:	2201      	movs	r2, #1
 800657e:	21ff      	movs	r1, #255	; 0xff
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 feb1 	bl	80082e8 <VL53L0X_WrByte>
 8006586:	4603      	mov	r3, r0
 8006588:	461a      	mov	r2, r3
 800658a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800658e:	4313      	orrs	r3, r2
 8006590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006594:	2201      	movs	r2, #1
 8006596:	2100      	movs	r1, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fea5 	bl	80082e8 <VL53L0X_WrByte>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065ac:	2200      	movs	r2, #0
 80065ae:	21ff      	movs	r1, #255	; 0xff
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fe99 	bl	80082e8 <VL53L0X_WrByte>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065be:	4313      	orrs	r3, r2
 80065c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80065c4:	2200      	movs	r2, #0
 80065c6:	2180      	movs	r1, #128	; 0x80
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fe8d 	bl	80082e8 <VL53L0X_WrByte>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80065dc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 808f 	bne.w	8006704 <VL53L0X_get_info_from_device+0x98e>
 80065e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065ea:	2b07      	cmp	r3, #7
 80065ec:	f000 808a 	beq.w	8006704 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d024      	beq.n	8006644 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80065fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065fe:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11e      	bne.n	8006644 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800660c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006616:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800661a:	2300      	movs	r3, #0
 800661c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661e:	e00e      	b.n	800663e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006626:	4413      	add	r3, r2
 8006628:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	4413      	add	r3, r2
 8006630:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006634:	460a      	mov	r2, r1
 8006636:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663a:	3301      	adds	r3, #1
 800663c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	2b05      	cmp	r3, #5
 8006642:	dded      	ble.n	8006620 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d018      	beq.n	8006680 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800664e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006652:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006656:	2b00      	cmp	r3, #0
 8006658:	d112      	bne.n	8006680 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800665a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006664:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	33f3      	adds	r3, #243	; 0xf3
 8006672:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006674:	f107 0310 	add.w	r3, r7, #16
 8006678:	4619      	mov	r1, r3
 800667a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800667c:	f002 fe36 	bl	80092ec <strcpy>

		}

		if (((option & 4) == 4) &&
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d030      	beq.n	80066ec <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800668a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800668e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12a      	bne.n	80066ec <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800669e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80066a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a8:	025b      	lsls	r3, r3, #9
 80066aa:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80066ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d011      	beq.n	80066e4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80066c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80066c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80066d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80066d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80066dc:	425b      	negs	r3, r3
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80066e4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80066ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80066fa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006704:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006708:	4618      	mov	r0, r3
 800670a:	3760      	adds	r7, #96	; 0x60
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800671c:	f240 6277 	movw	r2, #1655	; 0x677
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006728:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800672c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800673e:	68bb      	ldr	r3, [r7, #8]
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800674a:	b480      	push	{r7}
 800674c:	b087      	sub	sp, #28
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d017      	beq.n	8006794 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3b01      	subs	r3, #1
 8006768:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800676a:	e005      	b.n	8006778 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006772:	89fb      	ldrh	r3, [r7, #14]
 8006774:	3301      	adds	r3, #1
 8006776:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f4      	bne.n	800676c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006782:	89fb      	ldrh	r3, [r7, #14]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	b29b      	uxth	r3, r3
 800678c:	b2db      	uxtb	r3, r3
 800678e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006790:	4413      	add	r3, r2
 8006792:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006794:	8afb      	ldrh	r3, [r7, #22]

}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	0a12      	lsrs	r2, r2, #8
 80067b6:	b292      	uxth	r2, r2
 80067b8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80067be:	68fb      	ldr	r3, [r7, #12]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr
	...

080067cc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	4619      	mov	r1, r3
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff94 	bl	8006710 <VL53L0X_calc_macro_period_ps>
 80067e8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <VL53L0X_calc_timeout_mclks+0x50>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006800:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	441a      	add	r2, r3
	timeout_period_mclks =
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006812:	69fb      	ldr	r3, [r7, #28]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	10624dd3 	.word	0x10624dd3

08006820 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
 800682c:	4613      	mov	r3, r2
 800682e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006834:	787b      	ldrb	r3, [r7, #1]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff ff69 	bl	8006710 <VL53L0X_calc_macro_period_ps>
 800683e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <VL53L0X_calc_timeout_us+0x50>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	099b      	lsrs	r3, r3, #6
 800684e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006850:	887b      	ldrh	r3, [r7, #2]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	fb02 f303 	mul.w	r3, r2, r3
 8006858:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800685c:	4a04      	ldr	r2, [pc, #16]	; (8006870 <VL53L0X_calc_timeout_us+0x50>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	099b      	lsrs	r3, r3, #6
 8006864:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006866:	697b      	ldr	r3, [r7, #20]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	10624dd3 	.word	0x10624dd3

08006874 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08c      	sub	sp, #48	; 0x30
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	460b      	mov	r3, r1
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <get_sequence_step_timeout+0x38>
 80068a0:	7afb      	ldrb	r3, [r7, #11]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d002      	beq.n	80068ac <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80068a6:	7afb      	ldrb	r3, [r7, #11]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d128      	bne.n	80068fe <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80068b0:	461a      	mov	r2, r3
 80068b2:	2100      	movs	r1, #0
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7fd fa86 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80068c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80068c8:	f107 0320 	add.w	r3, r7, #32
 80068cc:	461a      	mov	r2, r3
 80068ce:	2146      	movs	r1, #70	; 0x46
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f001 fd8b 	bl	80083ec <VL53L0X_RdByte>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80068dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ff5c 	bl	80067a0 <VL53L0X_decode_timeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80068ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80068f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ff93 	bl	8006820 <VL53L0X_calc_timeout_us>
 80068fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80068fc:	e092      	b.n	8006a24 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d135      	bne.n	8006970 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006904:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006908:	461a      	mov	r2, r3
 800690a:	2100      	movs	r1, #0
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7fd fa5a 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006918:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 8081 	bne.w	8006a24 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006922:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006926:	461a      	mov	r2, r3
 8006928:	2100      	movs	r1, #0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7fd fa4b 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006936:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800693e:	f107 031e 	add.w	r3, r7, #30
 8006942:	461a      	mov	r2, r3
 8006944:	2151      	movs	r1, #81	; 0x51
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 fd7a 	bl	8008440 <VL53L0X_RdWord>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff ff23 	bl	80067a0 <VL53L0X_decode_timeout>
 800695a:	4603      	mov	r3, r0
 800695c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800695e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006964:	4619      	mov	r1, r3
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff ff5a 	bl	8006820 <VL53L0X_calc_timeout_us>
 800696c:	62b8      	str	r0, [r7, #40]	; 0x28
 800696e:	e059      	b.n	8006a24 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d156      	bne.n	8006a24 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006976:	f107 0314 	add.w	r3, r7, #20
 800697a:	4619      	mov	r1, r3
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7fd fb2d 	bl	8003fdc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01d      	beq.n	80069c8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800698c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006990:	461a      	mov	r2, r3
 8006992:	2100      	movs	r1, #0
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7fd fa16 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80069a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10f      	bne.n	80069c8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80069a8:	f107 031e 	add.w	r3, r7, #30
 80069ac:	461a      	mov	r2, r3
 80069ae:	2151      	movs	r1, #81	; 0x51
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f001 fd45 	bl	8008440 <VL53L0X_RdWord>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80069bc:	8bfb      	ldrh	r3, [r7, #30]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff feee 	bl	80067a0 <VL53L0X_decode_timeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80069c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069d0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80069d4:	461a      	mov	r2, r3
 80069d6:	2101      	movs	r1, #1
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7fd f9f4 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80069e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10f      	bne.n	8006a0c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80069ec:	f107 031c 	add.w	r3, r7, #28
 80069f0:	461a      	mov	r2, r3
 80069f2:	2171      	movs	r1, #113	; 0x71
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f001 fd23 	bl	8008440 <VL53L0X_RdWord>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006a00:	8bbb      	ldrh	r3, [r7, #28]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fecc 	bl	80067a0 <VL53L0X_decode_timeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006a0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006a14:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff feff 	bl	8006820 <VL53L0X_calc_timeout_us>
 8006a22:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a28:	601a      	str	r2, [r3, #0]

	return Status;
 8006a2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3730      	adds	r7, #48	; 0x30
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b08a      	sub	sp, #40	; 0x28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <set_sequence_step_timeout+0x26>
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d138      	bne.n	8006ace <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a5c:	f107 031b 	add.w	r3, r7, #27
 8006a60:	461a      	mov	r2, r3
 8006a62:	2100      	movs	r1, #0
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7fd f9ae 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11a      	bne.n	8006aae <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006a78:	7efb      	ldrb	r3, [r7, #27]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fea4 	bl	80067cc <VL53L0X_calc_timeout_mclks>
 8006a84:	4603      	mov	r3, r0
 8006a86:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006a88:	8bbb      	ldrh	r3, [r7, #28]
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8e:	d903      	bls.n	8006a98 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006a90:	23ff      	movs	r3, #255	; 0xff
 8006a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a96:	e004      	b.n	8006aa2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006a98:	8bbb      	ldrh	r3, [r7, #28]
 8006a9a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80ab 	bne.w	8006c0e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006abc:	461a      	mov	r2, r3
 8006abe:	2146      	movs	r1, #70	; 0x46
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f001 fc11 	bl	80082e8 <VL53L0X_WrByte>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006acc:	e09f      	b.n	8006c0e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d135      	bne.n	8006b40 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11b      	bne.n	8006b14 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006adc:	f107 031b 	add.w	r3, r7, #27
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7fd f96e 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006af0:	7efb      	ldrb	r3, [r7, #27]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fe68 	bl	80067cc <VL53L0X_calc_timeout_mclks>
 8006afc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006afe:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fe21 	bl	800674a <VL53L0X_encode_timeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b0c:	8b3a      	ldrh	r2, [r7, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006b1c:	8b3b      	ldrh	r3, [r7, #24]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	2151      	movs	r1, #81	; 0x51
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f001 fc04 	bl	8008330 <VL53L0X_WrWord>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d16b      	bne.n	8006c0e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006b3e:	e066      	b.n	8006c0e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006b40:	7afb      	ldrb	r3, [r7, #11]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d160      	bne.n	8006c08 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006b46:	f107 0310 	add.w	r3, r7, #16
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7fd fa45 	bl	8003fdc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006b56:	7cfb      	ldrb	r3, [r7, #19]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01d      	beq.n	8006b98 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b5c:	f107 031b 	add.w	r3, r7, #27
 8006b60:	461a      	mov	r2, r3
 8006b62:	2100      	movs	r1, #0
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7fd f92e 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006b70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10f      	bne.n	8006b98 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006b78:	f107 0318 	add.w	r3, r7, #24
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2151      	movs	r1, #81	; 0x51
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 fc5d 	bl	8008440 <VL53L0X_RdWord>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006b8c:	8b3b      	ldrh	r3, [r7, #24]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fe06 	bl	80067a0 <VL53L0X_decode_timeout>
 8006b94:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006b96:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ba0:	f107 031b 	add.w	r3, r7, #27
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7fd f90c 	bl	8003dc6 <VL53L0X_GetVcselPulsePeriod>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d128      	bne.n	8006c0e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006bbc:	7efb      	ldrb	r3, [r7, #27]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff fe02 	bl	80067cc <VL53L0X_calc_timeout_mclks>
 8006bc8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	4413      	add	r3, r2
 8006bd0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006bd2:	6a38      	ldr	r0, [r7, #32]
 8006bd4:	f7ff fdb9 	bl	800674a <VL53L0X_encode_timeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006be4:	8bfb      	ldrh	r3, [r7, #30]
 8006be6:	461a      	mov	r2, r3
 8006be8:	2171      	movs	r1, #113	; 0x71
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f001 fba0 	bl	8008330 <VL53L0X_WrWord>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006bf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d107      	bne.n	8006c0e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006c06:	e002      	b.n	8006c0e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c08:	23fc      	movs	r3, #252	; 0xfc
 8006c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006c0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3728      	adds	r7, #40	; 0x28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b08a      	sub	sp, #40	; 0x28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
 8006c26:	4613      	mov	r3, r2
 8006c28:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006c30:	230c      	movs	r3, #12
 8006c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006c36:	2312      	movs	r3, #18
 8006c38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006c42:	230e      	movs	r3, #14
 8006c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006c4c:	78bb      	ldrb	r3, [r7, #2]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c58:	23fc      	movs	r3, #252	; 0xfc
 8006c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c5e:	e020      	b.n	8006ca2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10d      	bne.n	8006c82 <VL53L0X_set_vcsel_pulse_period+0x68>
 8006c66:	78ba      	ldrb	r2, [r7, #2]
 8006c68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d304      	bcc.n	8006c7a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006c70:	78ba      	ldrb	r2, [r7, #2]
 8006c72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c7a:	23fc      	movs	r3, #252	; 0xfc
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c80:	e00f      	b.n	8006ca2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10c      	bne.n	8006ca2 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006c88:	78ba      	ldrb	r2, [r7, #2]
 8006c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d304      	bcc.n	8006c9c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006c92:	78ba      	ldrb	r2, [r7, #2]
 8006c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d902      	bls.n	8006ca2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c9c:	23fc      	movs	r3, #252	; 0xfc
 8006c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006ca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006caa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cae:	e239      	b.n	8007124 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d150      	bne.n	8006d58 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006cb6:	78bb      	ldrb	r3, [r7, #2]
 8006cb8:	2b0c      	cmp	r3, #12
 8006cba:	d110      	bne.n	8006cde <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006cbc:	2218      	movs	r2, #24
 8006cbe:	2157      	movs	r1, #87	; 0x57
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fb11 	bl	80082e8 <VL53L0X_WrByte>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006ccc:	2208      	movs	r2, #8
 8006cce:	2156      	movs	r1, #86	; 0x56
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fb09 	bl	80082e8 <VL53L0X_WrByte>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cdc:	e17f      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006cde:	78bb      	ldrb	r3, [r7, #2]
 8006ce0:	2b0e      	cmp	r3, #14
 8006ce2:	d110      	bne.n	8006d06 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006ce4:	2230      	movs	r2, #48	; 0x30
 8006ce6:	2157      	movs	r1, #87	; 0x57
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fafd 	bl	80082e8 <VL53L0X_WrByte>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	2156      	movs	r1, #86	; 0x56
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 faf5 	bl	80082e8 <VL53L0X_WrByte>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d04:	e16b      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006d06:	78bb      	ldrb	r3, [r7, #2]
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d110      	bne.n	8006d2e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	2157      	movs	r1, #87	; 0x57
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fae9 	bl	80082e8 <VL53L0X_WrByte>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	2156      	movs	r1, #86	; 0x56
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fae1 	bl	80082e8 <VL53L0X_WrByte>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d2c:	e157      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006d2e:	78bb      	ldrb	r3, [r7, #2]
 8006d30:	2b12      	cmp	r3, #18
 8006d32:	f040 8154 	bne.w	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006d36:	2250      	movs	r2, #80	; 0x50
 8006d38:	2157      	movs	r1, #87	; 0x57
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fad4 	bl	80082e8 <VL53L0X_WrByte>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006d46:	2208      	movs	r2, #8
 8006d48:	2156      	movs	r1, #86	; 0x56
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 facc 	bl	80082e8 <VL53L0X_WrByte>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d56:	e142      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	f040 813f 	bne.w	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006d60:	78bb      	ldrb	r3, [r7, #2]
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d14c      	bne.n	8006e00 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006d66:	2210      	movs	r2, #16
 8006d68:	2148      	movs	r1, #72	; 0x48
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fabc 	bl	80082e8 <VL53L0X_WrByte>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006d76:	2208      	movs	r2, #8
 8006d78:	2147      	movs	r1, #71	; 0x47
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fab4 	bl	80082e8 <VL53L0X_WrByte>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006d86:	2202      	movs	r2, #2
 8006d88:	2132      	movs	r1, #50	; 0x32
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 faac 	bl	80082e8 <VL53L0X_WrByte>
 8006d90:	4603      	mov	r3, r0
 8006d92:	461a      	mov	r2, r3
 8006d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006d9e:	220c      	movs	r2, #12
 8006da0:	2130      	movs	r1, #48	; 0x30
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 faa0 	bl	80082e8 <VL53L0X_WrByte>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006db6:	2201      	movs	r2, #1
 8006db8:	21ff      	movs	r1, #255	; 0xff
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fa94 	bl	80082e8 <VL53L0X_WrByte>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006dce:	2230      	movs	r2, #48	; 0x30
 8006dd0:	2130      	movs	r1, #48	; 0x30
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fa88 	bl	80082e8 <VL53L0X_WrByte>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006de6:	2200      	movs	r2, #0
 8006de8:	21ff      	movs	r1, #255	; 0xff
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fa7c 	bl	80082e8 <VL53L0X_WrByte>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dfe:	e0ee      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006e00:	78bb      	ldrb	r3, [r7, #2]
 8006e02:	2b0a      	cmp	r3, #10
 8006e04:	d14c      	bne.n	8006ea0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006e06:	2228      	movs	r2, #40	; 0x28
 8006e08:	2148      	movs	r1, #72	; 0x48
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fa6c 	bl	80082e8 <VL53L0X_WrByte>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006e16:	2208      	movs	r2, #8
 8006e18:	2147      	movs	r1, #71	; 0x47
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fa64 	bl	80082e8 <VL53L0X_WrByte>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006e26:	2203      	movs	r2, #3
 8006e28:	2132      	movs	r1, #50	; 0x32
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fa5c 	bl	80082e8 <VL53L0X_WrByte>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006e3e:	2209      	movs	r2, #9
 8006e40:	2130      	movs	r1, #48	; 0x30
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fa50 	bl	80082e8 <VL53L0X_WrByte>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e56:	2201      	movs	r2, #1
 8006e58:	21ff      	movs	r1, #255	; 0xff
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fa44 	bl	80082e8 <VL53L0X_WrByte>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006e6e:	2220      	movs	r2, #32
 8006e70:	2130      	movs	r1, #48	; 0x30
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fa38 	bl	80082e8 <VL53L0X_WrByte>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e86:	2200      	movs	r2, #0
 8006e88:	21ff      	movs	r1, #255	; 0xff
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fa2c 	bl	80082e8 <VL53L0X_WrByte>
 8006e90:	4603      	mov	r3, r0
 8006e92:	461a      	mov	r2, r3
 8006e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e9e:	e09e      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006ea0:	78bb      	ldrb	r3, [r7, #2]
 8006ea2:	2b0c      	cmp	r3, #12
 8006ea4:	d14c      	bne.n	8006f40 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006ea6:	2238      	movs	r2, #56	; 0x38
 8006ea8:	2148      	movs	r1, #72	; 0x48
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fa1c 	bl	80082e8 <VL53L0X_WrByte>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	2147      	movs	r1, #71	; 0x47
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fa14 	bl	80082e8 <VL53L0X_WrByte>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	2132      	movs	r1, #50	; 0x32
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fa0c 	bl	80082e8 <VL53L0X_WrByte>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006ede:	2208      	movs	r2, #8
 8006ee0:	2130      	movs	r1, #48	; 0x30
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fa00 	bl	80082e8 <VL53L0X_WrByte>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	21ff      	movs	r1, #255	; 0xff
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f9f4 	bl	80082e8 <VL53L0X_WrByte>
 8006f00:	4603      	mov	r3, r0
 8006f02:	461a      	mov	r2, r3
 8006f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006f0e:	2220      	movs	r2, #32
 8006f10:	2130      	movs	r1, #48	; 0x30
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f9e8 	bl	80082e8 <VL53L0X_WrByte>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006f26:	2200      	movs	r2, #0
 8006f28:	21ff      	movs	r1, #255	; 0xff
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f9dc 	bl	80082e8 <VL53L0X_WrByte>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f3e:	e04e      	b.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006f40:	78bb      	ldrb	r3, [r7, #2]
 8006f42:	2b0e      	cmp	r3, #14
 8006f44:	d14b      	bne.n	8006fde <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006f46:	2248      	movs	r2, #72	; 0x48
 8006f48:	2148      	movs	r1, #72	; 0x48
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 f9cc 	bl	80082e8 <VL53L0X_WrByte>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006f56:	2208      	movs	r2, #8
 8006f58:	2147      	movs	r1, #71	; 0x47
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 f9c4 	bl	80082e8 <VL53L0X_WrByte>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006f66:	2203      	movs	r2, #3
 8006f68:	2132      	movs	r1, #50	; 0x32
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f9bc 	bl	80082e8 <VL53L0X_WrByte>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006f7e:	2207      	movs	r2, #7
 8006f80:	2130      	movs	r1, #48	; 0x30
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 f9b0 	bl	80082e8 <VL53L0X_WrByte>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f96:	2201      	movs	r2, #1
 8006f98:	21ff      	movs	r1, #255	; 0xff
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f9a4 	bl	80082e8 <VL53L0X_WrByte>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006fae:	2220      	movs	r2, #32
 8006fb0:	2130      	movs	r1, #48	; 0x30
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 f998 	bl	80082e8 <VL53L0X_WrByte>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	21ff      	movs	r1, #255	; 0xff
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 f98c 	bl	80082e8 <VL53L0X_WrByte>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006fde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d17f      	bne.n	80070e6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006fe6:	78bb      	ldrb	r3, [r7, #2]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fe3c 	bl	8005c66 <VL53L0X_encode_vcsel_period>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d045      	beq.n	800708a <VL53L0X_set_vcsel_pulse_period+0x470>
 8006ffe:	e06e      	b.n	80070de <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	461a      	mov	r2, r3
 8007006:	2103      	movs	r1, #3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fc33 	bl	8006874 <get_sequence_step_timeout>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800701c:	f107 0310 	add.w	r3, r7, #16
 8007020:	461a      	mov	r2, r3
 8007022:	2102      	movs	r1, #2
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fc25 	bl	8006874 <get_sequence_step_timeout>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800703c:	461a      	mov	r2, r3
 800703e:	2150      	movs	r1, #80	; 0x50
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f951 	bl	80082e8 <VL53L0X_WrByte>
 8007046:	4603      	mov	r3, r0
 8007048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800704c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	461a      	mov	r2, r3
 8007058:	2103      	movs	r1, #3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fceb 	bl	8006a36 <set_sequence_step_timeout>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007066:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800706a:	2b00      	cmp	r3, #0
 800706c:	d108      	bne.n	8007080 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	461a      	mov	r2, r3
 8007072:	2102      	movs	r1, #2
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fcde 	bl	8006a36 <set_sequence_step_timeout>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	78ba      	ldrb	r2, [r7, #2]
 8007084:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007088:	e02e      	b.n	80070e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800708a:	f107 0318 	add.w	r3, r7, #24
 800708e:	461a      	mov	r2, r3
 8007090:	2104      	movs	r1, #4
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fbee 	bl	8006874 <get_sequence_step_timeout>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800709e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80070a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80070aa:	461a      	mov	r2, r3
 80070ac:	2170      	movs	r1, #112	; 0x70
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 f91a 	bl	80082e8 <VL53L0X_WrByte>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80070ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d108      	bne.n	80070d4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	461a      	mov	r2, r3
 80070c6:	2104      	movs	r1, #4
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fcb4 	bl	8006a36 <set_sequence_step_timeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	78ba      	ldrb	r2, [r7, #2]
 80070d8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80070dc:	e004      	b.n	80070e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070de:	23fc      	movs	r3, #252	; 0xfc
 80070e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070e4:	e000      	b.n	80070e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80070e6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80070e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d109      	bne.n	8007104 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80070f6:	69f9      	ldr	r1, [r7, #28]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7fc fe26 	bl	8003d4a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800710c:	f107 010f 	add.w	r1, r7, #15
 8007110:	2301      	movs	r3, #1
 8007112:	2200      	movs	r2, #0
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fe fcc2 	bl	8005a9e <VL53L0X_perform_phase_calibration>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007124:	4618      	mov	r0, r3
 8007126:	3728      	adds	r7, #40	; 0x28
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007144:	2b01      	cmp	r3, #1
 8007146:	d00a      	beq.n	800715e <VL53L0X_get_vcsel_pulse_period+0x32>
 8007148:	e013      	b.n	8007172 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800714a:	f107 0316 	add.w	r3, r7, #22
 800714e:	461a      	mov	r2, r3
 8007150:	2150      	movs	r1, #80	; 0x50
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 f94a 	bl	80083ec <VL53L0X_RdByte>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800715c:	e00b      	b.n	8007176 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800715e:	f107 0316 	add.w	r3, r7, #22
 8007162:	461a      	mov	r2, r3
 8007164:	2170      	movs	r1, #112	; 0x70
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f001 f940 	bl	80083ec <VL53L0X_RdByte>
 800716c:	4603      	mov	r3, r0
 800716e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007170:	e001      	b.n	8007176 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007172:	23fc      	movs	r3, #252	; 0xfc
 8007174:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007176:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800717e:	7dbb      	ldrb	r3, [r7, #22]
 8007180:	4618      	mov	r0, r3
 8007182:	f7fe fd5e 	bl	8005c42 <VL53L0X_decode_vcsel_period>
 8007186:	4603      	mov	r3, r0
 8007188:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	701a      	strb	r2, [r3, #0]

	return Status;
 800718e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b092      	sub	sp, #72	; 0x48
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80071aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80071ae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80071b0:	f240 7376 	movw	r3, #1910	; 0x776
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80071b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80071ba:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80071bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80071c2:	f240 234e 	movw	r3, #590	; 0x24e
 80071c6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80071c8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80071ce:	f44f 7325 	mov.w	r3, #660	; 0x294
 80071d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80071d4:	f240 2326 	movw	r3, #550	; 0x226
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80071de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80071e2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d205      	bcs.n	80071fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071f0:	23fc      	movs	r3, #252	; 0xfc
 80071f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80071f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80071fa:	e0aa      	b.n	8007352 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80071fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fc fee4 	bl	8003fdc <VL53L0X_GetSequenceStepEnables>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800721a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800721e:	2b00      	cmp	r3, #0
 8007220:	d15b      	bne.n	80072da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007222:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007228:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800722e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007230:	2b00      	cmp	r3, #0
 8007232:	d052      	beq.n	80072da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007234:	f107 0310 	add.w	r3, r7, #16
 8007238:	461a      	mov	r2, r3
 800723a:	2102      	movs	r1, #2
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fb19 	bl	8006874 <get_sequence_step_timeout>
 8007242:	4603      	mov	r3, r0
 8007244:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007248:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007250:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007254:	e07d      	b.n	8007352 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007256:	7d3b      	ldrb	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00f      	beq.n	800727c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800725c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800725e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007260:	4413      	add	r3, r2
 8007262:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007268:	429a      	cmp	r2, r3
 800726a:	d204      	bcs.n	8007276 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800726c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	643b      	str	r3, [r7, #64]	; 0x40
 8007274:	e002      	b.n	800727c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007276:	23fc      	movs	r3, #252	; 0xfc
 8007278:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800727c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007284:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007288:	e063      	b.n	8007352 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800728a:	7dbb      	ldrb	r3, [r7, #22]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d011      	beq.n	80072b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	4413      	add	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729e:	429a      	cmp	r2, r3
 80072a0:	d204      	bcs.n	80072ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80072a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	643b      	str	r3, [r7, #64]	; 0x40
 80072aa:	e016      	b.n	80072da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072ac:	23fc      	movs	r3, #252	; 0xfc
 80072ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80072b2:	e012      	b.n	80072da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80072b4:	7d7b      	ldrb	r3, [r7, #21]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00f      	beq.n	80072da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072be:	4413      	add	r3, r2
 80072c0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d204      	bcs.n	80072d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80072ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
 80072d2:	e002      	b.n	80072da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072d4:	23fc      	movs	r3, #252	; 0xfc
 80072d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80072da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80072e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80072e6:	e034      	b.n	8007352 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d019      	beq.n	8007322 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	461a      	mov	r2, r3
 80072f4:	2103      	movs	r1, #3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fabc 	bl	8006874 <get_sequence_step_timeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007306:	4413      	add	r3, r2
 8007308:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730e:	429a      	cmp	r2, r3
 8007310:	d204      	bcs.n	800731c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	643b      	str	r3, [r7, #64]	; 0x40
 800731a:	e002      	b.n	8007322 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800731c:	23fc      	movs	r3, #252	; 0xfc
 800731e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007322:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007326:	2b00      	cmp	r3, #0
 8007328:	d111      	bne.n	800734e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800732a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00e      	beq.n	800734e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800733a:	2104      	movs	r1, #4
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fb7a 	bl	8006a36 <set_sequence_step_timeout>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800734e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007352:	4618      	mov	r0, r3
 8007354:	3748      	adds	r7, #72	; 0x48
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b090      	sub	sp, #64	; 0x40
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800736a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800736e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007370:	f240 7376 	movw	r3, #1910	; 0x776
 8007374:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007376:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800737c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007380:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007382:	f240 234e 	movw	r3, #590	; 0x24e
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007388:	f240 23b2 	movw	r3, #690	; 0x2b2
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800738e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007394:	f240 2326 	movw	r3, #550	; 0x226
 8007398:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800739e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	441a      	add	r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80073a8:	f107 0318 	add.w	r3, r7, #24
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fc fe14 	bl	8003fdc <VL53L0X_GetSequenceStepEnables>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80073ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80073c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073c6:	e075      	b.n	80074b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80073c8:	7e3b      	ldrb	r3, [r7, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80073ce:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80073d4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d030      	beq.n	800743c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80073da:	f107 0310 	add.w	r3, r7, #16
 80073de:	461a      	mov	r2, r3
 80073e0:	2102      	movs	r1, #2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fa46 	bl	8006874 <get_sequence_step_timeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80073ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d122      	bne.n	800743c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80073f6:	7e3b      	ldrb	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007400:	6939      	ldr	r1, [r7, #16]
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007406:	441a      	add	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800740c:	7ebb      	ldrb	r3, [r7, #26]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007416:	6939      	ldr	r1, [r7, #16]
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	440b      	add	r3, r1
 800741c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800741e:	441a      	add	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e00a      	b.n	800743c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007426:	7e7b      	ldrb	r3, [r7, #25]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007430:	6939      	ldr	r1, [r7, #16]
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007436:	441a      	add	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800743c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007440:	2b00      	cmp	r3, #0
 8007442:	d114      	bne.n	800746e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007444:	7efb      	ldrb	r3, [r7, #27]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d011      	beq.n	800746e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800744a:	f107 030c 	add.w	r3, r7, #12
 800744e:	461a      	mov	r2, r3
 8007450:	2103      	movs	r1, #3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fa0e 	bl	8006874 <get_sequence_step_timeout>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007468:	441a      	add	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800746e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007472:	2b00      	cmp	r3, #0
 8007474:	d114      	bne.n	80074a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007476:	7f3b      	ldrb	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d011      	beq.n	80074a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800747c:	f107 0314 	add.w	r3, r7, #20
 8007480:	461a      	mov	r2, r3
 8007482:	2104      	movs	r1, #4
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff f9f5 	bl	8006874 <get_sequence_step_timeout>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007494:	6979      	ldr	r1, [r7, #20]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800749a:	441a      	add	r2, r3
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3740      	adds	r7, #64	; 0x40
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80074ce:	e0c6      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	74fb      	strb	r3, [r7, #19]
		Index++;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3301      	adds	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	f040 808d 	bne.w	8007602 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	4413      	add	r3, r2
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	747b      	strb	r3, [r7, #17]
			Index++;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3301      	adds	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80074f8:	7c7b      	ldrb	r3, [r7, #17]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d87e      	bhi.n	80075fc <VL53L0X_load_tuning_settings+0x140>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <VL53L0X_load_tuning_settings+0x48>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007515 	.word	0x08007515
 8007508:	0800754f 	.word	0x0800754f
 800750c:	08007589 	.word	0x08007589
 8007510:	080075c3 	.word	0x080075c3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	4413      	add	r3, r2
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	743b      	strb	r3, [r7, #16]
				Index++;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	3301      	adds	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	3301      	adds	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007534:	7c3b      	ldrb	r3, [r7, #16]
 8007536:	b29b      	uxth	r3, r3
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	b29a      	uxth	r2, r3
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	b29b      	uxth	r3, r3
 8007540:	4413      	add	r3, r2
 8007542:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	89ba      	ldrh	r2, [r7, #12]
 8007548:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800754c:	e087      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	4413      	add	r3, r2
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	743b      	strb	r3, [r7, #16]
				Index++;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	4413      	add	r3, r2
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3301      	adds	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800756e:	7c3b      	ldrb	r3, [r7, #16]
 8007570:	b29b      	uxth	r3, r3
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	b29a      	uxth	r2, r3
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	b29b      	uxth	r3, r3
 800757a:	4413      	add	r3, r2
 800757c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	89ba      	ldrh	r2, [r7, #12]
 8007582:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007586:	e06a      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4413      	add	r3, r2
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	743b      	strb	r3, [r7, #16]
				Index++;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	3301      	adds	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4413      	add	r3, r2
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	3301      	adds	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075a8:	7c3b      	ldrb	r3, [r7, #16]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	4413      	add	r3, r2
 80075b6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	89ba      	ldrh	r2, [r7, #12]
 80075bc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80075c0:	e04d      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	4413      	add	r3, r2
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	743b      	strb	r3, [r7, #16]
				Index++;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3301      	adds	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4413      	add	r3, r2
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	3301      	adds	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075e2:	7c3b      	ldrb	r3, [r7, #16]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	89ba      	ldrh	r2, [r7, #12]
 80075f6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80075fa:	e030      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075fc:	23fc      	movs	r3, #252	; 0xfc
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e02d      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007602:	7cfb      	ldrb	r3, [r7, #19]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d828      	bhi.n	800765a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4413      	add	r3, r2
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	3301      	adds	r3, #1
 8007616:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007618:	2300      	movs	r3, #0
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	e00f      	b.n	800763e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	4413      	add	r3, r2
 8007624:	7819      	ldrb	r1, [r3, #0]
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4413      	add	r3, r2
 800762e:	460a      	mov	r2, r1
 8007630:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3301      	adds	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	3301      	adds	r3, #1
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	7cfb      	ldrb	r3, [r7, #19]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	429a      	cmp	r2, r3
 8007644:	dbeb      	blt.n	800761e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007646:	7cfb      	ldrb	r3, [r7, #19]
 8007648:	f107 0208 	add.w	r2, r7, #8
 800764c:	7cb9      	ldrb	r1, [r7, #18]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fdee 	bl	8008230 <VL53L0X_WriteMulti>
 8007654:	4603      	mov	r3, r0
 8007656:	77fb      	strb	r3, [r7, #31]
 8007658:	e001      	b.n	800765e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800765a:	23fc      	movs	r3, #252	; 0xfc
 800765c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	4413      	add	r3, r2
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <VL53L0X_load_tuning_settings+0x1b8>
 800766a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f43f af2e 	beq.w	80074d0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007674:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800768c:	2300      	movs	r3, #0
 800768e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007696:	f107 0313 	add.w	r3, r7, #19
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7fc fd29 	bl	80040f4 <VL53L0X_GetXTalkCompensationEnable>
 80076a2:	4603      	mov	r3, r0
 80076a4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80076a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d111      	bne.n	80076d2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80076ae:	7cfb      	ldrb	r3, [r7, #19]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	8a9b      	ldrh	r3, [r3, #20]
 80076be:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3380      	adds	r3, #128	; 0x80
 80076cc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80076d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80076f6:	f107 0310 	add.w	r3, r7, #16
 80076fa:	461a      	mov	r2, r3
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff ffbe 	bl	8007680 <VL53L0X_get_total_xtalk_rate>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d105      	bne.n	800771c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	441a      	add	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	601a      	str	r2, [r3, #0]

	return Status;
 800771c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b09a      	sub	sp, #104	; 0x68
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007736:	2312      	movs	r3, #18
 8007738:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800773a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800773e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007740:	2342      	movs	r3, #66	; 0x42
 8007742:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007744:	2306      	movs	r3, #6
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007748:	2307      	movs	r3, #7
 800774a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	3380      	adds	r3, #128	; 0x80
 8007770:	0a1b      	lsrs	r3, r3, #8
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01a      	beq.n	80077be <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	029b      	lsls	r3, r3, #10
 800778c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007794:	4413      	add	r3, r2
 8007796:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007798:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80077a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077a4:	4613      	mov	r3, r2
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	4413      	add	r3, r2
 80077aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80077ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ae:	fb03 f303 	mul.w	r3, r3, r3
 80077b2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80077b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80077ba:	0c1b      	lsrs	r3, r3, #16
 80077bc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80077ce:	0c1b      	lsrs	r3, r3, #16
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	fb03 f303 	mul.w	r3, r3, r3
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80077da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80077e0:	0c1b      	lsrs	r3, r3, #16
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80077e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e6:	085a      	lsrs	r2, r3, #1
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	441a      	add	r2, r3
 80077ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077f8:	fb02 f303 	mul.w	r3, r2, r3
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d302      	bcc.n	800780c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007806:	4b54      	ldr	r3, [pc, #336]	; (8007958 <VL53L0X_calc_dmax+0x230>)
 8007808:	663b      	str	r3, [r7, #96]	; 0x60
 800780a:	e015      	b.n	8007838 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800780c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800780e:	085a      	lsrs	r2, r3, #1
 8007810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007812:	441a      	add	r2, r3
 8007814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007816:	fbb2 f3f3 	udiv	r3, r2, r3
 800781a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800781c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800781e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007828:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800782c:	0c1b      	lsrs	r3, r3, #16
 800782e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007832:	fb03 f303 	mul.w	r3, r3, r3
 8007836:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800783a:	039b      	lsls	r3, r3, #14
 800783c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007840:	4a46      	ldr	r2, [pc, #280]	; (800795c <VL53L0X_calc_dmax+0x234>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	fb03 f303 	mul.w	r3, r3, r3
 8007850:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007854:	fb03 f303 	mul.w	r3, r3, r3
 8007858:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	3308      	adds	r3, #8
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	4613      	mov	r3, r2
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	4413      	add	r3, r2
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800787c:	0b9b      	lsrs	r3, r3, #14
 800787e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007884:	4413      	add	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4413      	add	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	039b      	lsls	r3, r3, #14
 80078a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	085b      	lsrs	r3, r3, #1
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	4413      	add	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
 80078be:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80078c6:	4a25      	ldr	r2, [pc, #148]	; (800795c <VL53L0X_calc_dmax+0x234>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	099b      	lsrs	r3, r3, #6
 80078ce:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80078dc:	4a1f      	ldr	r2, [pc, #124]	; (800795c <VL53L0X_calc_dmax+0x234>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	099b      	lsrs	r3, r3, #6
 80078e4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80078e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e8:	3380      	adds	r3, #128	; 0x80
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	085a      	lsrs	r2, r3, #1
 80078f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fa:	441a      	add	r2, r3
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007902:	65bb      	str	r3, [r7, #88]	; 0x58
 8007904:	e001      	b.n	800790a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800790a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800790c:	f7fe f9bd 	bl	8005c8a <VL53L0X_isqrt>
 8007910:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	085a      	lsrs	r2, r3, #1
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	441a      	add	r2, r3
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007928:	e001      	b.n	800792e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800792e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007930:	f7fe f9ab 	bl	8005c8a <VL53L0X_isqrt>
 8007934:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007940:	429a      	cmp	r2, r3
 8007942:	d902      	bls.n	800794a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007948:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800794a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800794e:	4618      	mov	r0, r3
 8007950:	3768      	adds	r7, #104	; 0x68
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	fff00000 	.word	0xfff00000
 800795c:	10624dd3 	.word	0x10624dd3

08007960 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b0b4      	sub	sp, #208	; 0xd0
 8007964:	af04      	add	r7, sp, #16
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800796e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007976:	f44f 7316 	mov.w	r3, #600	; 0x258
 800797a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800797e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007986:	f241 235c 	movw	r3, #4700	; 0x125c
 800798a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800798e:	4b9e      	ldr	r3, [pc, #632]	; (8007c08 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007994:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007998:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800799a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800799e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80079a8:	4b98      	ldr	r3, [pc, #608]	; (8007c0c <VL53L0X_calc_sigma_estimate+0x2ac>)
 80079aa:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80079ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80079b2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80079b6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80079b8:	f240 6377 	movw	r3, #1655	; 0x677
 80079bc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079d2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80079d6:	0c1b      	lsrs	r3, r3, #16
 80079d8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	461a      	mov	r2, r3
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff fe78 	bl	80076de <VL53L0X_get_total_signal_rate>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	461a      	mov	r2, r3
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fe3f 	bl	8007680 <VL53L0X_get_total_xtalk_rate>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a24:	fb02 f303 	mul.w	r3, r2, r3
 8007a28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007a2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d902      	bls.n	8007a3c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007a3c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d168      	bne.n	8007b16 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007a54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007a58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7fe feb2 	bl	80067cc <VL53L0X_calc_timeout_mclks>
 8007a68:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007a7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007a7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007a82:	461a      	mov	r2, r3
 8007a84:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7fe fe9f 	bl	80067cc <VL53L0X_calc_timeout_mclks>
 8007a8e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007a90:	2303      	movs	r3, #3
 8007a92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007a96:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d102      	bne.n	8007aa4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007aaa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	02db      	lsls	r3, r3, #11
 8007ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007abc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ac0:	4a53      	ldr	r2, [pc, #332]	; (8007c10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ade:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ae2:	4a4b      	ldr	r2, [pc, #300]	; (8007c10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae8:	099b      	lsrs	r3, r3, #6
 8007aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3380      	adds	r3, #128	; 0x80
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007b04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b08:	3380      	adds	r3, #128	; 0x80
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007b16:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007b1e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007b22:	e15e      	b.n	8007de2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8007b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10c      	bne.n	8007b44 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b30:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b38:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e14c      	b.n	8007dde <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007b44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b5a:	041a      	lsls	r2, r3, #16
 8007b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d902      	bls.n	8007b76 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007b76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
 8007b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe f879 	bl	8005c8a <VL53L0X_isqrt>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	891b      	ldrh	r3, [r3, #8]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba6:	fb02 f303 	mul.w	r3, r2, r3
 8007baa:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bae:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bb4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007bb6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007bb8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007bbc:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc2:	099b      	lsrs	r3, r3, #6
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007bce:	4a10      	ldr	r2, [pc, #64]	; (8007c10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	099b      	lsrs	r3, r3, #6
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007bde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfb8      	it	lt
 8007bea:	425b      	neglt	r3, r3
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	7e1b      	ldrb	r3, [r3, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c04:	e033      	b.n	8007c6e <VL53L0X_calc_sigma_estimate+0x30e>
 8007c06:	bf00      	nop
 8007c08:	028f87ae 	.word	0x028f87ae
 8007c0c:	0006999a 	.word	0x0006999a
 8007c10:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c3a:	4413      	add	r3, r2
 8007c3c:	0c1b      	lsrs	r3, r3, #16
 8007c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8007c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c46:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c5c:	fb03 f303 	mul.w	r3, r3, r3
 8007c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c68:	0b9b      	lsrs	r3, r3, #14
 8007c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c80:	0c1b      	lsrs	r3, r3, #16
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	fb03 f303 	mul.w	r3, r3, r3
 8007c8a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8007c8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c90:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c98:	0c1b      	lsrs	r3, r3, #16
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	fb03 f303 	mul.w	r3, r3, r3
 8007ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	4413      	add	r3, r2
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cae:	f7fd ffec 	bl	8005c8a <VL53L0X_isqrt>
 8007cb2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	041b      	lsls	r3, r3, #16
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	3332      	adds	r3, #50	; 0x32
 8007cbe:	4a4b      	ldr	r2, [pc, #300]	; (8007dec <VL53L0X_calc_sigma_estimate+0x48c>)
 8007cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc4:	095a      	lsrs	r2, r3, #5
 8007cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cd4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ce4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007ce8:	3308      	adds	r3, #8
 8007cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cf2:	4a3f      	ldr	r2, [pc, #252]	; (8007df0 <VL53L0X_calc_sigma_estimate+0x490>)
 8007cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf8:	0b5b      	lsrs	r3, r3, #13
 8007cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d902      	bls.n	8007d0e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007d0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007d1c:	4a35      	ldr	r2, [pc, #212]	; (8007df4 <VL53L0X_calc_sigma_estimate+0x494>)
 8007d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d22:	099b      	lsrs	r3, r3, #6
 8007d24:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d2e:	441a      	add	r2, r3
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fd ffa7 	bl	8005c8a <VL53L0X_isqrt>
 8007d3c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d4a:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <VL53L0X_calc_sigma_estimate+0x494>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	099b      	lsrs	r3, r3, #6
 8007d52:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d58:	fb03 f303 	mul.w	r3, r3, r3
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	fb03 f303 	mul.w	r3, r3, r3
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	4413      	add	r3, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fd ff8c 	bl	8005c8a <VL53L0X_isqrt>
 8007d72:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d7a:	fb02 f303 	mul.w	r3, r2, r3
 8007d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <VL53L0X_calc_sigma_estimate+0x43c>
 8007d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <VL53L0X_calc_sigma_estimate+0x43c>
 8007d90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d903      	bls.n	8007da4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007daa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007db6:	6939      	ldr	r1, [r7, #16]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff fca8 	bl	8007728 <VL53L0X_calc_dmax>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007dde:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	37c0      	adds	r7, #192	; 0xc0
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	51eb851f 	.word	0x51eb851f
 8007df0:	d1b71759 	.word	0xd1b71759
 8007df4:	10624dd3 	.word	0x10624dd3

08007df8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b090      	sub	sp, #64	; 0x40
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	461a      	mov	r2, r3
 8007e04:	460b      	mov	r3, r1
 8007e06:	72fb      	strb	r3, [r7, #11]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	10db      	asrs	r3, r3, #3
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007e58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d017      	beq.n	8007e90 <VL53L0X_get_pal_range_status+0x98>
 8007e60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e64:	2b05      	cmp	r3, #5
 8007e66:	d013      	beq.n	8007e90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007e68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e6c:	2b07      	cmp	r3, #7
 8007e6e:	d00f      	beq.n	8007e90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007e70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e74:	2b0c      	cmp	r3, #12
 8007e76:	d00b      	beq.n	8007e90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007e78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e7c:	2b0d      	cmp	r3, #13
 8007e7e:	d007      	beq.n	8007e90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007e80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e84:	2b0e      	cmp	r3, #14
 8007e86:	d003      	beq.n	8007e90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007e88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e8c:	2b0f      	cmp	r3, #15
 8007e8e:	d103      	bne.n	8007e98 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007e96:	e002      	b.n	8007e9e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007e9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007ea6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007eaa:	461a      	mov	r2, r3
 8007eac:	2100      	movs	r1, #0
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7fc f9f4 	bl	800429c <VL53L0X_GetLimitCheckEnable>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d02e      	beq.n	8007f20 <VL53L0X_get_pal_range_status+0x128>
 8007ec2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d12a      	bne.n	8007f20 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007eca:	f107 0310 	add.w	r3, r7, #16
 8007ece:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007ed2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff fd43 	bl	8007960 <VL53L0X_calc_sigma_estimate>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007ee0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eee:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007ef0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d113      	bne.n	8007f20 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007ef8:	f107 0320 	add.w	r3, r7, #32
 8007efc:	461a      	mov	r2, r3
 8007efe:	2100      	movs	r1, #0
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7fc fa4f 	bl	80043a4 <VL53L0X_GetLimitCheckValue>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d006      	beq.n	8007f20 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8007f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f14:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d902      	bls.n	8007f20 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007f20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d109      	bne.n	8007f3c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007f28:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	2102      	movs	r1, #2
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7fc f9b3 	bl	800429c <VL53L0X_GetLimitCheckEnable>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007f3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d044      	beq.n	8007fce <VL53L0X_get_pal_range_status+0x1d6>
 8007f44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d140      	bne.n	8007fce <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007f4c:	f107 031c 	add.w	r3, r7, #28
 8007f50:	461a      	mov	r2, r3
 8007f52:	2102      	movs	r1, #2
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7fc fa25 	bl	80043a4 <VL53L0X_GetLimitCheckValue>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007f60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d107      	bne.n	8007f78 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f68:	2201      	movs	r2, #1
 8007f6a:	21ff      	movs	r1, #255	; 0xff
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f9bb 	bl	80082e8 <VL53L0X_WrByte>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007f78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007f80:	f107 0316 	add.w	r3, r7, #22
 8007f84:	461a      	mov	r2, r3
 8007f86:	21b6      	movs	r1, #182	; 0xb6
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fa59 	bl	8008440 <VL53L0X_RdWord>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007f94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d107      	bne.n	8007fac <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	21ff      	movs	r1, #255	; 0xff
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f9a1 	bl	80082e8 <VL53L0X_WrByte>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	025b      	lsls	r3, r3, #9
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d006      	beq.n	8007fce <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007fc0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d902      	bls.n	8007fce <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007fce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2103      	movs	r1, #3
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f7fc f95c 	bl	800429c <VL53L0X_GetLimitCheckEnable>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007fea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d023      	beq.n	800803a <VL53L0X_get_pal_range_status+0x242>
 8007ff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d11f      	bne.n	800803a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007ffa:	893b      	ldrh	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
 8008004:	e005      	b.n	8008012 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	021a      	lsls	r2, r3, #8
 800800a:	893b      	ldrh	r3, [r7, #8]
 800800c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008012:	f107 0318 	add.w	r3, r7, #24
 8008016:	461a      	mov	r2, r3
 8008018:	2103      	movs	r1, #3
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7fc f9c2 	bl	80043a4 <VL53L0X_GetLimitCheckValue>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800802c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800802e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008030:	429a      	cmp	r2, r3
 8008032:	d202      	bcs.n	800803a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800803a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800803e:	2b00      	cmp	r3, #0
 8008040:	d14a      	bne.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008042:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008046:	2b01      	cmp	r3, #1
 8008048:	d103      	bne.n	8008052 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800804a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804c:	22ff      	movs	r2, #255	; 0xff
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e042      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008052:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008056:	2b01      	cmp	r3, #1
 8008058:	d007      	beq.n	800806a <VL53L0X_get_pal_range_status+0x272>
 800805a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800805e:	2b02      	cmp	r3, #2
 8008060:	d003      	beq.n	800806a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008062:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008066:	2b03      	cmp	r3, #3
 8008068:	d103      	bne.n	8008072 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800806a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806c:	2205      	movs	r2, #5
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	e032      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008072:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008076:	2b06      	cmp	r3, #6
 8008078:	d003      	beq.n	8008082 <VL53L0X_get_pal_range_status+0x28a>
 800807a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800807e:	2b09      	cmp	r3, #9
 8008080:	d103      	bne.n	800808a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008084:	2204      	movs	r2, #4
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	e026      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800808a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800808e:	2b08      	cmp	r3, #8
 8008090:	d007      	beq.n	80080a2 <VL53L0X_get_pal_range_status+0x2aa>
 8008092:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008096:	2b0a      	cmp	r3, #10
 8008098:	d003      	beq.n	80080a2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800809a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d103      	bne.n	80080aa <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80080a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a4:	2203      	movs	r2, #3
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e016      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80080aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d003      	beq.n	80080ba <VL53L0X_get_pal_range_status+0x2c2>
 80080b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d103      	bne.n	80080c2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	2202      	movs	r2, #2
 80080be:	701a      	strb	r2, [r3, #0]
 80080c0:	e00a      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80080c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d103      	bne.n	80080d2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80080ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080cc:	2201      	movs	r2, #1
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e002      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80080d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80080d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d102      	bne.n	80080e6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80080e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e2:	2200      	movs	r2, #0
 80080e4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80080e6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80080ea:	461a      	mov	r2, r3
 80080ec:	2101      	movs	r1, #1
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7fc f8d4 	bl	800429c <VL53L0X_GetLimitCheckEnable>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80080fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d14f      	bne.n	80081a2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <VL53L0X_get_pal_range_status+0x31a>
 800810a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800810e:	2b01      	cmp	r3, #1
 8008110:	d103      	bne.n	800811a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008112:	2301      	movs	r3, #1
 8008114:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008118:	e002      	b.n	8008120 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008126:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800812a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800812e:	2b04      	cmp	r3, #4
 8008130:	d003      	beq.n	800813a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008132:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008140:	e002      	b.n	8008148 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800814e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008152:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <VL53L0X_get_pal_range_status+0x36a>
 800815a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d103      	bne.n	800816a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008168:	e002      	b.n	8008170 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008176:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800817a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <VL53L0X_get_pal_range_status+0x392>
 8008182:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008186:	2b01      	cmp	r3, #1
 8008188:	d103      	bne.n	8008192 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008190:	e002      	b.n	8008198 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800819e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3740      	adds	r7, #64	; 0x40
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b088      	sub	sp, #32
 80081b2:	af02      	add	r7, sp, #8
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	330a      	adds	r3, #10
 80081be:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80081cc:	b299      	uxth	r1, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	4613      	mov	r3, r2
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	f7f9 fcf3 	bl	8001bc4 <HAL_I2C_Master_Transmit>
 80081de:	4603      	mov	r3, r0
 80081e0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80081e2:	693b      	ldr	r3, [r7, #16]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	330a      	adds	r3, #10
 80081fc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	b2db      	uxtb	r3, r3
 8008210:	b299      	uxth	r1, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	b29a      	uxth	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4613      	mov	r3, r2
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	f7f9 fdcf 	bl	8001dc0 <HAL_I2C_Master_Receive>
 8008222:	4603      	mov	r3, r0
 8008224:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008226:	693b      	ldr	r3, [r7, #16]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	460b      	mov	r3, r1
 800823e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008240:	2300      	movs	r3, #0
 8008242:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b3f      	cmp	r3, #63	; 0x3f
 8008248:	d902      	bls.n	8008250 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800824a:	f06f 0303 	mvn.w	r3, #3
 800824e:	e016      	b.n	800827e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008250:	4a0d      	ldr	r2, [pc, #52]	; (8008288 <VL53L0X_WriteMulti+0x58>)
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	480c      	ldr	r0, [pc, #48]	; (800828c <VL53L0X_WriteMulti+0x5c>)
 800825c:	f000 f99e 	bl	800859c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	461a      	mov	r2, r3
 8008266:	4908      	ldr	r1, [pc, #32]	; (8008288 <VL53L0X_WriteMulti+0x58>)
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff ffa0 	bl	80081ae <_I2CWrite>
 800826e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008276:	23ec      	movs	r3, #236	; 0xec
 8008278:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800827a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000750 	.word	0x20000750
 800828c:	20000751 	.word	0x20000751

08008290 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	607a      	str	r2, [r7, #4]
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	460b      	mov	r3, r1
 800829e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80082a4:	f107 030b 	add.w	r3, r7, #11
 80082a8:	2201      	movs	r2, #1
 80082aa:	4619      	mov	r1, r3
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff ff7e 	bl	80081ae <_I2CWrite>
 80082b2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082ba:	23ec      	movs	r3, #236	; 0xec
 80082bc:	75fb      	strb	r3, [r7, #23]
        goto done;
 80082be:	e00c      	b.n	80082da <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff ff91 	bl	80081ec <_I2CRead>
 80082ca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082d2:	23ec      	movs	r3, #236	; 0xec
 80082d4:	75fb      	strb	r3, [r7, #23]
 80082d6:	e000      	b.n	80082da <VL53L0X_ReadMulti+0x4a>
    }
done:
 80082d8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80082da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80082fc:	4a0b      	ldr	r2, [pc, #44]	; (800832c <VL53L0X_WrByte+0x44>)
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008302:	4a0a      	ldr	r2, [pc, #40]	; (800832c <VL53L0X_WrByte+0x44>)
 8008304:	78bb      	ldrb	r3, [r7, #2]
 8008306:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008308:	2202      	movs	r2, #2
 800830a:	4908      	ldr	r1, [pc, #32]	; (800832c <VL53L0X_WrByte+0x44>)
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ff4e 	bl	80081ae <_I2CWrite>
 8008312:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800831a:	23ec      	movs	r3, #236	; 0xec
 800831c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800831e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000750 	.word	0x20000750

08008330 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
 800833c:	4613      	mov	r3, r2
 800833e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008344:	4a0e      	ldr	r2, [pc, #56]	; (8008380 <VL53L0X_WrWord+0x50>)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800834a:	883b      	ldrh	r3, [r7, #0]
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	b29b      	uxth	r3, r3
 8008350:	b2da      	uxtb	r2, r3
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <VL53L0X_WrWord+0x50>)
 8008354:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008356:	883b      	ldrh	r3, [r7, #0]
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b09      	ldr	r3, [pc, #36]	; (8008380 <VL53L0X_WrWord+0x50>)
 800835c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800835e:	2203      	movs	r2, #3
 8008360:	4907      	ldr	r1, [pc, #28]	; (8008380 <VL53L0X_WrWord+0x50>)
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff ff23 	bl	80081ae <_I2CWrite>
 8008368:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008370:	23ec      	movs	r3, #236	; 0xec
 8008372:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20000750 	.word	0x20000750

08008384 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	461a      	mov	r2, r3
 8008392:	4603      	mov	r3, r0
 8008394:	70fb      	strb	r3, [r7, #3]
 8008396:	460b      	mov	r3, r1
 8008398:	70bb      	strb	r3, [r7, #2]
 800839a:	4613      	mov	r3, r2
 800839c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80083a2:	f107 020e 	add.w	r2, r7, #14
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f81e 	bl	80083ec <VL53L0X_RdByte>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80083b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d110      	bne.n	80083de <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80083bc:	7bba      	ldrb	r2, [r7, #14]
 80083be:	78bb      	ldrb	r3, [r7, #2]
 80083c0:	4013      	ands	r3, r2
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	787b      	ldrb	r3, [r7, #1]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80083cc:	7bba      	ldrb	r2, [r7, #14]
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff ff88 	bl	80082e8 <VL53L0X_WrByte>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e000      	b.n	80083e0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80083de:	bf00      	nop
done:
    return Status;
 80083e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	460b      	mov	r3, r1
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80083fe:	f107 030b 	add.w	r3, r7, #11
 8008402:	2201      	movs	r2, #1
 8008404:	4619      	mov	r1, r3
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fed1 	bl	80081ae <_I2CWrite>
 800840c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008414:	23ec      	movs	r3, #236	; 0xec
 8008416:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008418:	e00c      	b.n	8008434 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800841a:	2201      	movs	r2, #1
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fee4 	bl	80081ec <_I2CRead>
 8008424:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800842c:	23ec      	movs	r3, #236	; 0xec
 800842e:	75fb      	strb	r3, [r7, #23]
 8008430:	e000      	b.n	8008434 <VL53L0X_RdByte+0x48>
    }
done:
 8008432:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008452:	f107 030b 	add.w	r3, r7, #11
 8008456:	2201      	movs	r2, #1
 8008458:	4619      	mov	r1, r3
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f7ff fea7 	bl	80081ae <_I2CWrite>
 8008460:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008468:	23ec      	movs	r3, #236	; 0xec
 800846a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800846c:	e017      	b.n	800849e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800846e:	2202      	movs	r2, #2
 8008470:	490e      	ldr	r1, [pc, #56]	; (80084ac <VL53L0X_RdWord+0x6c>)
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff feba 	bl	80081ec <_I2CRead>
 8008478:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008480:	23ec      	movs	r3, #236	; 0xec
 8008482:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008484:	e00b      	b.n	800849e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008486:	4b09      	ldr	r3, [pc, #36]	; (80084ac <VL53L0X_RdWord+0x6c>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	b29a      	uxth	r2, r3
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <VL53L0X_RdWord+0x6c>)
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	b29b      	uxth	r3, r3
 8008496:	4413      	add	r3, r2
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800849e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000750 	.word	0x20000750

080084b0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	460b      	mov	r3, r1
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80084c2:	f107 030b 	add.w	r3, r7, #11
 80084c6:	2201      	movs	r2, #1
 80084c8:	4619      	mov	r1, r3
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fe6f 	bl	80081ae <_I2CWrite>
 80084d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80084d8:	23ec      	movs	r3, #236	; 0xec
 80084da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80084dc:	e01b      	b.n	8008516 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80084de:	2204      	movs	r2, #4
 80084e0:	4910      	ldr	r1, [pc, #64]	; (8008524 <VL53L0X_RdDWord+0x74>)
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7ff fe82 	bl	80081ec <_I2CRead>
 80084e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80084f0:	23ec      	movs	r3, #236	; 0xec
 80084f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80084f4:	e00f      	b.n	8008516 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80084f6:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <VL53L0X_RdDWord+0x74>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	061a      	lsls	r2, r3, #24
 80084fc:	4b09      	ldr	r3, [pc, #36]	; (8008524 <VL53L0X_RdDWord+0x74>)
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	441a      	add	r2, r3
 8008504:	4b07      	ldr	r3, [pc, #28]	; (8008524 <VL53L0X_RdDWord+0x74>)
 8008506:	789b      	ldrb	r3, [r3, #2]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	4413      	add	r3, r2
 800850c:	4a05      	ldr	r2, [pc, #20]	; (8008524 <VL53L0X_RdDWord+0x74>)
 800850e:	78d2      	ldrb	r2, [r2, #3]
 8008510:	441a      	add	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8008516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000750 	.word	0x20000750

08008528 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008534:	2002      	movs	r0, #2
 8008536:	f7f8 ff5d 	bl	80013f4 <HAL_Delay>
    return status;
 800853a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <__errno>:
 8008548:	4b01      	ldr	r3, [pc, #4]	; (8008550 <__errno+0x8>)
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	200002cc 	.word	0x200002cc

08008554 <__libc_init_array>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	2600      	movs	r6, #0
 8008558:	4d0c      	ldr	r5, [pc, #48]	; (800858c <__libc_init_array+0x38>)
 800855a:	4c0d      	ldr	r4, [pc, #52]	; (8008590 <__libc_init_array+0x3c>)
 800855c:	1b64      	subs	r4, r4, r5
 800855e:	10a4      	asrs	r4, r4, #2
 8008560:	42a6      	cmp	r6, r4
 8008562:	d109      	bne.n	8008578 <__libc_init_array+0x24>
 8008564:	f004 fc58 	bl	800ce18 <_init>
 8008568:	2600      	movs	r6, #0
 800856a:	4d0a      	ldr	r5, [pc, #40]	; (8008594 <__libc_init_array+0x40>)
 800856c:	4c0a      	ldr	r4, [pc, #40]	; (8008598 <__libc_init_array+0x44>)
 800856e:	1b64      	subs	r4, r4, r5
 8008570:	10a4      	asrs	r4, r4, #2
 8008572:	42a6      	cmp	r6, r4
 8008574:	d105      	bne.n	8008582 <__libc_init_array+0x2e>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	f855 3b04 	ldr.w	r3, [r5], #4
 800857c:	4798      	blx	r3
 800857e:	3601      	adds	r6, #1
 8008580:	e7ee      	b.n	8008560 <__libc_init_array+0xc>
 8008582:	f855 3b04 	ldr.w	r3, [r5], #4
 8008586:	4798      	blx	r3
 8008588:	3601      	adds	r6, #1
 800858a:	e7f2      	b.n	8008572 <__libc_init_array+0x1e>
 800858c:	0800d31c 	.word	0x0800d31c
 8008590:	0800d31c 	.word	0x0800d31c
 8008594:	0800d31c 	.word	0x0800d31c
 8008598:	0800d320 	.word	0x0800d320

0800859c <memcpy>:
 800859c:	440a      	add	r2, r1
 800859e:	4291      	cmp	r1, r2
 80085a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80085a4:	d100      	bne.n	80085a8 <memcpy+0xc>
 80085a6:	4770      	bx	lr
 80085a8:	b510      	push	{r4, lr}
 80085aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ae:	4291      	cmp	r1, r2
 80085b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085b4:	d1f9      	bne.n	80085aa <memcpy+0xe>
 80085b6:	bd10      	pop	{r4, pc}

080085b8 <memset>:
 80085b8:	4603      	mov	r3, r0
 80085ba:	4402      	add	r2, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <__cvt>:
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ce:	461f      	mov	r7, r3
 80085d0:	bfbb      	ittet	lt
 80085d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80085d6:	461f      	movlt	r7, r3
 80085d8:	2300      	movge	r3, #0
 80085da:	232d      	movlt	r3, #45	; 0x2d
 80085dc:	b088      	sub	sp, #32
 80085de:	4614      	mov	r4, r2
 80085e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80085e4:	7013      	strb	r3, [r2, #0]
 80085e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80085ec:	f023 0820 	bic.w	r8, r3, #32
 80085f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085f4:	d005      	beq.n	8008602 <__cvt+0x3a>
 80085f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085fa:	d100      	bne.n	80085fe <__cvt+0x36>
 80085fc:	3501      	adds	r5, #1
 80085fe:	2302      	movs	r3, #2
 8008600:	e000      	b.n	8008604 <__cvt+0x3c>
 8008602:	2303      	movs	r3, #3
 8008604:	aa07      	add	r2, sp, #28
 8008606:	9204      	str	r2, [sp, #16]
 8008608:	aa06      	add	r2, sp, #24
 800860a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800860e:	e9cd 3500 	strd	r3, r5, [sp]
 8008612:	4622      	mov	r2, r4
 8008614:	463b      	mov	r3, r7
 8008616:	f001 fd8b 	bl	800a130 <_dtoa_r>
 800861a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800861e:	4606      	mov	r6, r0
 8008620:	d102      	bne.n	8008628 <__cvt+0x60>
 8008622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008624:	07db      	lsls	r3, r3, #31
 8008626:	d522      	bpl.n	800866e <__cvt+0xa6>
 8008628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800862c:	eb06 0905 	add.w	r9, r6, r5
 8008630:	d110      	bne.n	8008654 <__cvt+0x8c>
 8008632:	7833      	ldrb	r3, [r6, #0]
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d10a      	bne.n	800864e <__cvt+0x86>
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	4620      	mov	r0, r4
 800863e:	4639      	mov	r1, r7
 8008640:	f7f8 f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8008644:	b918      	cbnz	r0, 800864e <__cvt+0x86>
 8008646:	f1c5 0501 	rsb	r5, r5, #1
 800864a:	f8ca 5000 	str.w	r5, [sl]
 800864e:	f8da 3000 	ldr.w	r3, [sl]
 8008652:	4499      	add	r9, r3
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	4620      	mov	r0, r4
 800865a:	4639      	mov	r1, r7
 800865c:	f7f8 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8008660:	b108      	cbz	r0, 8008666 <__cvt+0x9e>
 8008662:	f8cd 901c 	str.w	r9, [sp, #28]
 8008666:	2230      	movs	r2, #48	; 0x30
 8008668:	9b07      	ldr	r3, [sp, #28]
 800866a:	454b      	cmp	r3, r9
 800866c:	d307      	bcc.n	800867e <__cvt+0xb6>
 800866e:	4630      	mov	r0, r6
 8008670:	9b07      	ldr	r3, [sp, #28]
 8008672:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008674:	1b9b      	subs	r3, r3, r6
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	b008      	add	sp, #32
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	9107      	str	r1, [sp, #28]
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	e7f0      	b.n	8008668 <__cvt+0xa0>

08008686 <__exponent>:
 8008686:	4603      	mov	r3, r0
 8008688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800868a:	2900      	cmp	r1, #0
 800868c:	f803 2b02 	strb.w	r2, [r3], #2
 8008690:	bfb6      	itet	lt
 8008692:	222d      	movlt	r2, #45	; 0x2d
 8008694:	222b      	movge	r2, #43	; 0x2b
 8008696:	4249      	neglt	r1, r1
 8008698:	2909      	cmp	r1, #9
 800869a:	7042      	strb	r2, [r0, #1]
 800869c:	dd2b      	ble.n	80086f6 <__exponent+0x70>
 800869e:	f10d 0407 	add.w	r4, sp, #7
 80086a2:	46a4      	mov	ip, r4
 80086a4:	270a      	movs	r7, #10
 80086a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80086aa:	460a      	mov	r2, r1
 80086ac:	46a6      	mov	lr, r4
 80086ae:	fb07 1516 	mls	r5, r7, r6, r1
 80086b2:	2a63      	cmp	r2, #99	; 0x63
 80086b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80086b8:	4631      	mov	r1, r6
 80086ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80086be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086c2:	dcf0      	bgt.n	80086a6 <__exponent+0x20>
 80086c4:	3130      	adds	r1, #48	; 0x30
 80086c6:	f1ae 0502 	sub.w	r5, lr, #2
 80086ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086ce:	4629      	mov	r1, r5
 80086d0:	1c44      	adds	r4, r0, #1
 80086d2:	4561      	cmp	r1, ip
 80086d4:	d30a      	bcc.n	80086ec <__exponent+0x66>
 80086d6:	f10d 0209 	add.w	r2, sp, #9
 80086da:	eba2 020e 	sub.w	r2, r2, lr
 80086de:	4565      	cmp	r5, ip
 80086e0:	bf88      	it	hi
 80086e2:	2200      	movhi	r2, #0
 80086e4:	4413      	add	r3, r2
 80086e6:	1a18      	subs	r0, r3, r0
 80086e8:	b003      	add	sp, #12
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086f4:	e7ed      	b.n	80086d2 <__exponent+0x4c>
 80086f6:	2330      	movs	r3, #48	; 0x30
 80086f8:	3130      	adds	r1, #48	; 0x30
 80086fa:	7083      	strb	r3, [r0, #2]
 80086fc:	70c1      	strb	r1, [r0, #3]
 80086fe:	1d03      	adds	r3, r0, #4
 8008700:	e7f1      	b.n	80086e6 <__exponent+0x60>
	...

08008704 <_printf_float>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	b091      	sub	sp, #68	; 0x44
 800870a:	460c      	mov	r4, r1
 800870c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008710:	4616      	mov	r6, r2
 8008712:	461f      	mov	r7, r3
 8008714:	4605      	mov	r5, r0
 8008716:	f002 fe5f 	bl	800b3d8 <_localeconv_r>
 800871a:	6803      	ldr	r3, [r0, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	9309      	str	r3, [sp, #36]	; 0x24
 8008720:	f7f7 fd16 	bl	8000150 <strlen>
 8008724:	2300      	movs	r3, #0
 8008726:	930e      	str	r3, [sp, #56]	; 0x38
 8008728:	f8d8 3000 	ldr.w	r3, [r8]
 800872c:	900a      	str	r0, [sp, #40]	; 0x28
 800872e:	3307      	adds	r3, #7
 8008730:	f023 0307 	bic.w	r3, r3, #7
 8008734:	f103 0208 	add.w	r2, r3, #8
 8008738:	f894 9018 	ldrb.w	r9, [r4, #24]
 800873c:	f8d4 b000 	ldr.w	fp, [r4]
 8008740:	f8c8 2000 	str.w	r2, [r8]
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800874c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008750:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008754:	930b      	str	r3, [sp, #44]	; 0x2c
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
 800875a:	4640      	mov	r0, r8
 800875c:	4b9c      	ldr	r3, [pc, #624]	; (80089d0 <_printf_float+0x2cc>)
 800875e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008760:	f7f8 f954 	bl	8000a0c <__aeabi_dcmpun>
 8008764:	bb70      	cbnz	r0, 80087c4 <_printf_float+0xc0>
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	4640      	mov	r0, r8
 800876c:	4b98      	ldr	r3, [pc, #608]	; (80089d0 <_printf_float+0x2cc>)
 800876e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008770:	f7f8 f92e 	bl	80009d0 <__aeabi_dcmple>
 8008774:	bb30      	cbnz	r0, 80087c4 <_printf_float+0xc0>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	4640      	mov	r0, r8
 800877c:	4651      	mov	r1, sl
 800877e:	f7f8 f91d 	bl	80009bc <__aeabi_dcmplt>
 8008782:	b110      	cbz	r0, 800878a <_printf_float+0x86>
 8008784:	232d      	movs	r3, #45	; 0x2d
 8008786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800878a:	4b92      	ldr	r3, [pc, #584]	; (80089d4 <_printf_float+0x2d0>)
 800878c:	4892      	ldr	r0, [pc, #584]	; (80089d8 <_printf_float+0x2d4>)
 800878e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008792:	bf94      	ite	ls
 8008794:	4698      	movls	r8, r3
 8008796:	4680      	movhi	r8, r0
 8008798:	2303      	movs	r3, #3
 800879a:	f04f 0a00 	mov.w	sl, #0
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	f02b 0304 	bic.w	r3, fp, #4
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	4633      	mov	r3, r6
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	9700      	str	r7, [sp, #0]
 80087ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80087b0:	f000 f9d4 	bl	8008b5c <_printf_common>
 80087b4:	3001      	adds	r0, #1
 80087b6:	f040 8090 	bne.w	80088da <_printf_float+0x1d6>
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295
 80087be:	b011      	add	sp, #68	; 0x44
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	4642      	mov	r2, r8
 80087c6:	4653      	mov	r3, sl
 80087c8:	4640      	mov	r0, r8
 80087ca:	4651      	mov	r1, sl
 80087cc:	f7f8 f91e 	bl	8000a0c <__aeabi_dcmpun>
 80087d0:	b148      	cbz	r0, 80087e6 <_printf_float+0xe2>
 80087d2:	f1ba 0f00 	cmp.w	sl, #0
 80087d6:	bfb8      	it	lt
 80087d8:	232d      	movlt	r3, #45	; 0x2d
 80087da:	4880      	ldr	r0, [pc, #512]	; (80089dc <_printf_float+0x2d8>)
 80087dc:	bfb8      	it	lt
 80087de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087e2:	4b7f      	ldr	r3, [pc, #508]	; (80089e0 <_printf_float+0x2dc>)
 80087e4:	e7d3      	b.n	800878e <_printf_float+0x8a>
 80087e6:	6863      	ldr	r3, [r4, #4]
 80087e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	d142      	bne.n	8008876 <_printf_float+0x172>
 80087f0:	2306      	movs	r3, #6
 80087f2:	6063      	str	r3, [r4, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	9206      	str	r2, [sp, #24]
 80087f8:	aa0e      	add	r2, sp, #56	; 0x38
 80087fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80087fe:	aa0d      	add	r2, sp, #52	; 0x34
 8008800:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008804:	9203      	str	r2, [sp, #12]
 8008806:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800880a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	6863      	ldr	r3, [r4, #4]
 8008812:	4642      	mov	r2, r8
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4628      	mov	r0, r5
 8008818:	4653      	mov	r3, sl
 800881a:	910b      	str	r1, [sp, #44]	; 0x2c
 800881c:	f7ff fed4 	bl	80085c8 <__cvt>
 8008820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008822:	4680      	mov	r8, r0
 8008824:	2947      	cmp	r1, #71	; 0x47
 8008826:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008828:	d108      	bne.n	800883c <_printf_float+0x138>
 800882a:	1cc8      	adds	r0, r1, #3
 800882c:	db02      	blt.n	8008834 <_printf_float+0x130>
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	4299      	cmp	r1, r3
 8008832:	dd40      	ble.n	80088b6 <_printf_float+0x1b2>
 8008834:	f1a9 0902 	sub.w	r9, r9, #2
 8008838:	fa5f f989 	uxtb.w	r9, r9
 800883c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008840:	d81f      	bhi.n	8008882 <_printf_float+0x17e>
 8008842:	464a      	mov	r2, r9
 8008844:	3901      	subs	r1, #1
 8008846:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800884a:	910d      	str	r1, [sp, #52]	; 0x34
 800884c:	f7ff ff1b 	bl	8008686 <__exponent>
 8008850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008852:	4682      	mov	sl, r0
 8008854:	1813      	adds	r3, r2, r0
 8008856:	2a01      	cmp	r2, #1
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	dc02      	bgt.n	8008862 <_printf_float+0x15e>
 800885c:	6822      	ldr	r2, [r4, #0]
 800885e:	07d2      	lsls	r2, r2, #31
 8008860:	d501      	bpl.n	8008866 <_printf_float+0x162>
 8008862:	3301      	adds	r3, #1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800886a:	2b00      	cmp	r3, #0
 800886c:	d09b      	beq.n	80087a6 <_printf_float+0xa2>
 800886e:	232d      	movs	r3, #45	; 0x2d
 8008870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008874:	e797      	b.n	80087a6 <_printf_float+0xa2>
 8008876:	2947      	cmp	r1, #71	; 0x47
 8008878:	d1bc      	bne.n	80087f4 <_printf_float+0xf0>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1ba      	bne.n	80087f4 <_printf_float+0xf0>
 800887e:	2301      	movs	r3, #1
 8008880:	e7b7      	b.n	80087f2 <_printf_float+0xee>
 8008882:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008886:	d118      	bne.n	80088ba <_printf_float+0x1b6>
 8008888:	2900      	cmp	r1, #0
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	dd0b      	ble.n	80088a6 <_printf_float+0x1a2>
 800888e:	6121      	str	r1, [r4, #16]
 8008890:	b913      	cbnz	r3, 8008898 <_printf_float+0x194>
 8008892:	6822      	ldr	r2, [r4, #0]
 8008894:	07d0      	lsls	r0, r2, #31
 8008896:	d502      	bpl.n	800889e <_printf_float+0x19a>
 8008898:	3301      	adds	r3, #1
 800889a:	440b      	add	r3, r1
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	f04f 0a00 	mov.w	sl, #0
 80088a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80088a4:	e7df      	b.n	8008866 <_printf_float+0x162>
 80088a6:	b913      	cbnz	r3, 80088ae <_printf_float+0x1aa>
 80088a8:	6822      	ldr	r2, [r4, #0]
 80088aa:	07d2      	lsls	r2, r2, #31
 80088ac:	d501      	bpl.n	80088b2 <_printf_float+0x1ae>
 80088ae:	3302      	adds	r3, #2
 80088b0:	e7f4      	b.n	800889c <_printf_float+0x198>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e7f2      	b.n	800889c <_printf_float+0x198>
 80088b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80088ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088bc:	4299      	cmp	r1, r3
 80088be:	db05      	blt.n	80088cc <_printf_float+0x1c8>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	6121      	str	r1, [r4, #16]
 80088c4:	07d8      	lsls	r0, r3, #31
 80088c6:	d5ea      	bpl.n	800889e <_printf_float+0x19a>
 80088c8:	1c4b      	adds	r3, r1, #1
 80088ca:	e7e7      	b.n	800889c <_printf_float+0x198>
 80088cc:	2900      	cmp	r1, #0
 80088ce:	bfcc      	ite	gt
 80088d0:	2201      	movgt	r2, #1
 80088d2:	f1c1 0202 	rsble	r2, r1, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	e7e0      	b.n	800889c <_printf_float+0x198>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	055a      	lsls	r2, r3, #21
 80088de:	d407      	bmi.n	80088f0 <_printf_float+0x1ec>
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	4642      	mov	r2, r8
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	d12b      	bne.n	8008946 <_printf_float+0x242>
 80088ee:	e764      	b.n	80087ba <_printf_float+0xb6>
 80088f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088f4:	f240 80dd 	bls.w	8008ab2 <_printf_float+0x3ae>
 80088f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	f7f8 f852 	bl	80009a8 <__aeabi_dcmpeq>
 8008904:	2800      	cmp	r0, #0
 8008906:	d033      	beq.n	8008970 <_printf_float+0x26c>
 8008908:	2301      	movs	r3, #1
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	4a35      	ldr	r2, [pc, #212]	; (80089e4 <_printf_float+0x2e0>)
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f af51 	beq.w	80087ba <_printf_float+0xb6>
 8008918:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800891c:	429a      	cmp	r2, r3
 800891e:	db02      	blt.n	8008926 <_printf_float+0x222>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	07d8      	lsls	r0, r3, #31
 8008924:	d50f      	bpl.n	8008946 <_printf_float+0x242>
 8008926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	47b8      	blx	r7
 8008930:	3001      	adds	r0, #1
 8008932:	f43f af42 	beq.w	80087ba <_printf_float+0xb6>
 8008936:	f04f 0800 	mov.w	r8, #0
 800893a:	f104 091a 	add.w	r9, r4, #26
 800893e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008940:	3b01      	subs	r3, #1
 8008942:	4543      	cmp	r3, r8
 8008944:	dc09      	bgt.n	800895a <_printf_float+0x256>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	079b      	lsls	r3, r3, #30
 800894a:	f100 8102 	bmi.w	8008b52 <_printf_float+0x44e>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008952:	4298      	cmp	r0, r3
 8008954:	bfb8      	it	lt
 8008956:	4618      	movlt	r0, r3
 8008958:	e731      	b.n	80087be <_printf_float+0xba>
 800895a:	2301      	movs	r3, #1
 800895c:	464a      	mov	r2, r9
 800895e:	4631      	mov	r1, r6
 8008960:	4628      	mov	r0, r5
 8008962:	47b8      	blx	r7
 8008964:	3001      	adds	r0, #1
 8008966:	f43f af28 	beq.w	80087ba <_printf_float+0xb6>
 800896a:	f108 0801 	add.w	r8, r8, #1
 800896e:	e7e6      	b.n	800893e <_printf_float+0x23a>
 8008970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008972:	2b00      	cmp	r3, #0
 8008974:	dc38      	bgt.n	80089e8 <_printf_float+0x2e4>
 8008976:	2301      	movs	r3, #1
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	4a19      	ldr	r2, [pc, #100]	; (80089e4 <_printf_float+0x2e0>)
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f af1a 	beq.w	80087ba <_printf_float+0xb6>
 8008986:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800898a:	4313      	orrs	r3, r2
 800898c:	d102      	bne.n	8008994 <_printf_float+0x290>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	07d9      	lsls	r1, r3, #31
 8008992:	d5d8      	bpl.n	8008946 <_printf_float+0x242>
 8008994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af0b 	beq.w	80087ba <_printf_float+0xb6>
 80089a4:	f04f 0900 	mov.w	r9, #0
 80089a8:	f104 0a1a 	add.w	sl, r4, #26
 80089ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ae:	425b      	negs	r3, r3
 80089b0:	454b      	cmp	r3, r9
 80089b2:	dc01      	bgt.n	80089b8 <_printf_float+0x2b4>
 80089b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b6:	e794      	b.n	80088e2 <_printf_float+0x1de>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4652      	mov	r2, sl
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f aef9 	beq.w	80087ba <_printf_float+0xb6>
 80089c8:	f109 0901 	add.w	r9, r9, #1
 80089cc:	e7ee      	b.n	80089ac <_printf_float+0x2a8>
 80089ce:	bf00      	nop
 80089d0:	7fefffff 	.word	0x7fefffff
 80089d4:	0800ce7c 	.word	0x0800ce7c
 80089d8:	0800ce80 	.word	0x0800ce80
 80089dc:	0800ce88 	.word	0x0800ce88
 80089e0:	0800ce84 	.word	0x0800ce84
 80089e4:	0800ce8c 	.word	0x0800ce8c
 80089e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ec:	429a      	cmp	r2, r3
 80089ee:	bfa8      	it	ge
 80089f0:	461a      	movge	r2, r3
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	4691      	mov	r9, r2
 80089f6:	dc37      	bgt.n	8008a68 <_printf_float+0x364>
 80089f8:	f04f 0b00 	mov.w	fp, #0
 80089fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a00:	f104 021a 	add.w	r2, r4, #26
 8008a04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008a08:	ebaa 0309 	sub.w	r3, sl, r9
 8008a0c:	455b      	cmp	r3, fp
 8008a0e:	dc33      	bgt.n	8008a78 <_printf_float+0x374>
 8008a10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a14:	429a      	cmp	r2, r3
 8008a16:	db3b      	blt.n	8008a90 <_printf_float+0x38c>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d438      	bmi.n	8008a90 <_printf_float+0x38c>
 8008a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a22:	eba3 020a 	sub.w	r2, r3, sl
 8008a26:	eba3 0901 	sub.w	r9, r3, r1
 8008a2a:	4591      	cmp	r9, r2
 8008a2c:	bfa8      	it	ge
 8008a2e:	4691      	movge	r9, r2
 8008a30:	f1b9 0f00 	cmp.w	r9, #0
 8008a34:	dc34      	bgt.n	8008aa0 <_printf_float+0x39c>
 8008a36:	f04f 0800 	mov.w	r8, #0
 8008a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a3e:	f104 0a1a 	add.w	sl, r4, #26
 8008a42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	eba3 0309 	sub.w	r3, r3, r9
 8008a4c:	4543      	cmp	r3, r8
 8008a4e:	f77f af7a 	ble.w	8008946 <_printf_float+0x242>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4652      	mov	r2, sl
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f aeac 	beq.w	80087ba <_printf_float+0xb6>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	e7ec      	b.n	8008a42 <_printf_float+0x33e>
 8008a68:	4613      	mov	r3, r2
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	d1c0      	bne.n	80089f8 <_printf_float+0x2f4>
 8008a76:	e6a0      	b.n	80087ba <_printf_float+0xb6>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f ae99 	beq.w	80087ba <_printf_float+0xb6>
 8008a88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a8a:	f10b 0b01 	add.w	fp, fp, #1
 8008a8e:	e7b9      	b.n	8008a04 <_printf_float+0x300>
 8008a90:	4631      	mov	r1, r6
 8008a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a96:	4628      	mov	r0, r5
 8008a98:	47b8      	blx	r7
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	d1bf      	bne.n	8008a1e <_printf_float+0x31a>
 8008a9e:	e68c      	b.n	80087ba <_printf_float+0xb6>
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	eb08 020a 	add.w	r2, r8, sl
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	d1c2      	bne.n	8008a36 <_printf_float+0x332>
 8008ab0:	e683      	b.n	80087ba <_printf_float+0xb6>
 8008ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab4:	2a01      	cmp	r2, #1
 8008ab6:	dc01      	bgt.n	8008abc <_printf_float+0x3b8>
 8008ab8:	07db      	lsls	r3, r3, #31
 8008aba:	d537      	bpl.n	8008b2c <_printf_float+0x428>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4642      	mov	r2, r8
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f ae77 	beq.w	80087ba <_printf_float+0xb6>
 8008acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	47b8      	blx	r7
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f43f ae6f 	beq.w	80087ba <_printf_float+0xb6>
 8008adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f7f7 ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8008ae8:	b9d8      	cbnz	r0, 8008b22 <_printf_float+0x41e>
 8008aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aec:	f108 0201 	add.w	r2, r8, #1
 8008af0:	3b01      	subs	r3, #1
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	d10e      	bne.n	8008b1a <_printf_float+0x416>
 8008afc:	e65d      	b.n	80087ba <_printf_float+0xb6>
 8008afe:	2301      	movs	r3, #1
 8008b00:	464a      	mov	r2, r9
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f43f ae56 	beq.w	80087ba <_printf_float+0xb6>
 8008b0e:	f108 0801 	add.w	r8, r8, #1
 8008b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b14:	3b01      	subs	r3, #1
 8008b16:	4543      	cmp	r3, r8
 8008b18:	dcf1      	bgt.n	8008afe <_printf_float+0x3fa>
 8008b1a:	4653      	mov	r3, sl
 8008b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b20:	e6e0      	b.n	80088e4 <_printf_float+0x1e0>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 091a 	add.w	r9, r4, #26
 8008b2a:	e7f2      	b.n	8008b12 <_printf_float+0x40e>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4642      	mov	r2, r8
 8008b30:	e7df      	b.n	8008af2 <_printf_float+0x3ee>
 8008b32:	2301      	movs	r3, #1
 8008b34:	464a      	mov	r2, r9
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f43f ae3c 	beq.w	80087ba <_printf_float+0xb6>
 8008b42:	f108 0801 	add.w	r8, r8, #1
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b4a:	1a5b      	subs	r3, r3, r1
 8008b4c:	4543      	cmp	r3, r8
 8008b4e:	dcf0      	bgt.n	8008b32 <_printf_float+0x42e>
 8008b50:	e6fd      	b.n	800894e <_printf_float+0x24a>
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	f104 0919 	add.w	r9, r4, #25
 8008b5a:	e7f4      	b.n	8008b46 <_printf_float+0x442>

08008b5c <_printf_common>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	4616      	mov	r6, r2
 8008b62:	4699      	mov	r9, r3
 8008b64:	688a      	ldr	r2, [r1, #8]
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	4607      	mov	r7, r0
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	bfb8      	it	lt
 8008b6e:	4613      	movlt	r3, r2
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b76:	460c      	mov	r4, r1
 8008b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b7c:	b10a      	cbz	r2, 8008b82 <_printf_common+0x26>
 8008b7e:	3301      	adds	r3, #1
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	0699      	lsls	r1, r3, #26
 8008b86:	bf42      	ittt	mi
 8008b88:	6833      	ldrmi	r3, [r6, #0]
 8008b8a:	3302      	addmi	r3, #2
 8008b8c:	6033      	strmi	r3, [r6, #0]
 8008b8e:	6825      	ldr	r5, [r4, #0]
 8008b90:	f015 0506 	ands.w	r5, r5, #6
 8008b94:	d106      	bne.n	8008ba4 <_printf_common+0x48>
 8008b96:	f104 0a19 	add.w	sl, r4, #25
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	6832      	ldr	r2, [r6, #0]
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dc28      	bgt.n	8008bf6 <_printf_common+0x9a>
 8008ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ba8:	1e13      	subs	r3, r2, #0
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	bf18      	it	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	0692      	lsls	r2, r2, #26
 8008bb2:	d42d      	bmi.n	8008c10 <_printf_common+0xb4>
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bbc:	47c0      	blx	r8
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d020      	beq.n	8008c04 <_printf_common+0xa8>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	68e5      	ldr	r5, [r4, #12]
 8008bc6:	f003 0306 	and.w	r3, r3, #6
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	bf18      	it	ne
 8008bce:	2500      	movne	r5, #0
 8008bd0:	6832      	ldr	r2, [r6, #0]
 8008bd2:	f04f 0600 	mov.w	r6, #0
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	bf08      	it	eq
 8008bda:	1aad      	subeq	r5, r5, r2
 8008bdc:	6922      	ldr	r2, [r4, #16]
 8008bde:	bf08      	it	eq
 8008be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be4:	4293      	cmp	r3, r2
 8008be6:	bfc4      	itt	gt
 8008be8:	1a9b      	subgt	r3, r3, r2
 8008bea:	18ed      	addgt	r5, r5, r3
 8008bec:	341a      	adds	r4, #26
 8008bee:	42b5      	cmp	r5, r6
 8008bf0:	d11a      	bne.n	8008c28 <_printf_common+0xcc>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e008      	b.n	8008c08 <_printf_common+0xac>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	47c0      	blx	r8
 8008c00:	3001      	adds	r0, #1
 8008c02:	d103      	bne.n	8008c0c <_printf_common+0xb0>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	e7c4      	b.n	8008b9a <_printf_common+0x3e>
 8008c10:	2030      	movs	r0, #48	; 0x30
 8008c12:	18e1      	adds	r1, r4, r3
 8008c14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c1e:	4422      	add	r2, r4
 8008c20:	3302      	adds	r3, #2
 8008c22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c26:	e7c5      	b.n	8008bb4 <_printf_common+0x58>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4638      	mov	r0, r7
 8008c30:	47c0      	blx	r8
 8008c32:	3001      	adds	r0, #1
 8008c34:	d0e6      	beq.n	8008c04 <_printf_common+0xa8>
 8008c36:	3601      	adds	r6, #1
 8008c38:	e7d9      	b.n	8008bee <_printf_common+0x92>
	...

08008c3c <_printf_i>:
 8008c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	7e0f      	ldrb	r7, [r1, #24]
 8008c42:	4691      	mov	r9, r2
 8008c44:	2f78      	cmp	r7, #120	; 0x78
 8008c46:	4680      	mov	r8, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	469a      	mov	sl, r3
 8008c4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c52:	d807      	bhi.n	8008c64 <_printf_i+0x28>
 8008c54:	2f62      	cmp	r7, #98	; 0x62
 8008c56:	d80a      	bhi.n	8008c6e <_printf_i+0x32>
 8008c58:	2f00      	cmp	r7, #0
 8008c5a:	f000 80d9 	beq.w	8008e10 <_printf_i+0x1d4>
 8008c5e:	2f58      	cmp	r7, #88	; 0x58
 8008c60:	f000 80a4 	beq.w	8008dac <_printf_i+0x170>
 8008c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c6c:	e03a      	b.n	8008ce4 <_printf_i+0xa8>
 8008c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c72:	2b15      	cmp	r3, #21
 8008c74:	d8f6      	bhi.n	8008c64 <_printf_i+0x28>
 8008c76:	a101      	add	r1, pc, #4	; (adr r1, 8008c7c <_printf_i+0x40>)
 8008c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c7c:	08008cd5 	.word	0x08008cd5
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008c65 	.word	0x08008c65
 8008c88:	08008c65 	.word	0x08008c65
 8008c8c:	08008c65 	.word	0x08008c65
 8008c90:	08008c65 	.word	0x08008c65
 8008c94:	08008ce9 	.word	0x08008ce9
 8008c98:	08008c65 	.word	0x08008c65
 8008c9c:	08008c65 	.word	0x08008c65
 8008ca0:	08008c65 	.word	0x08008c65
 8008ca4:	08008c65 	.word	0x08008c65
 8008ca8:	08008df7 	.word	0x08008df7
 8008cac:	08008d19 	.word	0x08008d19
 8008cb0:	08008dd9 	.word	0x08008dd9
 8008cb4:	08008c65 	.word	0x08008c65
 8008cb8:	08008c65 	.word	0x08008c65
 8008cbc:	08008e19 	.word	0x08008e19
 8008cc0:	08008c65 	.word	0x08008c65
 8008cc4:	08008d19 	.word	0x08008d19
 8008cc8:	08008c65 	.word	0x08008c65
 8008ccc:	08008c65 	.word	0x08008c65
 8008cd0:	08008de1 	.word	0x08008de1
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	1d1a      	adds	r2, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	602a      	str	r2, [r5, #0]
 8008cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0a4      	b.n	8008e32 <_printf_i+0x1f6>
 8008ce8:	6820      	ldr	r0, [r4, #0]
 8008cea:	6829      	ldr	r1, [r5, #0]
 8008cec:	0606      	lsls	r6, r0, #24
 8008cee:	f101 0304 	add.w	r3, r1, #4
 8008cf2:	d50a      	bpl.n	8008d0a <_printf_i+0xce>
 8008cf4:	680e      	ldr	r6, [r1, #0]
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	da03      	bge.n	8008d04 <_printf_i+0xc8>
 8008cfc:	232d      	movs	r3, #45	; 0x2d
 8008cfe:	4276      	negs	r6, r6
 8008d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d04:	230a      	movs	r3, #10
 8008d06:	485e      	ldr	r0, [pc, #376]	; (8008e80 <_printf_i+0x244>)
 8008d08:	e019      	b.n	8008d3e <_printf_i+0x102>
 8008d0a:	680e      	ldr	r6, [r1, #0]
 8008d0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	bf18      	it	ne
 8008d14:	b236      	sxthne	r6, r6
 8008d16:	e7ef      	b.n	8008cf8 <_printf_i+0xbc>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	6820      	ldr	r0, [r4, #0]
 8008d1c:	1d19      	adds	r1, r3, #4
 8008d1e:	6029      	str	r1, [r5, #0]
 8008d20:	0601      	lsls	r1, r0, #24
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0xec>
 8008d24:	681e      	ldr	r6, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0xf2>
 8008d28:	0646      	lsls	r6, r0, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0xe8>
 8008d2c:	881e      	ldrh	r6, [r3, #0]
 8008d2e:	2f6f      	cmp	r7, #111	; 0x6f
 8008d30:	bf0c      	ite	eq
 8008d32:	2308      	moveq	r3, #8
 8008d34:	230a      	movne	r3, #10
 8008d36:	4852      	ldr	r0, [pc, #328]	; (8008e80 <_printf_i+0x244>)
 8008d38:	2100      	movs	r1, #0
 8008d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d3e:	6865      	ldr	r5, [r4, #4]
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	bfa8      	it	ge
 8008d44:	6821      	ldrge	r1, [r4, #0]
 8008d46:	60a5      	str	r5, [r4, #8]
 8008d48:	bfa4      	itt	ge
 8008d4a:	f021 0104 	bicge.w	r1, r1, #4
 8008d4e:	6021      	strge	r1, [r4, #0]
 8008d50:	b90e      	cbnz	r6, 8008d56 <_printf_i+0x11a>
 8008d52:	2d00      	cmp	r5, #0
 8008d54:	d04d      	beq.n	8008df2 <_printf_i+0x1b6>
 8008d56:	4615      	mov	r5, r2
 8008d58:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d5c:	fb03 6711 	mls	r7, r3, r1, r6
 8008d60:	5dc7      	ldrb	r7, [r0, r7]
 8008d62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d66:	4637      	mov	r7, r6
 8008d68:	42bb      	cmp	r3, r7
 8008d6a:	460e      	mov	r6, r1
 8008d6c:	d9f4      	bls.n	8008d58 <_printf_i+0x11c>
 8008d6e:	2b08      	cmp	r3, #8
 8008d70:	d10b      	bne.n	8008d8a <_printf_i+0x14e>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	07de      	lsls	r6, r3, #31
 8008d76:	d508      	bpl.n	8008d8a <_printf_i+0x14e>
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	6861      	ldr	r1, [r4, #4]
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	bfde      	ittt	le
 8008d80:	2330      	movle	r3, #48	; 0x30
 8008d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d8a:	1b52      	subs	r2, r2, r5
 8008d8c:	6122      	str	r2, [r4, #16]
 8008d8e:	464b      	mov	r3, r9
 8008d90:	4621      	mov	r1, r4
 8008d92:	4640      	mov	r0, r8
 8008d94:	f8cd a000 	str.w	sl, [sp]
 8008d98:	aa03      	add	r2, sp, #12
 8008d9a:	f7ff fedf 	bl	8008b5c <_printf_common>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d14c      	bne.n	8008e3c <_printf_i+0x200>
 8008da2:	f04f 30ff 	mov.w	r0, #4294967295
 8008da6:	b004      	add	sp, #16
 8008da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dac:	4834      	ldr	r0, [pc, #208]	; (8008e80 <_printf_i+0x244>)
 8008dae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008db2:	6829      	ldr	r1, [r5, #0]
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dba:	6029      	str	r1, [r5, #0]
 8008dbc:	061d      	lsls	r5, r3, #24
 8008dbe:	d514      	bpl.n	8008dea <_printf_i+0x1ae>
 8008dc0:	07df      	lsls	r7, r3, #31
 8008dc2:	bf44      	itt	mi
 8008dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008dc8:	6023      	strmi	r3, [r4, #0]
 8008dca:	b91e      	cbnz	r6, 8008dd4 <_printf_i+0x198>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	f023 0320 	bic.w	r3, r3, #32
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	e7af      	b.n	8008d38 <_printf_i+0xfc>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	f043 0320 	orr.w	r3, r3, #32
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	2378      	movs	r3, #120	; 0x78
 8008de2:	4828      	ldr	r0, [pc, #160]	; (8008e84 <_printf_i+0x248>)
 8008de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008de8:	e7e3      	b.n	8008db2 <_printf_i+0x176>
 8008dea:	0659      	lsls	r1, r3, #25
 8008dec:	bf48      	it	mi
 8008dee:	b2b6      	uxthmi	r6, r6
 8008df0:	e7e6      	b.n	8008dc0 <_printf_i+0x184>
 8008df2:	4615      	mov	r5, r2
 8008df4:	e7bb      	b.n	8008d6e <_printf_i+0x132>
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	6826      	ldr	r6, [r4, #0]
 8008dfa:	1d18      	adds	r0, r3, #4
 8008dfc:	6961      	ldr	r1, [r4, #20]
 8008dfe:	6028      	str	r0, [r5, #0]
 8008e00:	0635      	lsls	r5, r6, #24
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	d501      	bpl.n	8008e0a <_printf_i+0x1ce>
 8008e06:	6019      	str	r1, [r3, #0]
 8008e08:	e002      	b.n	8008e10 <_printf_i+0x1d4>
 8008e0a:	0670      	lsls	r0, r6, #25
 8008e0c:	d5fb      	bpl.n	8008e06 <_printf_i+0x1ca>
 8008e0e:	8019      	strh	r1, [r3, #0]
 8008e10:	2300      	movs	r3, #0
 8008e12:	4615      	mov	r5, r2
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	e7ba      	b.n	8008d8e <_printf_i+0x152>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	1d1a      	adds	r2, r3, #4
 8008e1e:	602a      	str	r2, [r5, #0]
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	6862      	ldr	r2, [r4, #4]
 8008e24:	4628      	mov	r0, r5
 8008e26:	f002 faf5 	bl	800b414 <memchr>
 8008e2a:	b108      	cbz	r0, 8008e30 <_printf_i+0x1f4>
 8008e2c:	1b40      	subs	r0, r0, r5
 8008e2e:	6060      	str	r0, [r4, #4]
 8008e30:	6863      	ldr	r3, [r4, #4]
 8008e32:	6123      	str	r3, [r4, #16]
 8008e34:	2300      	movs	r3, #0
 8008e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e3a:	e7a8      	b.n	8008d8e <_printf_i+0x152>
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	47d0      	blx	sl
 8008e46:	3001      	adds	r0, #1
 8008e48:	d0ab      	beq.n	8008da2 <_printf_i+0x166>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	079b      	lsls	r3, r3, #30
 8008e4e:	d413      	bmi.n	8008e78 <_printf_i+0x23c>
 8008e50:	68e0      	ldr	r0, [r4, #12]
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	4298      	cmp	r0, r3
 8008e56:	bfb8      	it	lt
 8008e58:	4618      	movlt	r0, r3
 8008e5a:	e7a4      	b.n	8008da6 <_printf_i+0x16a>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	4632      	mov	r2, r6
 8008e60:	4649      	mov	r1, r9
 8008e62:	4640      	mov	r0, r8
 8008e64:	47d0      	blx	sl
 8008e66:	3001      	adds	r0, #1
 8008e68:	d09b      	beq.n	8008da2 <_printf_i+0x166>
 8008e6a:	3501      	adds	r5, #1
 8008e6c:	68e3      	ldr	r3, [r4, #12]
 8008e6e:	9903      	ldr	r1, [sp, #12]
 8008e70:	1a5b      	subs	r3, r3, r1
 8008e72:	42ab      	cmp	r3, r5
 8008e74:	dcf2      	bgt.n	8008e5c <_printf_i+0x220>
 8008e76:	e7eb      	b.n	8008e50 <_printf_i+0x214>
 8008e78:	2500      	movs	r5, #0
 8008e7a:	f104 0619 	add.w	r6, r4, #25
 8008e7e:	e7f5      	b.n	8008e6c <_printf_i+0x230>
 8008e80:	0800ce8e 	.word	0x0800ce8e
 8008e84:	0800ce9f 	.word	0x0800ce9f

08008e88 <_scanf_float>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	688b      	ldr	r3, [r1, #8]
 8008e92:	4617      	mov	r7, r2
 8008e94:	1e5a      	subs	r2, r3, #1
 8008e96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e9a:	bf85      	ittet	hi
 8008e9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ea0:	195b      	addhi	r3, r3, r5
 8008ea2:	2300      	movls	r3, #0
 8008ea4:	9302      	strhi	r3, [sp, #8]
 8008ea6:	bf88      	it	hi
 8008ea8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008eac:	468b      	mov	fp, r1
 8008eae:	f04f 0500 	mov.w	r5, #0
 8008eb2:	bf8c      	ite	hi
 8008eb4:	608b      	strhi	r3, [r1, #8]
 8008eb6:	9302      	strls	r3, [sp, #8]
 8008eb8:	680b      	ldr	r3, [r1, #0]
 8008eba:	4680      	mov	r8, r0
 8008ebc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ec0:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	465e      	mov	r6, fp
 8008ec8:	46aa      	mov	sl, r5
 8008eca:	46a9      	mov	r9, r5
 8008ecc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ed0:	9501      	str	r5, [sp, #4]
 8008ed2:	68a2      	ldr	r2, [r4, #8]
 8008ed4:	b152      	cbz	r2, 8008eec <_scanf_float+0x64>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b4e      	cmp	r3, #78	; 0x4e
 8008edc:	d864      	bhi.n	8008fa8 <_scanf_float+0x120>
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d83c      	bhi.n	8008f5c <_scanf_float+0xd4>
 8008ee2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ee6:	b2c8      	uxtb	r0, r1
 8008ee8:	280e      	cmp	r0, #14
 8008eea:	d93a      	bls.n	8008f62 <_scanf_float+0xda>
 8008eec:	f1b9 0f00 	cmp.w	r9, #0
 8008ef0:	d003      	beq.n	8008efa <_scanf_float+0x72>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008efe:	f1ba 0f01 	cmp.w	sl, #1
 8008f02:	f200 8113 	bhi.w	800912c <_scanf_float+0x2a4>
 8008f06:	455e      	cmp	r6, fp
 8008f08:	f200 8105 	bhi.w	8009116 <_scanf_float+0x28e>
 8008f0c:	2501      	movs	r5, #1
 8008f0e:	4628      	mov	r0, r5
 8008f10:	b007      	add	sp, #28
 8008f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f1a:	2a0d      	cmp	r2, #13
 8008f1c:	d8e6      	bhi.n	8008eec <_scanf_float+0x64>
 8008f1e:	a101      	add	r1, pc, #4	; (adr r1, 8008f24 <_scanf_float+0x9c>)
 8008f20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f24:	08009063 	.word	0x08009063
 8008f28:	08008eed 	.word	0x08008eed
 8008f2c:	08008eed 	.word	0x08008eed
 8008f30:	08008eed 	.word	0x08008eed
 8008f34:	080090c3 	.word	0x080090c3
 8008f38:	0800909b 	.word	0x0800909b
 8008f3c:	08008eed 	.word	0x08008eed
 8008f40:	08008eed 	.word	0x08008eed
 8008f44:	08009071 	.word	0x08009071
 8008f48:	08008eed 	.word	0x08008eed
 8008f4c:	08008eed 	.word	0x08008eed
 8008f50:	08008eed 	.word	0x08008eed
 8008f54:	08008eed 	.word	0x08008eed
 8008f58:	08009029 	.word	0x08009029
 8008f5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f60:	e7db      	b.n	8008f1a <_scanf_float+0x92>
 8008f62:	290e      	cmp	r1, #14
 8008f64:	d8c2      	bhi.n	8008eec <_scanf_float+0x64>
 8008f66:	a001      	add	r0, pc, #4	; (adr r0, 8008f6c <_scanf_float+0xe4>)
 8008f68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f6c:	0800901b 	.word	0x0800901b
 8008f70:	08008eed 	.word	0x08008eed
 8008f74:	0800901b 	.word	0x0800901b
 8008f78:	080090af 	.word	0x080090af
 8008f7c:	08008eed 	.word	0x08008eed
 8008f80:	08008fc9 	.word	0x08008fc9
 8008f84:	08009005 	.word	0x08009005
 8008f88:	08009005 	.word	0x08009005
 8008f8c:	08009005 	.word	0x08009005
 8008f90:	08009005 	.word	0x08009005
 8008f94:	08009005 	.word	0x08009005
 8008f98:	08009005 	.word	0x08009005
 8008f9c:	08009005 	.word	0x08009005
 8008fa0:	08009005 	.word	0x08009005
 8008fa4:	08009005 	.word	0x08009005
 8008fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8008faa:	d809      	bhi.n	8008fc0 <_scanf_float+0x138>
 8008fac:	2b60      	cmp	r3, #96	; 0x60
 8008fae:	d8b2      	bhi.n	8008f16 <_scanf_float+0x8e>
 8008fb0:	2b54      	cmp	r3, #84	; 0x54
 8008fb2:	d077      	beq.n	80090a4 <_scanf_float+0x21c>
 8008fb4:	2b59      	cmp	r3, #89	; 0x59
 8008fb6:	d199      	bne.n	8008eec <_scanf_float+0x64>
 8008fb8:	2d07      	cmp	r5, #7
 8008fba:	d197      	bne.n	8008eec <_scanf_float+0x64>
 8008fbc:	2508      	movs	r5, #8
 8008fbe:	e029      	b.n	8009014 <_scanf_float+0x18c>
 8008fc0:	2b74      	cmp	r3, #116	; 0x74
 8008fc2:	d06f      	beq.n	80090a4 <_scanf_float+0x21c>
 8008fc4:	2b79      	cmp	r3, #121	; 0x79
 8008fc6:	e7f6      	b.n	8008fb6 <_scanf_float+0x12e>
 8008fc8:	6821      	ldr	r1, [r4, #0]
 8008fca:	05c8      	lsls	r0, r1, #23
 8008fcc:	d51a      	bpl.n	8009004 <_scanf_float+0x17c>
 8008fce:	9b02      	ldr	r3, [sp, #8]
 8008fd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008fd4:	6021      	str	r1, [r4, #0]
 8008fd6:	f109 0901 	add.w	r9, r9, #1
 8008fda:	b11b      	cbz	r3, 8008fe4 <_scanf_float+0x15c>
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	3201      	adds	r2, #1
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	60a2      	str	r2, [r4, #8]
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	60a3      	str	r3, [r4, #8]
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	3301      	adds	r3, #1
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	f340 8084 	ble.w	8009104 <_scanf_float+0x27c>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	3301      	adds	r3, #1
 8009000:	603b      	str	r3, [r7, #0]
 8009002:	e766      	b.n	8008ed2 <_scanf_float+0x4a>
 8009004:	eb1a 0f05 	cmn.w	sl, r5
 8009008:	f47f af70 	bne.w	8008eec <_scanf_float+0x64>
 800900c:	6822      	ldr	r2, [r4, #0]
 800900e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	f806 3b01 	strb.w	r3, [r6], #1
 8009018:	e7e4      	b.n	8008fe4 <_scanf_float+0x15c>
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	0610      	lsls	r0, r2, #24
 800901e:	f57f af65 	bpl.w	8008eec <_scanf_float+0x64>
 8009022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009026:	e7f4      	b.n	8009012 <_scanf_float+0x18a>
 8009028:	f1ba 0f00 	cmp.w	sl, #0
 800902c:	d10e      	bne.n	800904c <_scanf_float+0x1c4>
 800902e:	f1b9 0f00 	cmp.w	r9, #0
 8009032:	d10e      	bne.n	8009052 <_scanf_float+0x1ca>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800903a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800903e:	d108      	bne.n	8009052 <_scanf_float+0x1ca>
 8009040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009044:	f04f 0a01 	mov.w	sl, #1
 8009048:	6022      	str	r2, [r4, #0]
 800904a:	e7e3      	b.n	8009014 <_scanf_float+0x18c>
 800904c:	f1ba 0f02 	cmp.w	sl, #2
 8009050:	d055      	beq.n	80090fe <_scanf_float+0x276>
 8009052:	2d01      	cmp	r5, #1
 8009054:	d002      	beq.n	800905c <_scanf_float+0x1d4>
 8009056:	2d04      	cmp	r5, #4
 8009058:	f47f af48 	bne.w	8008eec <_scanf_float+0x64>
 800905c:	3501      	adds	r5, #1
 800905e:	b2ed      	uxtb	r5, r5
 8009060:	e7d8      	b.n	8009014 <_scanf_float+0x18c>
 8009062:	f1ba 0f01 	cmp.w	sl, #1
 8009066:	f47f af41 	bne.w	8008eec <_scanf_float+0x64>
 800906a:	f04f 0a02 	mov.w	sl, #2
 800906e:	e7d1      	b.n	8009014 <_scanf_float+0x18c>
 8009070:	b97d      	cbnz	r5, 8009092 <_scanf_float+0x20a>
 8009072:	f1b9 0f00 	cmp.w	r9, #0
 8009076:	f47f af3c 	bne.w	8008ef2 <_scanf_float+0x6a>
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009080:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009084:	f47f af39 	bne.w	8008efa <_scanf_float+0x72>
 8009088:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800908c:	2501      	movs	r5, #1
 800908e:	6022      	str	r2, [r4, #0]
 8009090:	e7c0      	b.n	8009014 <_scanf_float+0x18c>
 8009092:	2d03      	cmp	r5, #3
 8009094:	d0e2      	beq.n	800905c <_scanf_float+0x1d4>
 8009096:	2d05      	cmp	r5, #5
 8009098:	e7de      	b.n	8009058 <_scanf_float+0x1d0>
 800909a:	2d02      	cmp	r5, #2
 800909c:	f47f af26 	bne.w	8008eec <_scanf_float+0x64>
 80090a0:	2503      	movs	r5, #3
 80090a2:	e7b7      	b.n	8009014 <_scanf_float+0x18c>
 80090a4:	2d06      	cmp	r5, #6
 80090a6:	f47f af21 	bne.w	8008eec <_scanf_float+0x64>
 80090aa:	2507      	movs	r5, #7
 80090ac:	e7b2      	b.n	8009014 <_scanf_float+0x18c>
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	0591      	lsls	r1, r2, #22
 80090b2:	f57f af1b 	bpl.w	8008eec <_scanf_float+0x64>
 80090b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80090ba:	6022      	str	r2, [r4, #0]
 80090bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80090c0:	e7a8      	b.n	8009014 <_scanf_float+0x18c>
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80090c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80090cc:	d006      	beq.n	80090dc <_scanf_float+0x254>
 80090ce:	0550      	lsls	r0, r2, #21
 80090d0:	f57f af0c 	bpl.w	8008eec <_scanf_float+0x64>
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	f43f af0f 	beq.w	8008efa <_scanf_float+0x72>
 80090dc:	0591      	lsls	r1, r2, #22
 80090de:	bf58      	it	pl
 80090e0:	9901      	ldrpl	r1, [sp, #4]
 80090e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090e6:	bf58      	it	pl
 80090e8:	eba9 0101 	subpl.w	r1, r9, r1
 80090ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80090f0:	f04f 0900 	mov.w	r9, #0
 80090f4:	bf58      	it	pl
 80090f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090fa:	6022      	str	r2, [r4, #0]
 80090fc:	e78a      	b.n	8009014 <_scanf_float+0x18c>
 80090fe:	f04f 0a03 	mov.w	sl, #3
 8009102:	e787      	b.n	8009014 <_scanf_float+0x18c>
 8009104:	4639      	mov	r1, r7
 8009106:	4640      	mov	r0, r8
 8009108:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800910c:	4798      	blx	r3
 800910e:	2800      	cmp	r0, #0
 8009110:	f43f aedf 	beq.w	8008ed2 <_scanf_float+0x4a>
 8009114:	e6ea      	b.n	8008eec <_scanf_float+0x64>
 8009116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800911a:	463a      	mov	r2, r7
 800911c:	4640      	mov	r0, r8
 800911e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009122:	4798      	blx	r3
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	3b01      	subs	r3, #1
 8009128:	6123      	str	r3, [r4, #16]
 800912a:	e6ec      	b.n	8008f06 <_scanf_float+0x7e>
 800912c:	1e6b      	subs	r3, r5, #1
 800912e:	2b06      	cmp	r3, #6
 8009130:	d825      	bhi.n	800917e <_scanf_float+0x2f6>
 8009132:	2d02      	cmp	r5, #2
 8009134:	d836      	bhi.n	80091a4 <_scanf_float+0x31c>
 8009136:	455e      	cmp	r6, fp
 8009138:	f67f aee8 	bls.w	8008f0c <_scanf_float+0x84>
 800913c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009140:	463a      	mov	r2, r7
 8009142:	4640      	mov	r0, r8
 8009144:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009148:	4798      	blx	r3
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	3b01      	subs	r3, #1
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	e7f1      	b.n	8009136 <_scanf_float+0x2ae>
 8009152:	9802      	ldr	r0, [sp, #8]
 8009154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009158:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800915c:	463a      	mov	r2, r7
 800915e:	9002      	str	r0, [sp, #8]
 8009160:	4640      	mov	r0, r8
 8009162:	4798      	blx	r3
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	3b01      	subs	r3, #1
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916e:	fa5f fa8a 	uxtb.w	sl, sl
 8009172:	f1ba 0f02 	cmp.w	sl, #2
 8009176:	d1ec      	bne.n	8009152 <_scanf_float+0x2ca>
 8009178:	3d03      	subs	r5, #3
 800917a:	b2ed      	uxtb	r5, r5
 800917c:	1b76      	subs	r6, r6, r5
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	05da      	lsls	r2, r3, #23
 8009182:	d52f      	bpl.n	80091e4 <_scanf_float+0x35c>
 8009184:	055b      	lsls	r3, r3, #21
 8009186:	d510      	bpl.n	80091aa <_scanf_float+0x322>
 8009188:	455e      	cmp	r6, fp
 800918a:	f67f aebf 	bls.w	8008f0c <_scanf_float+0x84>
 800918e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009192:	463a      	mov	r2, r7
 8009194:	4640      	mov	r0, r8
 8009196:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800919a:	4798      	blx	r3
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	3b01      	subs	r3, #1
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	e7f1      	b.n	8009188 <_scanf_float+0x300>
 80091a4:	46aa      	mov	sl, r5
 80091a6:	9602      	str	r6, [sp, #8]
 80091a8:	e7df      	b.n	800916a <_scanf_float+0x2e2>
 80091aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	2965      	cmp	r1, #101	; 0x65
 80091b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80091b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	d00c      	beq.n	80091d8 <_scanf_float+0x350>
 80091be:	2945      	cmp	r1, #69	; 0x45
 80091c0:	d00a      	beq.n	80091d8 <_scanf_float+0x350>
 80091c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c6:	463a      	mov	r2, r7
 80091c8:	4640      	mov	r0, r8
 80091ca:	4798      	blx	r3
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	1eb5      	subs	r5, r6, #2
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	463a      	mov	r2, r7
 80091da:	4640      	mov	r0, r8
 80091dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091e0:	4798      	blx	r3
 80091e2:	462e      	mov	r6, r5
 80091e4:	6825      	ldr	r5, [r4, #0]
 80091e6:	f015 0510 	ands.w	r5, r5, #16
 80091ea:	d155      	bne.n	8009298 <_scanf_float+0x410>
 80091ec:	7035      	strb	r5, [r6, #0]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f8:	d11b      	bne.n	8009232 <_scanf_float+0x3aa>
 80091fa:	9b01      	ldr	r3, [sp, #4]
 80091fc:	454b      	cmp	r3, r9
 80091fe:	eba3 0209 	sub.w	r2, r3, r9
 8009202:	d123      	bne.n	800924c <_scanf_float+0x3c4>
 8009204:	2200      	movs	r2, #0
 8009206:	4659      	mov	r1, fp
 8009208:	4640      	mov	r0, r8
 800920a:	f000 fe81 	bl	8009f10 <_strtod_r>
 800920e:	6822      	ldr	r2, [r4, #0]
 8009210:	9b03      	ldr	r3, [sp, #12]
 8009212:	f012 0f02 	tst.w	r2, #2
 8009216:	4606      	mov	r6, r0
 8009218:	460f      	mov	r7, r1
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	d021      	beq.n	8009262 <_scanf_float+0x3da>
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	9903      	ldr	r1, [sp, #12]
 8009222:	600a      	str	r2, [r1, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	e9c3 6700 	strd	r6, r7, [r3]
 800922a:	68e3      	ldr	r3, [r4, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	60e3      	str	r3, [r4, #12]
 8009230:	e66d      	b.n	8008f0e <_scanf_float+0x86>
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0e5      	beq.n	8009204 <_scanf_float+0x37c>
 8009238:	9905      	ldr	r1, [sp, #20]
 800923a:	230a      	movs	r3, #10
 800923c:	462a      	mov	r2, r5
 800923e:	4640      	mov	r0, r8
 8009240:	3101      	adds	r1, #1
 8009242:	f000 fee7 	bl	800a014 <_strtol_r>
 8009246:	9b04      	ldr	r3, [sp, #16]
 8009248:	9e05      	ldr	r6, [sp, #20]
 800924a:	1ac2      	subs	r2, r0, r3
 800924c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009250:	429e      	cmp	r6, r3
 8009252:	bf28      	it	cs
 8009254:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009258:	4630      	mov	r0, r6
 800925a:	4910      	ldr	r1, [pc, #64]	; (800929c <_scanf_float+0x414>)
 800925c:	f000 f826 	bl	80092ac <siprintf>
 8009260:	e7d0      	b.n	8009204 <_scanf_float+0x37c>
 8009262:	f012 0f04 	tst.w	r2, #4
 8009266:	f103 0204 	add.w	r2, r3, #4
 800926a:	d1d9      	bne.n	8009220 <_scanf_float+0x398>
 800926c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009270:	f8cc 2000 	str.w	r2, [ip]
 8009274:	f8d3 8000 	ldr.w	r8, [r3]
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	f7f7 fbc6 	bl	8000a0c <__aeabi_dcmpun>
 8009280:	b128      	cbz	r0, 800928e <_scanf_float+0x406>
 8009282:	4807      	ldr	r0, [pc, #28]	; (80092a0 <_scanf_float+0x418>)
 8009284:	f000 f80e 	bl	80092a4 <nanf>
 8009288:	f8c8 0000 	str.w	r0, [r8]
 800928c:	e7cd      	b.n	800922a <_scanf_float+0x3a2>
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	f7f7 fc19 	bl	8000ac8 <__aeabi_d2f>
 8009296:	e7f7      	b.n	8009288 <_scanf_float+0x400>
 8009298:	2500      	movs	r5, #0
 800929a:	e638      	b.n	8008f0e <_scanf_float+0x86>
 800929c:	0800ceb0 	.word	0x0800ceb0
 80092a0:	0800d2b8 	.word	0x0800d2b8

080092a4 <nanf>:
 80092a4:	4800      	ldr	r0, [pc, #0]	; (80092a8 <nanf+0x4>)
 80092a6:	4770      	bx	lr
 80092a8:	7fc00000 	.word	0x7fc00000

080092ac <siprintf>:
 80092ac:	b40e      	push	{r1, r2, r3}
 80092ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092b2:	b500      	push	{lr}
 80092b4:	b09c      	sub	sp, #112	; 0x70
 80092b6:	ab1d      	add	r3, sp, #116	; 0x74
 80092b8:	9002      	str	r0, [sp, #8]
 80092ba:	9006      	str	r0, [sp, #24]
 80092bc:	9107      	str	r1, [sp, #28]
 80092be:	9104      	str	r1, [sp, #16]
 80092c0:	4808      	ldr	r0, [pc, #32]	; (80092e4 <siprintf+0x38>)
 80092c2:	4909      	ldr	r1, [pc, #36]	; (80092e8 <siprintf+0x3c>)
 80092c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c8:	9105      	str	r1, [sp, #20]
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	a902      	add	r1, sp, #8
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	f002 feb2 	bl	800c038 <_svfiprintf_r>
 80092d4:	2200      	movs	r2, #0
 80092d6:	9b02      	ldr	r3, [sp, #8]
 80092d8:	701a      	strb	r2, [r3, #0]
 80092da:	b01c      	add	sp, #112	; 0x70
 80092dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e0:	b003      	add	sp, #12
 80092e2:	4770      	bx	lr
 80092e4:	200002cc 	.word	0x200002cc
 80092e8:	ffff0208 	.word	0xffff0208

080092ec <strcpy>:
 80092ec:	4603      	mov	r3, r0
 80092ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092f2:	f803 2b01 	strb.w	r2, [r3], #1
 80092f6:	2a00      	cmp	r2, #0
 80092f8:	d1f9      	bne.n	80092ee <strcpy+0x2>
 80092fa:	4770      	bx	lr

080092fc <sulp>:
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	460f      	mov	r7, r1
 8009302:	4690      	mov	r8, r2
 8009304:	f002 fc04 	bl	800bb10 <__ulp>
 8009308:	4604      	mov	r4, r0
 800930a:	460d      	mov	r5, r1
 800930c:	f1b8 0f00 	cmp.w	r8, #0
 8009310:	d011      	beq.n	8009336 <sulp+0x3a>
 8009312:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009316:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800931a:	2b00      	cmp	r3, #0
 800931c:	dd0b      	ble.n	8009336 <sulp+0x3a>
 800931e:	2400      	movs	r4, #0
 8009320:	051b      	lsls	r3, r3, #20
 8009322:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009326:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	f7f7 f8d3 	bl	80004d8 <__aeabi_dmul>
 8009332:	4604      	mov	r4, r0
 8009334:	460d      	mov	r5, r1
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009340 <_strtod_l>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	469b      	mov	fp, r3
 8009346:	2300      	movs	r3, #0
 8009348:	b09f      	sub	sp, #124	; 0x7c
 800934a:	931a      	str	r3, [sp, #104]	; 0x68
 800934c:	4b9e      	ldr	r3, [pc, #632]	; (80095c8 <_strtod_l+0x288>)
 800934e:	4682      	mov	sl, r0
 8009350:	681f      	ldr	r7, [r3, #0]
 8009352:	460e      	mov	r6, r1
 8009354:	4638      	mov	r0, r7
 8009356:	9215      	str	r2, [sp, #84]	; 0x54
 8009358:	f7f6 fefa 	bl	8000150 <strlen>
 800935c:	f04f 0800 	mov.w	r8, #0
 8009360:	4604      	mov	r4, r0
 8009362:	f04f 0900 	mov.w	r9, #0
 8009366:	9619      	str	r6, [sp, #100]	; 0x64
 8009368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800936a:	781a      	ldrb	r2, [r3, #0]
 800936c:	2a2b      	cmp	r2, #43	; 0x2b
 800936e:	d04c      	beq.n	800940a <_strtod_l+0xca>
 8009370:	d83a      	bhi.n	80093e8 <_strtod_l+0xa8>
 8009372:	2a0d      	cmp	r2, #13
 8009374:	d833      	bhi.n	80093de <_strtod_l+0x9e>
 8009376:	2a08      	cmp	r2, #8
 8009378:	d833      	bhi.n	80093e2 <_strtod_l+0xa2>
 800937a:	2a00      	cmp	r2, #0
 800937c:	d03d      	beq.n	80093fa <_strtod_l+0xba>
 800937e:	2300      	movs	r3, #0
 8009380:	930a      	str	r3, [sp, #40]	; 0x28
 8009382:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009384:	782b      	ldrb	r3, [r5, #0]
 8009386:	2b30      	cmp	r3, #48	; 0x30
 8009388:	f040 80aa 	bne.w	80094e0 <_strtod_l+0x1a0>
 800938c:	786b      	ldrb	r3, [r5, #1]
 800938e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009392:	2b58      	cmp	r3, #88	; 0x58
 8009394:	d166      	bne.n	8009464 <_strtod_l+0x124>
 8009396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009398:	4650      	mov	r0, sl
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	ab1a      	add	r3, sp, #104	; 0x68
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	4a8a      	ldr	r2, [pc, #552]	; (80095cc <_strtod_l+0x28c>)
 80093a2:	f8cd b008 	str.w	fp, [sp, #8]
 80093a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80093a8:	a919      	add	r1, sp, #100	; 0x64
 80093aa:	f001 fd17 	bl	800addc <__gethex>
 80093ae:	f010 0607 	ands.w	r6, r0, #7
 80093b2:	4604      	mov	r4, r0
 80093b4:	d005      	beq.n	80093c2 <_strtod_l+0x82>
 80093b6:	2e06      	cmp	r6, #6
 80093b8:	d129      	bne.n	800940e <_strtod_l+0xce>
 80093ba:	2300      	movs	r3, #0
 80093bc:	3501      	adds	r5, #1
 80093be:	9519      	str	r5, [sp, #100]	; 0x64
 80093c0:	930a      	str	r3, [sp, #40]	; 0x28
 80093c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f040 858a 	bne.w	8009ede <_strtod_l+0xb9e>
 80093ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093cc:	b1d3      	cbz	r3, 8009404 <_strtod_l+0xc4>
 80093ce:	4642      	mov	r2, r8
 80093d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093d4:	4610      	mov	r0, r2
 80093d6:	4619      	mov	r1, r3
 80093d8:	b01f      	add	sp, #124	; 0x7c
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	2a20      	cmp	r2, #32
 80093e0:	d1cd      	bne.n	800937e <_strtod_l+0x3e>
 80093e2:	3301      	adds	r3, #1
 80093e4:	9319      	str	r3, [sp, #100]	; 0x64
 80093e6:	e7bf      	b.n	8009368 <_strtod_l+0x28>
 80093e8:	2a2d      	cmp	r2, #45	; 0x2d
 80093ea:	d1c8      	bne.n	800937e <_strtod_l+0x3e>
 80093ec:	2201      	movs	r2, #1
 80093ee:	920a      	str	r2, [sp, #40]	; 0x28
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	9219      	str	r2, [sp, #100]	; 0x64
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1c3      	bne.n	8009382 <_strtod_l+0x42>
 80093fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093fc:	9619      	str	r6, [sp, #100]	; 0x64
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f040 856b 	bne.w	8009eda <_strtod_l+0xb9a>
 8009404:	4642      	mov	r2, r8
 8009406:	464b      	mov	r3, r9
 8009408:	e7e4      	b.n	80093d4 <_strtod_l+0x94>
 800940a:	2200      	movs	r2, #0
 800940c:	e7ef      	b.n	80093ee <_strtod_l+0xae>
 800940e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009410:	b13a      	cbz	r2, 8009422 <_strtod_l+0xe2>
 8009412:	2135      	movs	r1, #53	; 0x35
 8009414:	a81c      	add	r0, sp, #112	; 0x70
 8009416:	f002 fc7f 	bl	800bd18 <__copybits>
 800941a:	4650      	mov	r0, sl
 800941c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800941e:	f002 f847 	bl	800b4b0 <_Bfree>
 8009422:	3e01      	subs	r6, #1
 8009424:	2e04      	cmp	r6, #4
 8009426:	d806      	bhi.n	8009436 <_strtod_l+0xf6>
 8009428:	e8df f006 	tbb	[pc, r6]
 800942c:	1714030a 	.word	0x1714030a
 8009430:	0a          	.byte	0x0a
 8009431:	00          	.byte	0x00
 8009432:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009436:	0721      	lsls	r1, r4, #28
 8009438:	d5c3      	bpl.n	80093c2 <_strtod_l+0x82>
 800943a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800943e:	e7c0      	b.n	80093c2 <_strtod_l+0x82>
 8009440:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009442:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800944a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800944e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009452:	e7f0      	b.n	8009436 <_strtod_l+0xf6>
 8009454:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80095d0 <_strtod_l+0x290>
 8009458:	e7ed      	b.n	8009436 <_strtod_l+0xf6>
 800945a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800945e:	f04f 38ff 	mov.w	r8, #4294967295
 8009462:	e7e8      	b.n	8009436 <_strtod_l+0xf6>
 8009464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	9219      	str	r2, [sp, #100]	; 0x64
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	2b30      	cmp	r3, #48	; 0x30
 800946e:	d0f9      	beq.n	8009464 <_strtod_l+0x124>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0a6      	beq.n	80093c2 <_strtod_l+0x82>
 8009474:	2301      	movs	r3, #1
 8009476:	9307      	str	r3, [sp, #28]
 8009478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800947a:	220a      	movs	r2, #10
 800947c:	9308      	str	r3, [sp, #32]
 800947e:	2300      	movs	r3, #0
 8009480:	469b      	mov	fp, r3
 8009482:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009486:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009488:	7805      	ldrb	r5, [r0, #0]
 800948a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800948e:	b2d9      	uxtb	r1, r3
 8009490:	2909      	cmp	r1, #9
 8009492:	d927      	bls.n	80094e4 <_strtod_l+0x1a4>
 8009494:	4622      	mov	r2, r4
 8009496:	4639      	mov	r1, r7
 8009498:	f002 fee4 	bl	800c264 <strncmp>
 800949c:	2800      	cmp	r0, #0
 800949e:	d033      	beq.n	8009508 <_strtod_l+0x1c8>
 80094a0:	2000      	movs	r0, #0
 80094a2:	462a      	mov	r2, r5
 80094a4:	465c      	mov	r4, fp
 80094a6:	4603      	mov	r3, r0
 80094a8:	9004      	str	r0, [sp, #16]
 80094aa:	2a65      	cmp	r2, #101	; 0x65
 80094ac:	d001      	beq.n	80094b2 <_strtod_l+0x172>
 80094ae:	2a45      	cmp	r2, #69	; 0x45
 80094b0:	d114      	bne.n	80094dc <_strtod_l+0x19c>
 80094b2:	b91c      	cbnz	r4, 80094bc <_strtod_l+0x17c>
 80094b4:	9a07      	ldr	r2, [sp, #28]
 80094b6:	4302      	orrs	r2, r0
 80094b8:	d09f      	beq.n	80093fa <_strtod_l+0xba>
 80094ba:	2400      	movs	r4, #0
 80094bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80094be:	1c72      	adds	r2, r6, #1
 80094c0:	9219      	str	r2, [sp, #100]	; 0x64
 80094c2:	7872      	ldrb	r2, [r6, #1]
 80094c4:	2a2b      	cmp	r2, #43	; 0x2b
 80094c6:	d079      	beq.n	80095bc <_strtod_l+0x27c>
 80094c8:	2a2d      	cmp	r2, #45	; 0x2d
 80094ca:	f000 8083 	beq.w	80095d4 <_strtod_l+0x294>
 80094ce:	2700      	movs	r7, #0
 80094d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094d4:	2909      	cmp	r1, #9
 80094d6:	f240 8083 	bls.w	80095e0 <_strtod_l+0x2a0>
 80094da:	9619      	str	r6, [sp, #100]	; 0x64
 80094dc:	2500      	movs	r5, #0
 80094de:	e09f      	b.n	8009620 <_strtod_l+0x2e0>
 80094e0:	2300      	movs	r3, #0
 80094e2:	e7c8      	b.n	8009476 <_strtod_l+0x136>
 80094e4:	f1bb 0f08 	cmp.w	fp, #8
 80094e8:	bfd5      	itete	le
 80094ea:	9906      	ldrle	r1, [sp, #24]
 80094ec:	9905      	ldrgt	r1, [sp, #20]
 80094ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80094f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80094f6:	f100 0001 	add.w	r0, r0, #1
 80094fa:	bfd4      	ite	le
 80094fc:	9306      	strle	r3, [sp, #24]
 80094fe:	9305      	strgt	r3, [sp, #20]
 8009500:	f10b 0b01 	add.w	fp, fp, #1
 8009504:	9019      	str	r0, [sp, #100]	; 0x64
 8009506:	e7be      	b.n	8009486 <_strtod_l+0x146>
 8009508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800950a:	191a      	adds	r2, r3, r4
 800950c:	9219      	str	r2, [sp, #100]	; 0x64
 800950e:	5d1a      	ldrb	r2, [r3, r4]
 8009510:	f1bb 0f00 	cmp.w	fp, #0
 8009514:	d036      	beq.n	8009584 <_strtod_l+0x244>
 8009516:	465c      	mov	r4, fp
 8009518:	9004      	str	r0, [sp, #16]
 800951a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800951e:	2b09      	cmp	r3, #9
 8009520:	d912      	bls.n	8009548 <_strtod_l+0x208>
 8009522:	2301      	movs	r3, #1
 8009524:	e7c1      	b.n	80094aa <_strtod_l+0x16a>
 8009526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009528:	3001      	adds	r0, #1
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	9219      	str	r2, [sp, #100]	; 0x64
 800952e:	785a      	ldrb	r2, [r3, #1]
 8009530:	2a30      	cmp	r2, #48	; 0x30
 8009532:	d0f8      	beq.n	8009526 <_strtod_l+0x1e6>
 8009534:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009538:	2b08      	cmp	r3, #8
 800953a:	f200 84d5 	bhi.w	8009ee8 <_strtod_l+0xba8>
 800953e:	9004      	str	r0, [sp, #16]
 8009540:	2000      	movs	r0, #0
 8009542:	4604      	mov	r4, r0
 8009544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009546:	9308      	str	r3, [sp, #32]
 8009548:	3a30      	subs	r2, #48	; 0x30
 800954a:	f100 0301 	add.w	r3, r0, #1
 800954e:	d013      	beq.n	8009578 <_strtod_l+0x238>
 8009550:	9904      	ldr	r1, [sp, #16]
 8009552:	1905      	adds	r5, r0, r4
 8009554:	4419      	add	r1, r3
 8009556:	9104      	str	r1, [sp, #16]
 8009558:	4623      	mov	r3, r4
 800955a:	210a      	movs	r1, #10
 800955c:	42ab      	cmp	r3, r5
 800955e:	d113      	bne.n	8009588 <_strtod_l+0x248>
 8009560:	1823      	adds	r3, r4, r0
 8009562:	2b08      	cmp	r3, #8
 8009564:	f104 0401 	add.w	r4, r4, #1
 8009568:	4404      	add	r4, r0
 800956a:	dc1b      	bgt.n	80095a4 <_strtod_l+0x264>
 800956c:	230a      	movs	r3, #10
 800956e:	9906      	ldr	r1, [sp, #24]
 8009570:	fb03 2301 	mla	r3, r3, r1, r2
 8009574:	9306      	str	r3, [sp, #24]
 8009576:	2300      	movs	r3, #0
 8009578:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800957a:	4618      	mov	r0, r3
 800957c:	1c51      	adds	r1, r2, #1
 800957e:	9119      	str	r1, [sp, #100]	; 0x64
 8009580:	7852      	ldrb	r2, [r2, #1]
 8009582:	e7ca      	b.n	800951a <_strtod_l+0x1da>
 8009584:	4658      	mov	r0, fp
 8009586:	e7d3      	b.n	8009530 <_strtod_l+0x1f0>
 8009588:	2b08      	cmp	r3, #8
 800958a:	dc04      	bgt.n	8009596 <_strtod_l+0x256>
 800958c:	9f06      	ldr	r7, [sp, #24]
 800958e:	434f      	muls	r7, r1
 8009590:	9706      	str	r7, [sp, #24]
 8009592:	3301      	adds	r3, #1
 8009594:	e7e2      	b.n	800955c <_strtod_l+0x21c>
 8009596:	1c5f      	adds	r7, r3, #1
 8009598:	2f10      	cmp	r7, #16
 800959a:	bfde      	ittt	le
 800959c:	9f05      	ldrle	r7, [sp, #20]
 800959e:	434f      	mulle	r7, r1
 80095a0:	9705      	strle	r7, [sp, #20]
 80095a2:	e7f6      	b.n	8009592 <_strtod_l+0x252>
 80095a4:	2c10      	cmp	r4, #16
 80095a6:	bfdf      	itttt	le
 80095a8:	230a      	movle	r3, #10
 80095aa:	9905      	ldrle	r1, [sp, #20]
 80095ac:	fb03 2301 	mlale	r3, r3, r1, r2
 80095b0:	9305      	strle	r3, [sp, #20]
 80095b2:	e7e0      	b.n	8009576 <_strtod_l+0x236>
 80095b4:	2300      	movs	r3, #0
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	2301      	movs	r3, #1
 80095ba:	e77b      	b.n	80094b4 <_strtod_l+0x174>
 80095bc:	2700      	movs	r7, #0
 80095be:	1cb2      	adds	r2, r6, #2
 80095c0:	9219      	str	r2, [sp, #100]	; 0x64
 80095c2:	78b2      	ldrb	r2, [r6, #2]
 80095c4:	e784      	b.n	80094d0 <_strtod_l+0x190>
 80095c6:	bf00      	nop
 80095c8:	0800d100 	.word	0x0800d100
 80095cc:	0800ceb8 	.word	0x0800ceb8
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	2701      	movs	r7, #1
 80095d6:	e7f2      	b.n	80095be <_strtod_l+0x27e>
 80095d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095da:	1c51      	adds	r1, r2, #1
 80095dc:	9119      	str	r1, [sp, #100]	; 0x64
 80095de:	7852      	ldrb	r2, [r2, #1]
 80095e0:	2a30      	cmp	r2, #48	; 0x30
 80095e2:	d0f9      	beq.n	80095d8 <_strtod_l+0x298>
 80095e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80095e8:	2908      	cmp	r1, #8
 80095ea:	f63f af77 	bhi.w	80094dc <_strtod_l+0x19c>
 80095ee:	f04f 0e0a 	mov.w	lr, #10
 80095f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80095f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095f8:	9209      	str	r2, [sp, #36]	; 0x24
 80095fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095fc:	1c51      	adds	r1, r2, #1
 80095fe:	9119      	str	r1, [sp, #100]	; 0x64
 8009600:	7852      	ldrb	r2, [r2, #1]
 8009602:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009606:	2d09      	cmp	r5, #9
 8009608:	d935      	bls.n	8009676 <_strtod_l+0x336>
 800960a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800960c:	1b49      	subs	r1, r1, r5
 800960e:	2908      	cmp	r1, #8
 8009610:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009614:	dc02      	bgt.n	800961c <_strtod_l+0x2dc>
 8009616:	4565      	cmp	r5, ip
 8009618:	bfa8      	it	ge
 800961a:	4665      	movge	r5, ip
 800961c:	b107      	cbz	r7, 8009620 <_strtod_l+0x2e0>
 800961e:	426d      	negs	r5, r5
 8009620:	2c00      	cmp	r4, #0
 8009622:	d14c      	bne.n	80096be <_strtod_l+0x37e>
 8009624:	9907      	ldr	r1, [sp, #28]
 8009626:	4301      	orrs	r1, r0
 8009628:	f47f aecb 	bne.w	80093c2 <_strtod_l+0x82>
 800962c:	2b00      	cmp	r3, #0
 800962e:	f47f aee4 	bne.w	80093fa <_strtod_l+0xba>
 8009632:	2a69      	cmp	r2, #105	; 0x69
 8009634:	d026      	beq.n	8009684 <_strtod_l+0x344>
 8009636:	dc23      	bgt.n	8009680 <_strtod_l+0x340>
 8009638:	2a49      	cmp	r2, #73	; 0x49
 800963a:	d023      	beq.n	8009684 <_strtod_l+0x344>
 800963c:	2a4e      	cmp	r2, #78	; 0x4e
 800963e:	f47f aedc 	bne.w	80093fa <_strtod_l+0xba>
 8009642:	499d      	ldr	r1, [pc, #628]	; (80098b8 <_strtod_l+0x578>)
 8009644:	a819      	add	r0, sp, #100	; 0x64
 8009646:	f001 fe17 	bl	800b278 <__match>
 800964a:	2800      	cmp	r0, #0
 800964c:	f43f aed5 	beq.w	80093fa <_strtod_l+0xba>
 8009650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b28      	cmp	r3, #40	; 0x28
 8009656:	d12c      	bne.n	80096b2 <_strtod_l+0x372>
 8009658:	4998      	ldr	r1, [pc, #608]	; (80098bc <_strtod_l+0x57c>)
 800965a:	aa1c      	add	r2, sp, #112	; 0x70
 800965c:	a819      	add	r0, sp, #100	; 0x64
 800965e:	f001 fe1f 	bl	800b2a0 <__hexnan>
 8009662:	2805      	cmp	r0, #5
 8009664:	d125      	bne.n	80096b2 <_strtod_l+0x372>
 8009666:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009668:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800966c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009670:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009674:	e6a5      	b.n	80093c2 <_strtod_l+0x82>
 8009676:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800967a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800967e:	e7bc      	b.n	80095fa <_strtod_l+0x2ba>
 8009680:	2a6e      	cmp	r2, #110	; 0x6e
 8009682:	e7dc      	b.n	800963e <_strtod_l+0x2fe>
 8009684:	498e      	ldr	r1, [pc, #568]	; (80098c0 <_strtod_l+0x580>)
 8009686:	a819      	add	r0, sp, #100	; 0x64
 8009688:	f001 fdf6 	bl	800b278 <__match>
 800968c:	2800      	cmp	r0, #0
 800968e:	f43f aeb4 	beq.w	80093fa <_strtod_l+0xba>
 8009692:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009694:	498b      	ldr	r1, [pc, #556]	; (80098c4 <_strtod_l+0x584>)
 8009696:	3b01      	subs	r3, #1
 8009698:	a819      	add	r0, sp, #100	; 0x64
 800969a:	9319      	str	r3, [sp, #100]	; 0x64
 800969c:	f001 fdec 	bl	800b278 <__match>
 80096a0:	b910      	cbnz	r0, 80096a8 <_strtod_l+0x368>
 80096a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096a4:	3301      	adds	r3, #1
 80096a6:	9319      	str	r3, [sp, #100]	; 0x64
 80096a8:	f04f 0800 	mov.w	r8, #0
 80096ac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80098c8 <_strtod_l+0x588>
 80096b0:	e687      	b.n	80093c2 <_strtod_l+0x82>
 80096b2:	4886      	ldr	r0, [pc, #536]	; (80098cc <_strtod_l+0x58c>)
 80096b4:	f002 fdc0 	bl	800c238 <nan>
 80096b8:	4680      	mov	r8, r0
 80096ba:	4689      	mov	r9, r1
 80096bc:	e681      	b.n	80093c2 <_strtod_l+0x82>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	f1bb 0f00 	cmp.w	fp, #0
 80096c4:	bf08      	it	eq
 80096c6:	46a3      	moveq	fp, r4
 80096c8:	1aeb      	subs	r3, r5, r3
 80096ca:	2c10      	cmp	r4, #16
 80096cc:	9806      	ldr	r0, [sp, #24]
 80096ce:	4626      	mov	r6, r4
 80096d0:	9307      	str	r3, [sp, #28]
 80096d2:	bfa8      	it	ge
 80096d4:	2610      	movge	r6, #16
 80096d6:	f7f6 fe85 	bl	80003e4 <__aeabi_ui2d>
 80096da:	2c09      	cmp	r4, #9
 80096dc:	4680      	mov	r8, r0
 80096de:	4689      	mov	r9, r1
 80096e0:	dd13      	ble.n	800970a <_strtod_l+0x3ca>
 80096e2:	4b7b      	ldr	r3, [pc, #492]	; (80098d0 <_strtod_l+0x590>)
 80096e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096ec:	f7f6 fef4 	bl	80004d8 <__aeabi_dmul>
 80096f0:	4680      	mov	r8, r0
 80096f2:	9805      	ldr	r0, [sp, #20]
 80096f4:	4689      	mov	r9, r1
 80096f6:	f7f6 fe75 	bl	80003e4 <__aeabi_ui2d>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 fd33 	bl	800016c <__adddf3>
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	2c0f      	cmp	r4, #15
 800970c:	dc36      	bgt.n	800977c <_strtod_l+0x43c>
 800970e:	9b07      	ldr	r3, [sp, #28]
 8009710:	2b00      	cmp	r3, #0
 8009712:	f43f ae56 	beq.w	80093c2 <_strtod_l+0x82>
 8009716:	dd22      	ble.n	800975e <_strtod_l+0x41e>
 8009718:	2b16      	cmp	r3, #22
 800971a:	dc09      	bgt.n	8009730 <_strtod_l+0x3f0>
 800971c:	496c      	ldr	r1, [pc, #432]	; (80098d0 <_strtod_l+0x590>)
 800971e:	4642      	mov	r2, r8
 8009720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009724:	464b      	mov	r3, r9
 8009726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	e7c3      	b.n	80096b8 <_strtod_l+0x378>
 8009730:	9a07      	ldr	r2, [sp, #28]
 8009732:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009736:	4293      	cmp	r3, r2
 8009738:	db20      	blt.n	800977c <_strtod_l+0x43c>
 800973a:	4d65      	ldr	r5, [pc, #404]	; (80098d0 <_strtod_l+0x590>)
 800973c:	f1c4 040f 	rsb	r4, r4, #15
 8009740:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009744:	4642      	mov	r2, r8
 8009746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974a:	464b      	mov	r3, r9
 800974c:	f7f6 fec4 	bl	80004d8 <__aeabi_dmul>
 8009750:	9b07      	ldr	r3, [sp, #28]
 8009752:	1b1c      	subs	r4, r3, r4
 8009754:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800975c:	e7e5      	b.n	800972a <_strtod_l+0x3ea>
 800975e:	9b07      	ldr	r3, [sp, #28]
 8009760:	3316      	adds	r3, #22
 8009762:	db0b      	blt.n	800977c <_strtod_l+0x43c>
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	4640      	mov	r0, r8
 8009768:	1b5d      	subs	r5, r3, r5
 800976a:	4b59      	ldr	r3, [pc, #356]	; (80098d0 <_strtod_l+0x590>)
 800976c:	4649      	mov	r1, r9
 800976e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009772:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009776:	f7f6 ffd9 	bl	800072c <__aeabi_ddiv>
 800977a:	e79d      	b.n	80096b8 <_strtod_l+0x378>
 800977c:	9b07      	ldr	r3, [sp, #28]
 800977e:	1ba6      	subs	r6, r4, r6
 8009780:	441e      	add	r6, r3
 8009782:	2e00      	cmp	r6, #0
 8009784:	dd74      	ble.n	8009870 <_strtod_l+0x530>
 8009786:	f016 030f 	ands.w	r3, r6, #15
 800978a:	d00a      	beq.n	80097a2 <_strtod_l+0x462>
 800978c:	4950      	ldr	r1, [pc, #320]	; (80098d0 <_strtod_l+0x590>)
 800978e:	4642      	mov	r2, r8
 8009790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009798:	464b      	mov	r3, r9
 800979a:	f7f6 fe9d 	bl	80004d8 <__aeabi_dmul>
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	f036 060f 	bics.w	r6, r6, #15
 80097a6:	d052      	beq.n	800984e <_strtod_l+0x50e>
 80097a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80097ac:	dd27      	ble.n	80097fe <_strtod_l+0x4be>
 80097ae:	f04f 0b00 	mov.w	fp, #0
 80097b2:	f8cd b010 	str.w	fp, [sp, #16]
 80097b6:	f8cd b020 	str.w	fp, [sp, #32]
 80097ba:	f8cd b018 	str.w	fp, [sp, #24]
 80097be:	2322      	movs	r3, #34	; 0x22
 80097c0:	f04f 0800 	mov.w	r8, #0
 80097c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80098c8 <_strtod_l+0x588>
 80097c8:	f8ca 3000 	str.w	r3, [sl]
 80097cc:	9b08      	ldr	r3, [sp, #32]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f43f adf7 	beq.w	80093c2 <_strtod_l+0x82>
 80097d4:	4650      	mov	r0, sl
 80097d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80097d8:	f001 fe6a 	bl	800b4b0 <_Bfree>
 80097dc:	4650      	mov	r0, sl
 80097de:	9906      	ldr	r1, [sp, #24]
 80097e0:	f001 fe66 	bl	800b4b0 <_Bfree>
 80097e4:	4650      	mov	r0, sl
 80097e6:	9904      	ldr	r1, [sp, #16]
 80097e8:	f001 fe62 	bl	800b4b0 <_Bfree>
 80097ec:	4650      	mov	r0, sl
 80097ee:	9908      	ldr	r1, [sp, #32]
 80097f0:	f001 fe5e 	bl	800b4b0 <_Bfree>
 80097f4:	4659      	mov	r1, fp
 80097f6:	4650      	mov	r0, sl
 80097f8:	f001 fe5a 	bl	800b4b0 <_Bfree>
 80097fc:	e5e1      	b.n	80093c2 <_strtod_l+0x82>
 80097fe:	4b35      	ldr	r3, [pc, #212]	; (80098d4 <_strtod_l+0x594>)
 8009800:	4640      	mov	r0, r8
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	2300      	movs	r3, #0
 8009806:	4649      	mov	r1, r9
 8009808:	461f      	mov	r7, r3
 800980a:	1136      	asrs	r6, r6, #4
 800980c:	2e01      	cmp	r6, #1
 800980e:	dc21      	bgt.n	8009854 <_strtod_l+0x514>
 8009810:	b10b      	cbz	r3, 8009816 <_strtod_l+0x4d6>
 8009812:	4680      	mov	r8, r0
 8009814:	4689      	mov	r9, r1
 8009816:	4b2f      	ldr	r3, [pc, #188]	; (80098d4 <_strtod_l+0x594>)
 8009818:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800981c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009820:	4642      	mov	r2, r8
 8009822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009826:	464b      	mov	r3, r9
 8009828:	f7f6 fe56 	bl	80004d8 <__aeabi_dmul>
 800982c:	4b26      	ldr	r3, [pc, #152]	; (80098c8 <_strtod_l+0x588>)
 800982e:	460a      	mov	r2, r1
 8009830:	400b      	ands	r3, r1
 8009832:	4929      	ldr	r1, [pc, #164]	; (80098d8 <_strtod_l+0x598>)
 8009834:	4680      	mov	r8, r0
 8009836:	428b      	cmp	r3, r1
 8009838:	d8b9      	bhi.n	80097ae <_strtod_l+0x46e>
 800983a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800983e:	428b      	cmp	r3, r1
 8009840:	bf86      	itte	hi
 8009842:	f04f 38ff 	movhi.w	r8, #4294967295
 8009846:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80098dc <_strtod_l+0x59c>
 800984a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800984e:	2300      	movs	r3, #0
 8009850:	9305      	str	r3, [sp, #20]
 8009852:	e07f      	b.n	8009954 <_strtod_l+0x614>
 8009854:	07f2      	lsls	r2, r6, #31
 8009856:	d505      	bpl.n	8009864 <_strtod_l+0x524>
 8009858:	9b05      	ldr	r3, [sp, #20]
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fe3b 	bl	80004d8 <__aeabi_dmul>
 8009862:	2301      	movs	r3, #1
 8009864:	9a05      	ldr	r2, [sp, #20]
 8009866:	3701      	adds	r7, #1
 8009868:	3208      	adds	r2, #8
 800986a:	1076      	asrs	r6, r6, #1
 800986c:	9205      	str	r2, [sp, #20]
 800986e:	e7cd      	b.n	800980c <_strtod_l+0x4cc>
 8009870:	d0ed      	beq.n	800984e <_strtod_l+0x50e>
 8009872:	4276      	negs	r6, r6
 8009874:	f016 020f 	ands.w	r2, r6, #15
 8009878:	d00a      	beq.n	8009890 <_strtod_l+0x550>
 800987a:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <_strtod_l+0x590>)
 800987c:	4640      	mov	r0, r8
 800987e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009882:	4649      	mov	r1, r9
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 ff50 	bl	800072c <__aeabi_ddiv>
 800988c:	4680      	mov	r8, r0
 800988e:	4689      	mov	r9, r1
 8009890:	1136      	asrs	r6, r6, #4
 8009892:	d0dc      	beq.n	800984e <_strtod_l+0x50e>
 8009894:	2e1f      	cmp	r6, #31
 8009896:	dd23      	ble.n	80098e0 <_strtod_l+0x5a0>
 8009898:	f04f 0b00 	mov.w	fp, #0
 800989c:	f8cd b010 	str.w	fp, [sp, #16]
 80098a0:	f8cd b020 	str.w	fp, [sp, #32]
 80098a4:	f8cd b018 	str.w	fp, [sp, #24]
 80098a8:	2322      	movs	r3, #34	; 0x22
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	f04f 0900 	mov.w	r9, #0
 80098b2:	f8ca 3000 	str.w	r3, [sl]
 80098b6:	e789      	b.n	80097cc <_strtod_l+0x48c>
 80098b8:	0800ce89 	.word	0x0800ce89
 80098bc:	0800cecc 	.word	0x0800cecc
 80098c0:	0800ce81 	.word	0x0800ce81
 80098c4:	0800d00c 	.word	0x0800d00c
 80098c8:	7ff00000 	.word	0x7ff00000
 80098cc:	0800d2b8 	.word	0x0800d2b8
 80098d0:	0800d198 	.word	0x0800d198
 80098d4:	0800d170 	.word	0x0800d170
 80098d8:	7ca00000 	.word	0x7ca00000
 80098dc:	7fefffff 	.word	0x7fefffff
 80098e0:	f016 0310 	ands.w	r3, r6, #16
 80098e4:	bf18      	it	ne
 80098e6:	236a      	movne	r3, #106	; 0x6a
 80098e8:	4640      	mov	r0, r8
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	4649      	mov	r1, r9
 80098ee:	2300      	movs	r3, #0
 80098f0:	4fb0      	ldr	r7, [pc, #704]	; (8009bb4 <_strtod_l+0x874>)
 80098f2:	07f2      	lsls	r2, r6, #31
 80098f4:	d504      	bpl.n	8009900 <_strtod_l+0x5c0>
 80098f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098fa:	f7f6 fded 	bl	80004d8 <__aeabi_dmul>
 80098fe:	2301      	movs	r3, #1
 8009900:	1076      	asrs	r6, r6, #1
 8009902:	f107 0708 	add.w	r7, r7, #8
 8009906:	d1f4      	bne.n	80098f2 <_strtod_l+0x5b2>
 8009908:	b10b      	cbz	r3, 800990e <_strtod_l+0x5ce>
 800990a:	4680      	mov	r8, r0
 800990c:	4689      	mov	r9, r1
 800990e:	9b05      	ldr	r3, [sp, #20]
 8009910:	b1c3      	cbz	r3, 8009944 <_strtod_l+0x604>
 8009912:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009916:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800991a:	2b00      	cmp	r3, #0
 800991c:	4649      	mov	r1, r9
 800991e:	dd11      	ble.n	8009944 <_strtod_l+0x604>
 8009920:	2b1f      	cmp	r3, #31
 8009922:	f340 8127 	ble.w	8009b74 <_strtod_l+0x834>
 8009926:	2b34      	cmp	r3, #52	; 0x34
 8009928:	bfd8      	it	le
 800992a:	f04f 33ff 	movle.w	r3, #4294967295
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	bfcf      	iteee	gt
 8009934:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800993c:	fa03 f202 	lslle.w	r2, r3, r2
 8009940:	ea02 0901 	andle.w	r9, r2, r1
 8009944:	2200      	movs	r2, #0
 8009946:	2300      	movs	r3, #0
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f7 f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8009950:	2800      	cmp	r0, #0
 8009952:	d1a1      	bne.n	8009898 <_strtod_l+0x558>
 8009954:	9b06      	ldr	r3, [sp, #24]
 8009956:	465a      	mov	r2, fp
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	4650      	mov	r0, sl
 800995c:	4623      	mov	r3, r4
 800995e:	9908      	ldr	r1, [sp, #32]
 8009960:	f001 fe0e 	bl	800b580 <__s2b>
 8009964:	9008      	str	r0, [sp, #32]
 8009966:	2800      	cmp	r0, #0
 8009968:	f43f af21 	beq.w	80097ae <_strtod_l+0x46e>
 800996c:	9b04      	ldr	r3, [sp, #16]
 800996e:	f04f 0b00 	mov.w	fp, #0
 8009972:	1b5d      	subs	r5, r3, r5
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	f8cd b010 	str.w	fp, [sp, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	bfb4      	ite	lt
 800997e:	462b      	movlt	r3, r5
 8009980:	2300      	movge	r3, #0
 8009982:	930e      	str	r3, [sp, #56]	; 0x38
 8009984:	9b07      	ldr	r3, [sp, #28]
 8009986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800998a:	9314      	str	r3, [sp, #80]	; 0x50
 800998c:	9b08      	ldr	r3, [sp, #32]
 800998e:	4650      	mov	r0, sl
 8009990:	6859      	ldr	r1, [r3, #4]
 8009992:	f001 fd4d 	bl	800b430 <_Balloc>
 8009996:	9006      	str	r0, [sp, #24]
 8009998:	2800      	cmp	r0, #0
 800999a:	f43f af10 	beq.w	80097be <_strtod_l+0x47e>
 800999e:	9b08      	ldr	r3, [sp, #32]
 80099a0:	300c      	adds	r0, #12
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	f103 010c 	add.w	r1, r3, #12
 80099a8:	3202      	adds	r2, #2
 80099aa:	0092      	lsls	r2, r2, #2
 80099ac:	f7fe fdf6 	bl	800859c <memcpy>
 80099b0:	ab1c      	add	r3, sp, #112	; 0x70
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	4650      	mov	r0, sl
 80099be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80099c2:	f002 f91f 	bl	800bc04 <__d2b>
 80099c6:	901a      	str	r0, [sp, #104]	; 0x68
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f43f aef8 	beq.w	80097be <_strtod_l+0x47e>
 80099ce:	2101      	movs	r1, #1
 80099d0:	4650      	mov	r0, sl
 80099d2:	f001 fe6d 	bl	800b6b0 <__i2b>
 80099d6:	4603      	mov	r3, r0
 80099d8:	9004      	str	r0, [sp, #16]
 80099da:	2800      	cmp	r0, #0
 80099dc:	f43f aeef 	beq.w	80097be <_strtod_l+0x47e>
 80099e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80099e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	bfab      	itete	ge
 80099e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80099ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80099ec:	18ee      	addge	r6, r5, r3
 80099ee:	1b5c      	sublt	r4, r3, r5
 80099f0:	9b05      	ldr	r3, [sp, #20]
 80099f2:	bfa8      	it	ge
 80099f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80099f6:	eba5 0503 	sub.w	r5, r5, r3
 80099fa:	4415      	add	r5, r2
 80099fc:	4b6e      	ldr	r3, [pc, #440]	; (8009bb8 <_strtod_l+0x878>)
 80099fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8009a02:	bfb8      	it	lt
 8009a04:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009a06:	429d      	cmp	r5, r3
 8009a08:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a0c:	f280 80c4 	bge.w	8009b98 <_strtod_l+0x858>
 8009a10:	1b5b      	subs	r3, r3, r5
 8009a12:	2b1f      	cmp	r3, #31
 8009a14:	f04f 0701 	mov.w	r7, #1
 8009a18:	eba2 0203 	sub.w	r2, r2, r3
 8009a1c:	f300 80b1 	bgt.w	8009b82 <_strtod_l+0x842>
 8009a20:	2500      	movs	r5, #0
 8009a22:	fa07 f303 	lsl.w	r3, r7, r3
 8009a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a28:	18b7      	adds	r7, r6, r2
 8009a2a:	9b05      	ldr	r3, [sp, #20]
 8009a2c:	42be      	cmp	r6, r7
 8009a2e:	4414      	add	r4, r2
 8009a30:	441c      	add	r4, r3
 8009a32:	4633      	mov	r3, r6
 8009a34:	bfa8      	it	ge
 8009a36:	463b      	movge	r3, r7
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	bfa8      	it	ge
 8009a3c:	4623      	movge	r3, r4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfc2      	ittt	gt
 8009a42:	1aff      	subgt	r7, r7, r3
 8009a44:	1ae4      	subgt	r4, r4, r3
 8009a46:	1af6      	subgt	r6, r6, r3
 8009a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dd17      	ble.n	8009a7e <_strtod_l+0x73e>
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4650      	mov	r0, sl
 8009a52:	9904      	ldr	r1, [sp, #16]
 8009a54:	f001 feea 	bl	800b82c <__pow5mult>
 8009a58:	9004      	str	r0, [sp, #16]
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f43f aeaf 	beq.w	80097be <_strtod_l+0x47e>
 8009a60:	4601      	mov	r1, r0
 8009a62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a64:	4650      	mov	r0, sl
 8009a66:	f001 fe39 	bl	800b6dc <__multiply>
 8009a6a:	9009      	str	r0, [sp, #36]	; 0x24
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f43f aea6 	beq.w	80097be <_strtod_l+0x47e>
 8009a72:	4650      	mov	r0, sl
 8009a74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a76:	f001 fd1b 	bl	800b4b0 <_Bfree>
 8009a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7e:	2f00      	cmp	r7, #0
 8009a80:	f300 808e 	bgt.w	8009ba0 <_strtod_l+0x860>
 8009a84:	9b07      	ldr	r3, [sp, #28]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dd08      	ble.n	8009a9c <_strtod_l+0x75c>
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a8e:	9906      	ldr	r1, [sp, #24]
 8009a90:	f001 fecc 	bl	800b82c <__pow5mult>
 8009a94:	9006      	str	r0, [sp, #24]
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f ae91 	beq.w	80097be <_strtod_l+0x47e>
 8009a9c:	2c00      	cmp	r4, #0
 8009a9e:	dd08      	ble.n	8009ab2 <_strtod_l+0x772>
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	9906      	ldr	r1, [sp, #24]
 8009aa6:	f001 ff1b 	bl	800b8e0 <__lshift>
 8009aaa:	9006      	str	r0, [sp, #24]
 8009aac:	2800      	cmp	r0, #0
 8009aae:	f43f ae86 	beq.w	80097be <_strtod_l+0x47e>
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	dd08      	ble.n	8009ac8 <_strtod_l+0x788>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	4650      	mov	r0, sl
 8009aba:	9904      	ldr	r1, [sp, #16]
 8009abc:	f001 ff10 	bl	800b8e0 <__lshift>
 8009ac0:	9004      	str	r0, [sp, #16]
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f43f ae7b 	beq.w	80097be <_strtod_l+0x47e>
 8009ac8:	4650      	mov	r0, sl
 8009aca:	9a06      	ldr	r2, [sp, #24]
 8009acc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ace:	f001 ff93 	bl	800b9f8 <__mdiff>
 8009ad2:	4683      	mov	fp, r0
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f43f ae72 	beq.w	80097be <_strtod_l+0x47e>
 8009ada:	2400      	movs	r4, #0
 8009adc:	68c3      	ldr	r3, [r0, #12]
 8009ade:	9904      	ldr	r1, [sp, #16]
 8009ae0:	60c4      	str	r4, [r0, #12]
 8009ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ae4:	f001 ff6c 	bl	800b9c0 <__mcmp>
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	da6b      	bge.n	8009bc4 <_strtod_l+0x884>
 8009aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aee:	ea53 0308 	orrs.w	r3, r3, r8
 8009af2:	f040 8091 	bne.w	8009c18 <_strtod_l+0x8d8>
 8009af6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f040 808c 	bne.w	8009c18 <_strtod_l+0x8d8>
 8009b00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b04:	0d1b      	lsrs	r3, r3, #20
 8009b06:	051b      	lsls	r3, r3, #20
 8009b08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b0c:	f240 8084 	bls.w	8009c18 <_strtod_l+0x8d8>
 8009b10:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009b14:	b91b      	cbnz	r3, 8009b1e <_strtod_l+0x7de>
 8009b16:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	dd7c      	ble.n	8009c18 <_strtod_l+0x8d8>
 8009b1e:	4659      	mov	r1, fp
 8009b20:	2201      	movs	r2, #1
 8009b22:	4650      	mov	r0, sl
 8009b24:	f001 fedc 	bl	800b8e0 <__lshift>
 8009b28:	9904      	ldr	r1, [sp, #16]
 8009b2a:	4683      	mov	fp, r0
 8009b2c:	f001 ff48 	bl	800b9c0 <__mcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	dd71      	ble.n	8009c18 <_strtod_l+0x8d8>
 8009b34:	9905      	ldr	r1, [sp, #20]
 8009b36:	464b      	mov	r3, r9
 8009b38:	4a20      	ldr	r2, [pc, #128]	; (8009bbc <_strtod_l+0x87c>)
 8009b3a:	2900      	cmp	r1, #0
 8009b3c:	f000 808c 	beq.w	8009c58 <_strtod_l+0x918>
 8009b40:	ea02 0109 	and.w	r1, r2, r9
 8009b44:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b48:	f300 8086 	bgt.w	8009c58 <_strtod_l+0x918>
 8009b4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b50:	f77f aeaa 	ble.w	80098a8 <_strtod_l+0x568>
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	4b19      	ldr	r3, [pc, #100]	; (8009bc0 <_strtod_l+0x880>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f7f6 fcbc 	bl	80004d8 <__aeabi_dmul>
 8009b60:	460b      	mov	r3, r1
 8009b62:	4303      	orrs	r3, r0
 8009b64:	bf08      	it	eq
 8009b66:	2322      	moveq	r3, #34	; 0x22
 8009b68:	4680      	mov	r8, r0
 8009b6a:	4689      	mov	r9, r1
 8009b6c:	bf08      	it	eq
 8009b6e:	f8ca 3000 	streq.w	r3, [sl]
 8009b72:	e62f      	b.n	80097d4 <_strtod_l+0x494>
 8009b74:	f04f 32ff 	mov.w	r2, #4294967295
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	ea03 0808 	and.w	r8, r3, r8
 8009b80:	e6e0      	b.n	8009944 <_strtod_l+0x604>
 8009b82:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009b86:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009b8a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009b8e:	35e2      	adds	r5, #226	; 0xe2
 8009b90:	fa07 f505 	lsl.w	r5, r7, r5
 8009b94:	970f      	str	r7, [sp, #60]	; 0x3c
 8009b96:	e747      	b.n	8009a28 <_strtod_l+0x6e8>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	2500      	movs	r5, #0
 8009b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b9e:	e743      	b.n	8009a28 <_strtod_l+0x6e8>
 8009ba0:	463a      	mov	r2, r7
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ba6:	f001 fe9b 	bl	800b8e0 <__lshift>
 8009baa:	901a      	str	r0, [sp, #104]	; 0x68
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f47f af69 	bne.w	8009a84 <_strtod_l+0x744>
 8009bb2:	e604      	b.n	80097be <_strtod_l+0x47e>
 8009bb4:	0800cee0 	.word	0x0800cee0
 8009bb8:	fffffc02 	.word	0xfffffc02
 8009bbc:	7ff00000 	.word	0x7ff00000
 8009bc0:	39500000 	.word	0x39500000
 8009bc4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009bc8:	d165      	bne.n	8009c96 <_strtod_l+0x956>
 8009bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bd0:	b35a      	cbz	r2, 8009c2a <_strtod_l+0x8ea>
 8009bd2:	4a99      	ldr	r2, [pc, #612]	; (8009e38 <_strtod_l+0xaf8>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d12b      	bne.n	8009c30 <_strtod_l+0x8f0>
 8009bd8:	9b05      	ldr	r3, [sp, #20]
 8009bda:	4641      	mov	r1, r8
 8009bdc:	b303      	cbz	r3, 8009c20 <_strtod_l+0x8e0>
 8009bde:	464a      	mov	r2, r9
 8009be0:	4b96      	ldr	r3, [pc, #600]	; (8009e3c <_strtod_l+0xafc>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009be8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bec:	d81b      	bhi.n	8009c26 <_strtod_l+0x8e6>
 8009bee:	0d1b      	lsrs	r3, r3, #20
 8009bf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	d119      	bne.n	8009c30 <_strtod_l+0x8f0>
 8009bfc:	4b90      	ldr	r3, [pc, #576]	; (8009e40 <_strtod_l+0xb00>)
 8009bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d102      	bne.n	8009c0a <_strtod_l+0x8ca>
 8009c04:	3101      	adds	r1, #1
 8009c06:	f43f adda 	beq.w	80097be <_strtod_l+0x47e>
 8009c0a:	f04f 0800 	mov.w	r8, #0
 8009c0e:	4b8b      	ldr	r3, [pc, #556]	; (8009e3c <_strtod_l+0xafc>)
 8009c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c12:	401a      	ands	r2, r3
 8009c14:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009c18:	9b05      	ldr	r3, [sp, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d19a      	bne.n	8009b54 <_strtod_l+0x814>
 8009c1e:	e5d9      	b.n	80097d4 <_strtod_l+0x494>
 8009c20:	f04f 33ff 	mov.w	r3, #4294967295
 8009c24:	e7e8      	b.n	8009bf8 <_strtod_l+0x8b8>
 8009c26:	4613      	mov	r3, r2
 8009c28:	e7e6      	b.n	8009bf8 <_strtod_l+0x8b8>
 8009c2a:	ea53 0308 	orrs.w	r3, r3, r8
 8009c2e:	d081      	beq.n	8009b34 <_strtod_l+0x7f4>
 8009c30:	b1e5      	cbz	r5, 8009c6c <_strtod_l+0x92c>
 8009c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c34:	421d      	tst	r5, r3
 8009c36:	d0ef      	beq.n	8009c18 <_strtod_l+0x8d8>
 8009c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	9a05      	ldr	r2, [sp, #20]
 8009c40:	b1c3      	cbz	r3, 8009c74 <_strtod_l+0x934>
 8009c42:	f7ff fb5b 	bl	80092fc <sulp>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c4e:	f7f6 fa8d 	bl	800016c <__adddf3>
 8009c52:	4680      	mov	r8, r0
 8009c54:	4689      	mov	r9, r1
 8009c56:	e7df      	b.n	8009c18 <_strtod_l+0x8d8>
 8009c58:	4013      	ands	r3, r2
 8009c5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c5e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009c62:	f04f 38ff 	mov.w	r8, #4294967295
 8009c66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009c6a:	e7d5      	b.n	8009c18 <_strtod_l+0x8d8>
 8009c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c6e:	ea13 0f08 	tst.w	r3, r8
 8009c72:	e7e0      	b.n	8009c36 <_strtod_l+0x8f6>
 8009c74:	f7ff fb42 	bl	80092fc <sulp>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c80:	f7f6 fa72 	bl	8000168 <__aeabi_dsub>
 8009c84:	2200      	movs	r2, #0
 8009c86:	2300      	movs	r3, #0
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4689      	mov	r9, r1
 8009c8c:	f7f6 fe8c 	bl	80009a8 <__aeabi_dcmpeq>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d0c1      	beq.n	8009c18 <_strtod_l+0x8d8>
 8009c94:	e608      	b.n	80098a8 <_strtod_l+0x568>
 8009c96:	4658      	mov	r0, fp
 8009c98:	9904      	ldr	r1, [sp, #16]
 8009c9a:	f002 f80f 	bl	800bcbc <__ratio>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	f7f6 fe92 	bl	80009d0 <__aeabi_dcmple>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d070      	beq.n	8009d92 <_strtod_l+0xa52>
 8009cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d042      	beq.n	8009d3c <_strtod_l+0x9fc>
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	4f62      	ldr	r7, [pc, #392]	; (8009e44 <_strtod_l+0xb04>)
 8009cba:	4d62      	ldr	r5, [pc, #392]	; (8009e44 <_strtod_l+0xb04>)
 8009cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cc2:	0d1b      	lsrs	r3, r3, #20
 8009cc4:	051b      	lsls	r3, r3, #20
 8009cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cca:	4b5f      	ldr	r3, [pc, #380]	; (8009e48 <_strtod_l+0xb08>)
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	f040 80c3 	bne.w	8009e58 <_strtod_l+0xb18>
 8009cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009cda:	4649      	mov	r1, r9
 8009cdc:	f001 ff18 	bl	800bb10 <__ulp>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 fbf6 	bl	80004d8 <__aeabi_dmul>
 8009cec:	4642      	mov	r2, r8
 8009cee:	464b      	mov	r3, r9
 8009cf0:	f7f6 fa3c 	bl	800016c <__adddf3>
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4951      	ldr	r1, [pc, #324]	; (8009e3c <_strtod_l+0xafc>)
 8009cf8:	4a54      	ldr	r2, [pc, #336]	; (8009e4c <_strtod_l+0xb0c>)
 8009cfa:	4019      	ands	r1, r3
 8009cfc:	4291      	cmp	r1, r2
 8009cfe:	4680      	mov	r8, r0
 8009d00:	d95d      	bls.n	8009dbe <_strtod_l+0xa7e>
 8009d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d04:	4b4e      	ldr	r3, [pc, #312]	; (8009e40 <_strtod_l+0xb00>)
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d103      	bne.n	8009d12 <_strtod_l+0x9d2>
 8009d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	f43f ad56 	beq.w	80097be <_strtod_l+0x47e>
 8009d12:	f04f 38ff 	mov.w	r8, #4294967295
 8009d16:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009e40 <_strtod_l+0xb00>
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d1e:	f001 fbc7 	bl	800b4b0 <_Bfree>
 8009d22:	4650      	mov	r0, sl
 8009d24:	9906      	ldr	r1, [sp, #24]
 8009d26:	f001 fbc3 	bl	800b4b0 <_Bfree>
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	9904      	ldr	r1, [sp, #16]
 8009d2e:	f001 fbbf 	bl	800b4b0 <_Bfree>
 8009d32:	4659      	mov	r1, fp
 8009d34:	4650      	mov	r0, sl
 8009d36:	f001 fbbb 	bl	800b4b0 <_Bfree>
 8009d3a:	e627      	b.n	800998c <_strtod_l+0x64c>
 8009d3c:	f1b8 0f00 	cmp.w	r8, #0
 8009d40:	d119      	bne.n	8009d76 <_strtod_l+0xa36>
 8009d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d48:	b9e3      	cbnz	r3, 8009d84 <_strtod_l+0xa44>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	4b3c      	ldr	r3, [pc, #240]	; (8009e44 <_strtod_l+0xb04>)
 8009d52:	f7f6 fe33 	bl	80009bc <__aeabi_dcmplt>
 8009d56:	b9c8      	cbnz	r0, 8009d8c <_strtod_l+0xa4c>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4b3c      	ldr	r3, [pc, #240]	; (8009e50 <_strtod_l+0xb10>)
 8009d60:	f7f6 fbba 	bl	80004d8 <__aeabi_dmul>
 8009d64:	4604      	mov	r4, r0
 8009d66:	460d      	mov	r5, r1
 8009d68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009d6c:	9416      	str	r4, [sp, #88]	; 0x58
 8009d6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d70:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009d74:	e7a2      	b.n	8009cbc <_strtod_l+0x97c>
 8009d76:	f1b8 0f01 	cmp.w	r8, #1
 8009d7a:	d103      	bne.n	8009d84 <_strtod_l+0xa44>
 8009d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f43f ad92 	beq.w	80098a8 <_strtod_l+0x568>
 8009d84:	2600      	movs	r6, #0
 8009d86:	2400      	movs	r4, #0
 8009d88:	4f32      	ldr	r7, [pc, #200]	; (8009e54 <_strtod_l+0xb14>)
 8009d8a:	e796      	b.n	8009cba <_strtod_l+0x97a>
 8009d8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009d8e:	4d30      	ldr	r5, [pc, #192]	; (8009e50 <_strtod_l+0xb10>)
 8009d90:	e7ea      	b.n	8009d68 <_strtod_l+0xa28>
 8009d92:	4b2f      	ldr	r3, [pc, #188]	; (8009e50 <_strtod_l+0xb10>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fb9d 	bl	80004d8 <__aeabi_dmul>
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	b933      	cbnz	r3, 8009db4 <_strtod_l+0xa74>
 8009da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009daa:	9010      	str	r0, [sp, #64]	; 0x40
 8009dac:	9311      	str	r3, [sp, #68]	; 0x44
 8009dae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009db2:	e783      	b.n	8009cbc <_strtod_l+0x97c>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009dbc:	e7f7      	b.n	8009dae <_strtod_l+0xa6e>
 8009dbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009dc2:	9b05      	ldr	r3, [sp, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1a8      	bne.n	8009d1a <_strtod_l+0x9da>
 8009dc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dce:	0d1b      	lsrs	r3, r3, #20
 8009dd0:	051b      	lsls	r3, r3, #20
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d1a1      	bne.n	8009d1a <_strtod_l+0x9da>
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fec5 	bl	8000b68 <__aeabi_d2lz>
 8009dde:	f7f6 fb4d 	bl	800047c <__aeabi_l2d>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 f9bd 	bl	8000168 <__aeabi_dsub>
 8009dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009df4:	ea43 0308 	orr.w	r3, r3, r8
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	460d      	mov	r5, r1
 8009dfe:	d066      	beq.n	8009ece <_strtod_l+0xb8e>
 8009e00:	a309      	add	r3, pc, #36	; (adr r3, 8009e28 <_strtod_l+0xae8>)
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	f7f6 fdd9 	bl	80009bc <__aeabi_dcmplt>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	f47f ace2 	bne.w	80097d4 <_strtod_l+0x494>
 8009e10:	a307      	add	r3, pc, #28	; (adr r3, 8009e30 <_strtod_l+0xaf0>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fded 	bl	80009f8 <__aeabi_dcmpgt>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f43f af7b 	beq.w	8009d1a <_strtod_l+0x9da>
 8009e24:	e4d6      	b.n	80097d4 <_strtod_l+0x494>
 8009e26:	bf00      	nop
 8009e28:	94a03595 	.word	0x94a03595
 8009e2c:	3fdfffff 	.word	0x3fdfffff
 8009e30:	35afe535 	.word	0x35afe535
 8009e34:	3fe00000 	.word	0x3fe00000
 8009e38:	000fffff 	.word	0x000fffff
 8009e3c:	7ff00000 	.word	0x7ff00000
 8009e40:	7fefffff 	.word	0x7fefffff
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	7fe00000 	.word	0x7fe00000
 8009e4c:	7c9fffff 	.word	0x7c9fffff
 8009e50:	3fe00000 	.word	0x3fe00000
 8009e54:	bff00000 	.word	0xbff00000
 8009e58:	9b05      	ldr	r3, [sp, #20]
 8009e5a:	b313      	cbz	r3, 8009ea2 <_strtod_l+0xb62>
 8009e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e62:	d81e      	bhi.n	8009ea2 <_strtod_l+0xb62>
 8009e64:	a326      	add	r3, pc, #152	; (adr r3, 8009f00 <_strtod_l+0xbc0>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	f7f6 fdaf 	bl	80009d0 <__aeabi_dcmple>
 8009e72:	b190      	cbz	r0, 8009e9a <_strtod_l+0xb5a>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7f6 fe06 	bl	8000a88 <__aeabi_d2uiz>
 8009e7c:	2801      	cmp	r0, #1
 8009e7e:	bf38      	it	cc
 8009e80:	2001      	movcc	r0, #1
 8009e82:	f7f6 faaf 	bl	80003e4 <__aeabi_ui2d>
 8009e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	b9d3      	cbnz	r3, 8009ec4 <_strtod_l+0xb84>
 8009e8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e92:	9012      	str	r0, [sp, #72]	; 0x48
 8009e94:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009e9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e9c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009ea0:	1a9f      	subs	r7, r3, r2
 8009ea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ea6:	f001 fe33 	bl	800bb10 <__ulp>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	f7f6 fb11 	bl	80004d8 <__aeabi_dmul>
 8009eb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009eba:	f7f6 f957 	bl	800016c <__adddf3>
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4689      	mov	r9, r1
 8009ec2:	e77e      	b.n	8009dc2 <_strtod_l+0xa82>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009ecc:	e7e3      	b.n	8009e96 <_strtod_l+0xb56>
 8009ece:	a30e      	add	r3, pc, #56	; (adr r3, 8009f08 <_strtod_l+0xbc8>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 fd72 	bl	80009bc <__aeabi_dcmplt>
 8009ed8:	e7a1      	b.n	8009e1e <_strtod_l+0xade>
 8009eda:	2300      	movs	r3, #0
 8009edc:	930a      	str	r3, [sp, #40]	; 0x28
 8009ede:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ee0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	f7ff ba71 	b.w	80093ca <_strtod_l+0x8a>
 8009ee8:	2a65      	cmp	r2, #101	; 0x65
 8009eea:	f43f ab63 	beq.w	80095b4 <_strtod_l+0x274>
 8009eee:	2a45      	cmp	r2, #69	; 0x45
 8009ef0:	f43f ab60 	beq.w	80095b4 <_strtod_l+0x274>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f7ff bb95 	b.w	8009624 <_strtod_l+0x2e4>
 8009efa:	bf00      	nop
 8009efc:	f3af 8000 	nop.w
 8009f00:	ffc00000 	.word	0xffc00000
 8009f04:	41dfffff 	.word	0x41dfffff
 8009f08:	94a03595 	.word	0x94a03595
 8009f0c:	3fcfffff 	.word	0x3fcfffff

08009f10 <_strtod_r>:
 8009f10:	4b01      	ldr	r3, [pc, #4]	; (8009f18 <_strtod_r+0x8>)
 8009f12:	f7ff ba15 	b.w	8009340 <_strtod_l>
 8009f16:	bf00      	nop
 8009f18:	20000334 	.word	0x20000334

08009f1c <_strtol_l.constprop.0>:
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f22:	4680      	mov	r8, r0
 8009f24:	d001      	beq.n	8009f2a <_strtol_l.constprop.0+0xe>
 8009f26:	2b24      	cmp	r3, #36	; 0x24
 8009f28:	d906      	bls.n	8009f38 <_strtol_l.constprop.0+0x1c>
 8009f2a:	f7fe fb0d 	bl	8008548 <__errno>
 8009f2e:	2316      	movs	r3, #22
 8009f30:	6003      	str	r3, [r0, #0]
 8009f32:	2000      	movs	r0, #0
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4f35      	ldr	r7, [pc, #212]	; (800a010 <_strtol_l.constprop.0+0xf4>)
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f42:	5de6      	ldrb	r6, [r4, r7]
 8009f44:	f016 0608 	ands.w	r6, r6, #8
 8009f48:	d1f8      	bne.n	8009f3c <_strtol_l.constprop.0+0x20>
 8009f4a:	2c2d      	cmp	r4, #45	; 0x2d
 8009f4c:	d12f      	bne.n	8009fae <_strtol_l.constprop.0+0x92>
 8009f4e:	2601      	movs	r6, #1
 8009f50:	782c      	ldrb	r4, [r5, #0]
 8009f52:	1c85      	adds	r5, r0, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d057      	beq.n	800a008 <_strtol_l.constprop.0+0xec>
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	d109      	bne.n	8009f70 <_strtol_l.constprop.0+0x54>
 8009f5c:	2c30      	cmp	r4, #48	; 0x30
 8009f5e:	d107      	bne.n	8009f70 <_strtol_l.constprop.0+0x54>
 8009f60:	7828      	ldrb	r0, [r5, #0]
 8009f62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009f66:	2858      	cmp	r0, #88	; 0x58
 8009f68:	d149      	bne.n	8009ffe <_strtol_l.constprop.0+0xe2>
 8009f6a:	2310      	movs	r3, #16
 8009f6c:	786c      	ldrb	r4, [r5, #1]
 8009f6e:	3502      	adds	r5, #2
 8009f70:	2700      	movs	r7, #0
 8009f72:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009f76:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009f7a:	fbbe f9f3 	udiv	r9, lr, r3
 8009f7e:	4638      	mov	r0, r7
 8009f80:	fb03 ea19 	mls	sl, r3, r9, lr
 8009f84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f88:	f1bc 0f09 	cmp.w	ip, #9
 8009f8c:	d814      	bhi.n	8009fb8 <_strtol_l.constprop.0+0x9c>
 8009f8e:	4664      	mov	r4, ip
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	dd22      	ble.n	8009fda <_strtol_l.constprop.0+0xbe>
 8009f94:	2f00      	cmp	r7, #0
 8009f96:	db1d      	blt.n	8009fd4 <_strtol_l.constprop.0+0xb8>
 8009f98:	4581      	cmp	r9, r0
 8009f9a:	d31b      	bcc.n	8009fd4 <_strtol_l.constprop.0+0xb8>
 8009f9c:	d101      	bne.n	8009fa2 <_strtol_l.constprop.0+0x86>
 8009f9e:	45a2      	cmp	sl, r4
 8009fa0:	db18      	blt.n	8009fd4 <_strtol_l.constprop.0+0xb8>
 8009fa2:	2701      	movs	r7, #1
 8009fa4:	fb00 4003 	mla	r0, r0, r3, r4
 8009fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fac:	e7ea      	b.n	8009f84 <_strtol_l.constprop.0+0x68>
 8009fae:	2c2b      	cmp	r4, #43	; 0x2b
 8009fb0:	bf04      	itt	eq
 8009fb2:	782c      	ldrbeq	r4, [r5, #0]
 8009fb4:	1c85      	addeq	r5, r0, #2
 8009fb6:	e7cd      	b.n	8009f54 <_strtol_l.constprop.0+0x38>
 8009fb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009fbc:	f1bc 0f19 	cmp.w	ip, #25
 8009fc0:	d801      	bhi.n	8009fc6 <_strtol_l.constprop.0+0xaa>
 8009fc2:	3c37      	subs	r4, #55	; 0x37
 8009fc4:	e7e4      	b.n	8009f90 <_strtol_l.constprop.0+0x74>
 8009fc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009fca:	f1bc 0f19 	cmp.w	ip, #25
 8009fce:	d804      	bhi.n	8009fda <_strtol_l.constprop.0+0xbe>
 8009fd0:	3c57      	subs	r4, #87	; 0x57
 8009fd2:	e7dd      	b.n	8009f90 <_strtol_l.constprop.0+0x74>
 8009fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8009fd8:	e7e6      	b.n	8009fa8 <_strtol_l.constprop.0+0x8c>
 8009fda:	2f00      	cmp	r7, #0
 8009fdc:	da07      	bge.n	8009fee <_strtol_l.constprop.0+0xd2>
 8009fde:	2322      	movs	r3, #34	; 0x22
 8009fe0:	4670      	mov	r0, lr
 8009fe2:	f8c8 3000 	str.w	r3, [r8]
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d0a4      	beq.n	8009f34 <_strtol_l.constprop.0+0x18>
 8009fea:	1e69      	subs	r1, r5, #1
 8009fec:	e005      	b.n	8009ffa <_strtol_l.constprop.0+0xde>
 8009fee:	b106      	cbz	r6, 8009ff2 <_strtol_l.constprop.0+0xd6>
 8009ff0:	4240      	negs	r0, r0
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	d09e      	beq.n	8009f34 <_strtol_l.constprop.0+0x18>
 8009ff6:	2f00      	cmp	r7, #0
 8009ff8:	d1f7      	bne.n	8009fea <_strtol_l.constprop.0+0xce>
 8009ffa:	6011      	str	r1, [r2, #0]
 8009ffc:	e79a      	b.n	8009f34 <_strtol_l.constprop.0+0x18>
 8009ffe:	2430      	movs	r4, #48	; 0x30
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1b5      	bne.n	8009f70 <_strtol_l.constprop.0+0x54>
 800a004:	2308      	movs	r3, #8
 800a006:	e7b3      	b.n	8009f70 <_strtol_l.constprop.0+0x54>
 800a008:	2c30      	cmp	r4, #48	; 0x30
 800a00a:	d0a9      	beq.n	8009f60 <_strtol_l.constprop.0+0x44>
 800a00c:	230a      	movs	r3, #10
 800a00e:	e7af      	b.n	8009f70 <_strtol_l.constprop.0+0x54>
 800a010:	0800cf09 	.word	0x0800cf09

0800a014 <_strtol_r>:
 800a014:	f7ff bf82 	b.w	8009f1c <_strtol_l.constprop.0>

0800a018 <quorem>:
 800a018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	6903      	ldr	r3, [r0, #16]
 800a01e:	690c      	ldr	r4, [r1, #16]
 800a020:	4607      	mov	r7, r0
 800a022:	42a3      	cmp	r3, r4
 800a024:	f2c0 8082 	blt.w	800a12c <quorem+0x114>
 800a028:	3c01      	subs	r4, #1
 800a02a:	f100 0514 	add.w	r5, r0, #20
 800a02e:	f101 0814 	add.w	r8, r1, #20
 800a032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a03c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a040:	3301      	adds	r3, #1
 800a042:	429a      	cmp	r2, r3
 800a044:	fbb2 f6f3 	udiv	r6, r2, r3
 800a048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a04c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a050:	d331      	bcc.n	800a0b6 <quorem+0x9e>
 800a052:	f04f 0e00 	mov.w	lr, #0
 800a056:	4640      	mov	r0, r8
 800a058:	46ac      	mov	ip, r5
 800a05a:	46f2      	mov	sl, lr
 800a05c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a060:	b293      	uxth	r3, r2
 800a062:	fb06 e303 	mla	r3, r6, r3, lr
 800a066:	0c12      	lsrs	r2, r2, #16
 800a068:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	fb06 e202 	mla	r2, r6, r2, lr
 800a072:	ebaa 0303 	sub.w	r3, sl, r3
 800a076:	f8dc a000 	ldr.w	sl, [ip]
 800a07a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a07e:	fa1f fa8a 	uxth.w	sl, sl
 800a082:	4453      	add	r3, sl
 800a084:	f8dc a000 	ldr.w	sl, [ip]
 800a088:	b292      	uxth	r2, r2
 800a08a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a08e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a092:	b29b      	uxth	r3, r3
 800a094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a098:	4581      	cmp	r9, r0
 800a09a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a09e:	f84c 3b04 	str.w	r3, [ip], #4
 800a0a2:	d2db      	bcs.n	800a05c <quorem+0x44>
 800a0a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0a8:	b92b      	cbnz	r3, 800a0b6 <quorem+0x9e>
 800a0aa:	9b01      	ldr	r3, [sp, #4]
 800a0ac:	3b04      	subs	r3, #4
 800a0ae:	429d      	cmp	r5, r3
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	d32f      	bcc.n	800a114 <quorem+0xfc>
 800a0b4:	613c      	str	r4, [r7, #16]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f001 fc82 	bl	800b9c0 <__mcmp>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	db25      	blt.n	800a10c <quorem+0xf4>
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f04f 0c00 	mov.w	ip, #0
 800a0c6:	3601      	adds	r6, #1
 800a0c8:	f858 1b04 	ldr.w	r1, [r8], #4
 800a0cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a0d0:	b28b      	uxth	r3, r1
 800a0d2:	ebac 0303 	sub.w	r3, ip, r3
 800a0d6:	fa1f f28e 	uxth.w	r2, lr
 800a0da:	4413      	add	r3, r2
 800a0dc:	0c0a      	lsrs	r2, r1, #16
 800a0de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0ec:	45c1      	cmp	r9, r8
 800a0ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0f2:	f840 3b04 	str.w	r3, [r0], #4
 800a0f6:	d2e7      	bcs.n	800a0c8 <quorem+0xb0>
 800a0f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a100:	b922      	cbnz	r2, 800a10c <quorem+0xf4>
 800a102:	3b04      	subs	r3, #4
 800a104:	429d      	cmp	r5, r3
 800a106:	461a      	mov	r2, r3
 800a108:	d30a      	bcc.n	800a120 <quorem+0x108>
 800a10a:	613c      	str	r4, [r7, #16]
 800a10c:	4630      	mov	r0, r6
 800a10e:	b003      	add	sp, #12
 800a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	6812      	ldr	r2, [r2, #0]
 800a116:	3b04      	subs	r3, #4
 800a118:	2a00      	cmp	r2, #0
 800a11a:	d1cb      	bne.n	800a0b4 <quorem+0x9c>
 800a11c:	3c01      	subs	r4, #1
 800a11e:	e7c6      	b.n	800a0ae <quorem+0x96>
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	3b04      	subs	r3, #4
 800a124:	2a00      	cmp	r2, #0
 800a126:	d1f0      	bne.n	800a10a <quorem+0xf2>
 800a128:	3c01      	subs	r4, #1
 800a12a:	e7eb      	b.n	800a104 <quorem+0xec>
 800a12c:	2000      	movs	r0, #0
 800a12e:	e7ee      	b.n	800a10e <quorem+0xf6>

0800a130 <_dtoa_r>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	4616      	mov	r6, r2
 800a136:	461f      	mov	r7, r3
 800a138:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a13a:	b099      	sub	sp, #100	; 0x64
 800a13c:	4605      	mov	r5, r0
 800a13e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a142:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a146:	b974      	cbnz	r4, 800a166 <_dtoa_r+0x36>
 800a148:	2010      	movs	r0, #16
 800a14a:	f001 f949 	bl	800b3e0 <malloc>
 800a14e:	4602      	mov	r2, r0
 800a150:	6268      	str	r0, [r5, #36]	; 0x24
 800a152:	b920      	cbnz	r0, 800a15e <_dtoa_r+0x2e>
 800a154:	21ea      	movs	r1, #234	; 0xea
 800a156:	4ba8      	ldr	r3, [pc, #672]	; (800a3f8 <_dtoa_r+0x2c8>)
 800a158:	48a8      	ldr	r0, [pc, #672]	; (800a3fc <_dtoa_r+0x2cc>)
 800a15a:	f002 f8a5 	bl	800c2a8 <__assert_func>
 800a15e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a162:	6004      	str	r4, [r0, #0]
 800a164:	60c4      	str	r4, [r0, #12]
 800a166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a168:	6819      	ldr	r1, [r3, #0]
 800a16a:	b151      	cbz	r1, 800a182 <_dtoa_r+0x52>
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	2301      	movs	r3, #1
 800a170:	4093      	lsls	r3, r2
 800a172:	604a      	str	r2, [r1, #4]
 800a174:	608b      	str	r3, [r1, #8]
 800a176:	4628      	mov	r0, r5
 800a178:	f001 f99a 	bl	800b4b0 <_Bfree>
 800a17c:	2200      	movs	r2, #0
 800a17e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	1e3b      	subs	r3, r7, #0
 800a184:	bfaf      	iteee	ge
 800a186:	2300      	movge	r3, #0
 800a188:	2201      	movlt	r2, #1
 800a18a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a18e:	9305      	strlt	r3, [sp, #20]
 800a190:	bfa8      	it	ge
 800a192:	f8c8 3000 	strge.w	r3, [r8]
 800a196:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a19a:	4b99      	ldr	r3, [pc, #612]	; (800a400 <_dtoa_r+0x2d0>)
 800a19c:	bfb8      	it	lt
 800a19e:	f8c8 2000 	strlt.w	r2, [r8]
 800a1a2:	ea33 0309 	bics.w	r3, r3, r9
 800a1a6:	d119      	bne.n	800a1dc <_dtoa_r+0xac>
 800a1a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1b4:	4333      	orrs	r3, r6
 800a1b6:	f000 857f 	beq.w	800acb8 <_dtoa_r+0xb88>
 800a1ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1bc:	b953      	cbnz	r3, 800a1d4 <_dtoa_r+0xa4>
 800a1be:	4b91      	ldr	r3, [pc, #580]	; (800a404 <_dtoa_r+0x2d4>)
 800a1c0:	e022      	b.n	800a208 <_dtoa_r+0xd8>
 800a1c2:	4b91      	ldr	r3, [pc, #580]	; (800a408 <_dtoa_r+0x2d8>)
 800a1c4:	9303      	str	r3, [sp, #12]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	9803      	ldr	r0, [sp, #12]
 800a1ce:	b019      	add	sp, #100	; 0x64
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d4:	4b8b      	ldr	r3, [pc, #556]	; (800a404 <_dtoa_r+0x2d4>)
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	3303      	adds	r3, #3
 800a1da:	e7f5      	b.n	800a1c8 <_dtoa_r+0x98>
 800a1dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a1e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a1e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f7f6 fbdc 	bl	80009a8 <__aeabi_dcmpeq>
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	b158      	cbz	r0, 800a20c <_dtoa_r+0xdc>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8558 	beq.w	800acb2 <_dtoa_r+0xb82>
 800a202:	4882      	ldr	r0, [pc, #520]	; (800a40c <_dtoa_r+0x2dc>)
 800a204:	6018      	str	r0, [r3, #0]
 800a206:	1e43      	subs	r3, r0, #1
 800a208:	9303      	str	r3, [sp, #12]
 800a20a:	e7df      	b.n	800a1cc <_dtoa_r+0x9c>
 800a20c:	ab16      	add	r3, sp, #88	; 0x58
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	ab17      	add	r3, sp, #92	; 0x5c
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	4628      	mov	r0, r5
 800a216:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a21a:	f001 fcf3 	bl	800bc04 <__d2b>
 800a21e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a222:	4683      	mov	fp, r0
 800a224:	2c00      	cmp	r4, #0
 800a226:	d07f      	beq.n	800a328 <_dtoa_r+0x1f8>
 800a228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a22e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a236:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a23a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a23e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a242:	2200      	movs	r2, #0
 800a244:	4b72      	ldr	r3, [pc, #456]	; (800a410 <_dtoa_r+0x2e0>)
 800a246:	f7f5 ff8f 	bl	8000168 <__aeabi_dsub>
 800a24a:	a365      	add	r3, pc, #404	; (adr r3, 800a3e0 <_dtoa_r+0x2b0>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f6 f942 	bl	80004d8 <__aeabi_dmul>
 800a254:	a364      	add	r3, pc, #400	; (adr r3, 800a3e8 <_dtoa_r+0x2b8>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f5 ff87 	bl	800016c <__adddf3>
 800a25e:	4606      	mov	r6, r0
 800a260:	4620      	mov	r0, r4
 800a262:	460f      	mov	r7, r1
 800a264:	f7f6 f8ce 	bl	8000404 <__aeabi_i2d>
 800a268:	a361      	add	r3, pc, #388	; (adr r3, 800a3f0 <_dtoa_r+0x2c0>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 f933 	bl	80004d8 <__aeabi_dmul>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4630      	mov	r0, r6
 800a278:	4639      	mov	r1, r7
 800a27a:	f7f5 ff77 	bl	800016c <__adddf3>
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	f7f6 fbd9 	bl	8000a38 <__aeabi_d2iz>
 800a286:	2200      	movs	r2, #0
 800a288:	4682      	mov	sl, r0
 800a28a:	2300      	movs	r3, #0
 800a28c:	4630      	mov	r0, r6
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 fb94 	bl	80009bc <__aeabi_dcmplt>
 800a294:	b148      	cbz	r0, 800a2aa <_dtoa_r+0x17a>
 800a296:	4650      	mov	r0, sl
 800a298:	f7f6 f8b4 	bl	8000404 <__aeabi_i2d>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	f7f6 fb82 	bl	80009a8 <__aeabi_dcmpeq>
 800a2a4:	b908      	cbnz	r0, 800a2aa <_dtoa_r+0x17a>
 800a2a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2aa:	f1ba 0f16 	cmp.w	sl, #22
 800a2ae:	d858      	bhi.n	800a362 <_dtoa_r+0x232>
 800a2b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2b4:	4b57      	ldr	r3, [pc, #348]	; (800a414 <_dtoa_r+0x2e4>)
 800a2b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f6 fb7d 	bl	80009bc <__aeabi_dcmplt>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d04f      	beq.n	800a366 <_dtoa_r+0x236>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2d0:	1b1c      	subs	r4, r3, r4
 800a2d2:	1e63      	subs	r3, r4, #1
 800a2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d6:	bf49      	itett	mi
 800a2d8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a2dc:	2300      	movpl	r3, #0
 800a2de:	9306      	strmi	r3, [sp, #24]
 800a2e0:	2300      	movmi	r3, #0
 800a2e2:	bf54      	ite	pl
 800a2e4:	9306      	strpl	r3, [sp, #24]
 800a2e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a2e8:	f1ba 0f00 	cmp.w	sl, #0
 800a2ec:	db3d      	blt.n	800a36a <_dtoa_r+0x23a>
 800a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a2f4:	4453      	add	r3, sl
 800a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2fe:	2b09      	cmp	r3, #9
 800a300:	f200 808c 	bhi.w	800a41c <_dtoa_r+0x2ec>
 800a304:	2b05      	cmp	r3, #5
 800a306:	bfc4      	itt	gt
 800a308:	3b04      	subgt	r3, #4
 800a30a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a30c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a30e:	bfc8      	it	gt
 800a310:	2400      	movgt	r4, #0
 800a312:	f1a3 0302 	sub.w	r3, r3, #2
 800a316:	bfd8      	it	le
 800a318:	2401      	movle	r4, #1
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	f200 808a 	bhi.w	800a434 <_dtoa_r+0x304>
 800a320:	e8df f003 	tbb	[pc, r3]
 800a324:	5b4d4f2d 	.word	0x5b4d4f2d
 800a328:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a32c:	441c      	add	r4, r3
 800a32e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a332:	2b20      	cmp	r3, #32
 800a334:	bfc3      	ittte	gt
 800a336:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a33a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a33e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a342:	f1c3 0320 	rsble	r3, r3, #32
 800a346:	bfc6      	itte	gt
 800a348:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a34c:	4318      	orrgt	r0, r3
 800a34e:	fa06 f003 	lslle.w	r0, r6, r3
 800a352:	f7f6 f847 	bl	80003e4 <__aeabi_ui2d>
 800a356:	2301      	movs	r3, #1
 800a358:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a35c:	3c01      	subs	r4, #1
 800a35e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a360:	e76f      	b.n	800a242 <_dtoa_r+0x112>
 800a362:	2301      	movs	r3, #1
 800a364:	e7b2      	b.n	800a2cc <_dtoa_r+0x19c>
 800a366:	900f      	str	r0, [sp, #60]	; 0x3c
 800a368:	e7b1      	b.n	800a2ce <_dtoa_r+0x19e>
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	eba3 030a 	sub.w	r3, r3, sl
 800a370:	9306      	str	r3, [sp, #24]
 800a372:	f1ca 0300 	rsb	r3, sl, #0
 800a376:	930a      	str	r3, [sp, #40]	; 0x28
 800a378:	2300      	movs	r3, #0
 800a37a:	930e      	str	r3, [sp, #56]	; 0x38
 800a37c:	e7be      	b.n	800a2fc <_dtoa_r+0x1cc>
 800a37e:	2300      	movs	r3, #0
 800a380:	930b      	str	r3, [sp, #44]	; 0x2c
 800a382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a384:	2b00      	cmp	r3, #0
 800a386:	dc58      	bgt.n	800a43a <_dtoa_r+0x30a>
 800a388:	f04f 0901 	mov.w	r9, #1
 800a38c:	464b      	mov	r3, r9
 800a38e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a392:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a396:	2200      	movs	r2, #0
 800a398:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a39a:	6042      	str	r2, [r0, #4]
 800a39c:	2204      	movs	r2, #4
 800a39e:	f102 0614 	add.w	r6, r2, #20
 800a3a2:	429e      	cmp	r6, r3
 800a3a4:	6841      	ldr	r1, [r0, #4]
 800a3a6:	d94e      	bls.n	800a446 <_dtoa_r+0x316>
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f001 f841 	bl	800b430 <_Balloc>
 800a3ae:	9003      	str	r0, [sp, #12]
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d14c      	bne.n	800a44e <_dtoa_r+0x31e>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3ba:	4b17      	ldr	r3, [pc, #92]	; (800a418 <_dtoa_r+0x2e8>)
 800a3bc:	e6cc      	b.n	800a158 <_dtoa_r+0x28>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e7de      	b.n	800a380 <_dtoa_r+0x250>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3c8:	eb0a 0903 	add.w	r9, sl, r3
 800a3cc:	f109 0301 	add.w	r3, r9, #1
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	9308      	str	r3, [sp, #32]
 800a3d4:	bfb8      	it	lt
 800a3d6:	2301      	movlt	r3, #1
 800a3d8:	e7dd      	b.n	800a396 <_dtoa_r+0x266>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e7f2      	b.n	800a3c4 <_dtoa_r+0x294>
 800a3de:	bf00      	nop
 800a3e0:	636f4361 	.word	0x636f4361
 800a3e4:	3fd287a7 	.word	0x3fd287a7
 800a3e8:	8b60c8b3 	.word	0x8b60c8b3
 800a3ec:	3fc68a28 	.word	0x3fc68a28
 800a3f0:	509f79fb 	.word	0x509f79fb
 800a3f4:	3fd34413 	.word	0x3fd34413
 800a3f8:	0800d016 	.word	0x0800d016
 800a3fc:	0800d02d 	.word	0x0800d02d
 800a400:	7ff00000 	.word	0x7ff00000
 800a404:	0800d012 	.word	0x0800d012
 800a408:	0800d009 	.word	0x0800d009
 800a40c:	0800ce8d 	.word	0x0800ce8d
 800a410:	3ff80000 	.word	0x3ff80000
 800a414:	0800d198 	.word	0x0800d198
 800a418:	0800d088 	.word	0x0800d088
 800a41c:	2401      	movs	r4, #1
 800a41e:	2300      	movs	r3, #0
 800a420:	940b      	str	r4, [sp, #44]	; 0x2c
 800a422:	9322      	str	r3, [sp, #136]	; 0x88
 800a424:	f04f 39ff 	mov.w	r9, #4294967295
 800a428:	2200      	movs	r2, #0
 800a42a:	2312      	movs	r3, #18
 800a42c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a430:	9223      	str	r2, [sp, #140]	; 0x8c
 800a432:	e7b0      	b.n	800a396 <_dtoa_r+0x266>
 800a434:	2301      	movs	r3, #1
 800a436:	930b      	str	r3, [sp, #44]	; 0x2c
 800a438:	e7f4      	b.n	800a424 <_dtoa_r+0x2f4>
 800a43a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a43e:	464b      	mov	r3, r9
 800a440:	f8cd 9020 	str.w	r9, [sp, #32]
 800a444:	e7a7      	b.n	800a396 <_dtoa_r+0x266>
 800a446:	3101      	adds	r1, #1
 800a448:	6041      	str	r1, [r0, #4]
 800a44a:	0052      	lsls	r2, r2, #1
 800a44c:	e7a7      	b.n	800a39e <_dtoa_r+0x26e>
 800a44e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a450:	9a03      	ldr	r2, [sp, #12]
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	9b08      	ldr	r3, [sp, #32]
 800a456:	2b0e      	cmp	r3, #14
 800a458:	f200 80a8 	bhi.w	800a5ac <_dtoa_r+0x47c>
 800a45c:	2c00      	cmp	r4, #0
 800a45e:	f000 80a5 	beq.w	800a5ac <_dtoa_r+0x47c>
 800a462:	f1ba 0f00 	cmp.w	sl, #0
 800a466:	dd34      	ble.n	800a4d2 <_dtoa_r+0x3a2>
 800a468:	4a9a      	ldr	r2, [pc, #616]	; (800a6d4 <_dtoa_r+0x5a4>)
 800a46a:	f00a 030f 	and.w	r3, sl, #15
 800a46e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a472:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a476:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a47a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a47e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a482:	d016      	beq.n	800a4b2 <_dtoa_r+0x382>
 800a484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a488:	4b93      	ldr	r3, [pc, #588]	; (800a6d8 <_dtoa_r+0x5a8>)
 800a48a:	2703      	movs	r7, #3
 800a48c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a490:	f7f6 f94c 	bl	800072c <__aeabi_ddiv>
 800a494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a498:	f004 040f 	and.w	r4, r4, #15
 800a49c:	4e8e      	ldr	r6, [pc, #568]	; (800a6d8 <_dtoa_r+0x5a8>)
 800a49e:	b954      	cbnz	r4, 800a4b6 <_dtoa_r+0x386>
 800a4a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a8:	f7f6 f940 	bl	800072c <__aeabi_ddiv>
 800a4ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4b0:	e029      	b.n	800a506 <_dtoa_r+0x3d6>
 800a4b2:	2702      	movs	r7, #2
 800a4b4:	e7f2      	b.n	800a49c <_dtoa_r+0x36c>
 800a4b6:	07e1      	lsls	r1, r4, #31
 800a4b8:	d508      	bpl.n	800a4cc <_dtoa_r+0x39c>
 800a4ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4be:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4c2:	f7f6 f809 	bl	80004d8 <__aeabi_dmul>
 800a4c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4ca:	3701      	adds	r7, #1
 800a4cc:	1064      	asrs	r4, r4, #1
 800a4ce:	3608      	adds	r6, #8
 800a4d0:	e7e5      	b.n	800a49e <_dtoa_r+0x36e>
 800a4d2:	f000 80a5 	beq.w	800a620 <_dtoa_r+0x4f0>
 800a4d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4da:	f1ca 0400 	rsb	r4, sl, #0
 800a4de:	4b7d      	ldr	r3, [pc, #500]	; (800a6d4 <_dtoa_r+0x5a4>)
 800a4e0:	f004 020f 	and.w	r2, r4, #15
 800a4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f7f5 fff4 	bl	80004d8 <__aeabi_dmul>
 800a4f0:	2702      	movs	r7, #2
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4f8:	4e77      	ldr	r6, [pc, #476]	; (800a6d8 <_dtoa_r+0x5a8>)
 800a4fa:	1124      	asrs	r4, r4, #4
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	f040 8084 	bne.w	800a60a <_dtoa_r+0x4da>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1d2      	bne.n	800a4ac <_dtoa_r+0x37c>
 800a506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 808b 	beq.w	800a624 <_dtoa_r+0x4f4>
 800a50e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a512:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a51a:	2200      	movs	r2, #0
 800a51c:	4b6f      	ldr	r3, [pc, #444]	; (800a6dc <_dtoa_r+0x5ac>)
 800a51e:	f7f6 fa4d 	bl	80009bc <__aeabi_dcmplt>
 800a522:	2800      	cmp	r0, #0
 800a524:	d07e      	beq.n	800a624 <_dtoa_r+0x4f4>
 800a526:	9b08      	ldr	r3, [sp, #32]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d07b      	beq.n	800a624 <_dtoa_r+0x4f4>
 800a52c:	f1b9 0f00 	cmp.w	r9, #0
 800a530:	dd38      	ble.n	800a5a4 <_dtoa_r+0x474>
 800a532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a536:	2200      	movs	r2, #0
 800a538:	4b69      	ldr	r3, [pc, #420]	; (800a6e0 <_dtoa_r+0x5b0>)
 800a53a:	f7f5 ffcd 	bl	80004d8 <__aeabi_dmul>
 800a53e:	464c      	mov	r4, r9
 800a540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a544:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a548:	3701      	adds	r7, #1
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7f5 ff5a 	bl	8000404 <__aeabi_i2d>
 800a550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a554:	f7f5 ffc0 	bl	80004d8 <__aeabi_dmul>
 800a558:	2200      	movs	r2, #0
 800a55a:	4b62      	ldr	r3, [pc, #392]	; (800a6e4 <_dtoa_r+0x5b4>)
 800a55c:	f7f5 fe06 	bl	800016c <__adddf3>
 800a560:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a564:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a568:	9611      	str	r6, [sp, #68]	; 0x44
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d15d      	bne.n	800a62a <_dtoa_r+0x4fa>
 800a56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a572:	2200      	movs	r2, #0
 800a574:	4b5c      	ldr	r3, [pc, #368]	; (800a6e8 <_dtoa_r+0x5b8>)
 800a576:	f7f5 fdf7 	bl	8000168 <__aeabi_dsub>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a582:	4633      	mov	r3, r6
 800a584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a586:	f7f6 fa37 	bl	80009f8 <__aeabi_dcmpgt>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f040 829c 	bne.w	800aac8 <_dtoa_r+0x998>
 800a590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a596:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a59a:	f7f6 fa0f 	bl	80009bc <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f040 8290 	bne.w	800aac4 <_dtoa_r+0x994>
 800a5a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a5a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a5ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f2c0 8152 	blt.w	800a858 <_dtoa_r+0x728>
 800a5b4:	f1ba 0f0e 	cmp.w	sl, #14
 800a5b8:	f300 814e 	bgt.w	800a858 <_dtoa_r+0x728>
 800a5bc:	4b45      	ldr	r3, [pc, #276]	; (800a6d4 <_dtoa_r+0x5a4>)
 800a5be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a5ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f280 80db 	bge.w	800a788 <_dtoa_r+0x658>
 800a5d2:	9b08      	ldr	r3, [sp, #32]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f300 80d7 	bgt.w	800a788 <_dtoa_r+0x658>
 800a5da:	f040 8272 	bne.w	800aac2 <_dtoa_r+0x992>
 800a5de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	4b40      	ldr	r3, [pc, #256]	; (800a6e8 <_dtoa_r+0x5b8>)
 800a5e6:	f7f5 ff77 	bl	80004d8 <__aeabi_dmul>
 800a5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ee:	f7f6 f9f9 	bl	80009e4 <__aeabi_dcmpge>
 800a5f2:	9c08      	ldr	r4, [sp, #32]
 800a5f4:	4626      	mov	r6, r4
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f040 8248 	bne.w	800aa8c <_dtoa_r+0x95c>
 800a5fc:	2331      	movs	r3, #49	; 0x31
 800a5fe:	9f03      	ldr	r7, [sp, #12]
 800a600:	f10a 0a01 	add.w	sl, sl, #1
 800a604:	f807 3b01 	strb.w	r3, [r7], #1
 800a608:	e244      	b.n	800aa94 <_dtoa_r+0x964>
 800a60a:	07e2      	lsls	r2, r4, #31
 800a60c:	d505      	bpl.n	800a61a <_dtoa_r+0x4ea>
 800a60e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a612:	f7f5 ff61 	bl	80004d8 <__aeabi_dmul>
 800a616:	2301      	movs	r3, #1
 800a618:	3701      	adds	r7, #1
 800a61a:	1064      	asrs	r4, r4, #1
 800a61c:	3608      	adds	r6, #8
 800a61e:	e76d      	b.n	800a4fc <_dtoa_r+0x3cc>
 800a620:	2702      	movs	r7, #2
 800a622:	e770      	b.n	800a506 <_dtoa_r+0x3d6>
 800a624:	46d0      	mov	r8, sl
 800a626:	9c08      	ldr	r4, [sp, #32]
 800a628:	e78f      	b.n	800a54a <_dtoa_r+0x41a>
 800a62a:	9903      	ldr	r1, [sp, #12]
 800a62c:	4b29      	ldr	r3, [pc, #164]	; (800a6d4 <_dtoa_r+0x5a4>)
 800a62e:	4421      	add	r1, r4
 800a630:	9112      	str	r1, [sp, #72]	; 0x48
 800a632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a634:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a638:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a63c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a640:	2900      	cmp	r1, #0
 800a642:	d055      	beq.n	800a6f0 <_dtoa_r+0x5c0>
 800a644:	2000      	movs	r0, #0
 800a646:	4929      	ldr	r1, [pc, #164]	; (800a6ec <_dtoa_r+0x5bc>)
 800a648:	f7f6 f870 	bl	800072c <__aeabi_ddiv>
 800a64c:	463b      	mov	r3, r7
 800a64e:	4632      	mov	r2, r6
 800a650:	f7f5 fd8a 	bl	8000168 <__aeabi_dsub>
 800a654:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a658:	9f03      	ldr	r7, [sp, #12]
 800a65a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a65e:	f7f6 f9eb 	bl	8000a38 <__aeabi_d2iz>
 800a662:	4604      	mov	r4, r0
 800a664:	f7f5 fece 	bl	8000404 <__aeabi_i2d>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a670:	f7f5 fd7a 	bl	8000168 <__aeabi_dsub>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	3430      	adds	r4, #48	; 0x30
 800a67a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a682:	f807 4b01 	strb.w	r4, [r7], #1
 800a686:	f7f6 f999 	bl	80009bc <__aeabi_dcmplt>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d174      	bne.n	800a778 <_dtoa_r+0x648>
 800a68e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a692:	2000      	movs	r0, #0
 800a694:	4911      	ldr	r1, [pc, #68]	; (800a6dc <_dtoa_r+0x5ac>)
 800a696:	f7f5 fd67 	bl	8000168 <__aeabi_dsub>
 800a69a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a69e:	f7f6 f98d 	bl	80009bc <__aeabi_dcmplt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f040 80b7 	bne.w	800a816 <_dtoa_r+0x6e6>
 800a6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6aa:	429f      	cmp	r7, r3
 800a6ac:	f43f af7a 	beq.w	800a5a4 <_dtoa_r+0x474>
 800a6b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <_dtoa_r+0x5b0>)
 800a6b8:	f7f5 ff0e 	bl	80004d8 <__aeabi_dmul>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6c6:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <_dtoa_r+0x5b0>)
 800a6c8:	f7f5 ff06 	bl	80004d8 <__aeabi_dmul>
 800a6cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6d0:	e7c3      	b.n	800a65a <_dtoa_r+0x52a>
 800a6d2:	bf00      	nop
 800a6d4:	0800d198 	.word	0x0800d198
 800a6d8:	0800d170 	.word	0x0800d170
 800a6dc:	3ff00000 	.word	0x3ff00000
 800a6e0:	40240000 	.word	0x40240000
 800a6e4:	401c0000 	.word	0x401c0000
 800a6e8:	40140000 	.word	0x40140000
 800a6ec:	3fe00000 	.word	0x3fe00000
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f5 fef0 	bl	80004d8 <__aeabi_dmul>
 800a6f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6fe:	9c03      	ldr	r4, [sp, #12]
 800a700:	9314      	str	r3, [sp, #80]	; 0x50
 800a702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a706:	f7f6 f997 	bl	8000a38 <__aeabi_d2iz>
 800a70a:	9015      	str	r0, [sp, #84]	; 0x54
 800a70c:	f7f5 fe7a 	bl	8000404 <__aeabi_i2d>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a718:	f7f5 fd26 	bl	8000168 <__aeabi_dsub>
 800a71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a71e:	4606      	mov	r6, r0
 800a720:	3330      	adds	r3, #48	; 0x30
 800a722:	f804 3b01 	strb.w	r3, [r4], #1
 800a726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a728:	460f      	mov	r7, r1
 800a72a:	429c      	cmp	r4, r3
 800a72c:	f04f 0200 	mov.w	r2, #0
 800a730:	d124      	bne.n	800a77c <_dtoa_r+0x64c>
 800a732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a736:	4bb0      	ldr	r3, [pc, #704]	; (800a9f8 <_dtoa_r+0x8c8>)
 800a738:	f7f5 fd18 	bl	800016c <__adddf3>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f958 	bl	80009f8 <__aeabi_dcmpgt>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d163      	bne.n	800a814 <_dtoa_r+0x6e4>
 800a74c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a750:	2000      	movs	r0, #0
 800a752:	49a9      	ldr	r1, [pc, #676]	; (800a9f8 <_dtoa_r+0x8c8>)
 800a754:	f7f5 fd08 	bl	8000168 <__aeabi_dsub>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4630      	mov	r0, r6
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f6 f92c 	bl	80009bc <__aeabi_dcmplt>
 800a764:	2800      	cmp	r0, #0
 800a766:	f43f af1d 	beq.w	800a5a4 <_dtoa_r+0x474>
 800a76a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a76c:	1e7b      	subs	r3, r7, #1
 800a76e:	9314      	str	r3, [sp, #80]	; 0x50
 800a770:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a774:	2b30      	cmp	r3, #48	; 0x30
 800a776:	d0f8      	beq.n	800a76a <_dtoa_r+0x63a>
 800a778:	46c2      	mov	sl, r8
 800a77a:	e03b      	b.n	800a7f4 <_dtoa_r+0x6c4>
 800a77c:	4b9f      	ldr	r3, [pc, #636]	; (800a9fc <_dtoa_r+0x8cc>)
 800a77e:	f7f5 feab 	bl	80004d8 <__aeabi_dmul>
 800a782:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a786:	e7bc      	b.n	800a702 <_dtoa_r+0x5d2>
 800a788:	9f03      	ldr	r7, [sp, #12]
 800a78a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a78e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 ffc9 	bl	800072c <__aeabi_ddiv>
 800a79a:	f7f6 f94d 	bl	8000a38 <__aeabi_d2iz>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	f7f5 fe30 	bl	8000404 <__aeabi_i2d>
 800a7a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7a8:	f7f5 fe96 	bl	80004d8 <__aeabi_dmul>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	f7f5 fcd8 	bl	8000168 <__aeabi_dsub>
 800a7b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a7bc:	f807 6b01 	strb.w	r6, [r7], #1
 800a7c0:	9e03      	ldr	r6, [sp, #12]
 800a7c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a7c6:	1bbe      	subs	r6, r7, r6
 800a7c8:	45b4      	cmp	ip, r6
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	d136      	bne.n	800a83e <_dtoa_r+0x70e>
 800a7d0:	f7f5 fccc 	bl	800016c <__adddf3>
 800a7d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7d8:	4680      	mov	r8, r0
 800a7da:	4689      	mov	r9, r1
 800a7dc:	f7f6 f90c 	bl	80009f8 <__aeabi_dcmpgt>
 800a7e0:	bb58      	cbnz	r0, 800a83a <_dtoa_r+0x70a>
 800a7e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f6 f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 800a7ee:	b108      	cbz	r0, 800a7f4 <_dtoa_r+0x6c4>
 800a7f0:	07e1      	lsls	r1, r4, #31
 800a7f2:	d422      	bmi.n	800a83a <_dtoa_r+0x70a>
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	4659      	mov	r1, fp
 800a7f8:	f000 fe5a 	bl	800b4b0 <_Bfree>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	703b      	strb	r3, [r7, #0]
 800a800:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a802:	f10a 0001 	add.w	r0, sl, #1
 800a806:	6018      	str	r0, [r3, #0]
 800a808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f43f acde 	beq.w	800a1cc <_dtoa_r+0x9c>
 800a810:	601f      	str	r7, [r3, #0]
 800a812:	e4db      	b.n	800a1cc <_dtoa_r+0x9c>
 800a814:	4627      	mov	r7, r4
 800a816:	463b      	mov	r3, r7
 800a818:	461f      	mov	r7, r3
 800a81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a81e:	2a39      	cmp	r2, #57	; 0x39
 800a820:	d107      	bne.n	800a832 <_dtoa_r+0x702>
 800a822:	9a03      	ldr	r2, [sp, #12]
 800a824:	429a      	cmp	r2, r3
 800a826:	d1f7      	bne.n	800a818 <_dtoa_r+0x6e8>
 800a828:	2230      	movs	r2, #48	; 0x30
 800a82a:	9903      	ldr	r1, [sp, #12]
 800a82c:	f108 0801 	add.w	r8, r8, #1
 800a830:	700a      	strb	r2, [r1, #0]
 800a832:	781a      	ldrb	r2, [r3, #0]
 800a834:	3201      	adds	r2, #1
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	e79e      	b.n	800a778 <_dtoa_r+0x648>
 800a83a:	46d0      	mov	r8, sl
 800a83c:	e7eb      	b.n	800a816 <_dtoa_r+0x6e6>
 800a83e:	2200      	movs	r2, #0
 800a840:	4b6e      	ldr	r3, [pc, #440]	; (800a9fc <_dtoa_r+0x8cc>)
 800a842:	f7f5 fe49 	bl	80004d8 <__aeabi_dmul>
 800a846:	2200      	movs	r2, #0
 800a848:	2300      	movs	r3, #0
 800a84a:	4680      	mov	r8, r0
 800a84c:	4689      	mov	r9, r1
 800a84e:	f7f6 f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 800a852:	2800      	cmp	r0, #0
 800a854:	d09b      	beq.n	800a78e <_dtoa_r+0x65e>
 800a856:	e7cd      	b.n	800a7f4 <_dtoa_r+0x6c4>
 800a858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	f000 80d0 	beq.w	800aa00 <_dtoa_r+0x8d0>
 800a860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a862:	2a01      	cmp	r2, #1
 800a864:	f300 80ae 	bgt.w	800a9c4 <_dtoa_r+0x894>
 800a868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	f000 80a6 	beq.w	800a9bc <_dtoa_r+0x88c>
 800a870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a874:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a876:	9f06      	ldr	r7, [sp, #24]
 800a878:	9a06      	ldr	r2, [sp, #24]
 800a87a:	2101      	movs	r1, #1
 800a87c:	441a      	add	r2, r3
 800a87e:	9206      	str	r2, [sp, #24]
 800a880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a882:	4628      	mov	r0, r5
 800a884:	441a      	add	r2, r3
 800a886:	9209      	str	r2, [sp, #36]	; 0x24
 800a888:	f000 ff12 	bl	800b6b0 <__i2b>
 800a88c:	4606      	mov	r6, r0
 800a88e:	2f00      	cmp	r7, #0
 800a890:	dd0c      	ble.n	800a8ac <_dtoa_r+0x77c>
 800a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a894:	2b00      	cmp	r3, #0
 800a896:	dd09      	ble.n	800a8ac <_dtoa_r+0x77c>
 800a898:	42bb      	cmp	r3, r7
 800a89a:	bfa8      	it	ge
 800a89c:	463b      	movge	r3, r7
 800a89e:	9a06      	ldr	r2, [sp, #24]
 800a8a0:	1aff      	subs	r7, r7, r3
 800a8a2:	1ad2      	subs	r2, r2, r3
 800a8a4:	9206      	str	r2, [sp, #24]
 800a8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ae:	b1f3      	cbz	r3, 800a8ee <_dtoa_r+0x7be>
 800a8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80a8 	beq.w	800aa08 <_dtoa_r+0x8d8>
 800a8b8:	2c00      	cmp	r4, #0
 800a8ba:	dd10      	ble.n	800a8de <_dtoa_r+0x7ae>
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 ffb3 	bl	800b82c <__pow5mult>
 800a8c6:	465a      	mov	r2, fp
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f000 ff05 	bl	800b6dc <__multiply>
 800a8d2:	4680      	mov	r8, r0
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 fdea 	bl	800b4b0 <_Bfree>
 800a8dc:	46c3      	mov	fp, r8
 800a8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e0:	1b1a      	subs	r2, r3, r4
 800a8e2:	d004      	beq.n	800a8ee <_dtoa_r+0x7be>
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f000 ffa0 	bl	800b82c <__pow5mult>
 800a8ec:	4683      	mov	fp, r0
 800a8ee:	2101      	movs	r1, #1
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 fedd 	bl	800b6b0 <__i2b>
 800a8f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f340 8086 	ble.w	800aa0c <_dtoa_r+0x8dc>
 800a900:	461a      	mov	r2, r3
 800a902:	4601      	mov	r1, r0
 800a904:	4628      	mov	r0, r5
 800a906:	f000 ff91 	bl	800b82c <__pow5mult>
 800a90a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a90c:	4604      	mov	r4, r0
 800a90e:	2b01      	cmp	r3, #1
 800a910:	dd7f      	ble.n	800aa12 <_dtoa_r+0x8e2>
 800a912:	f04f 0800 	mov.w	r8, #0
 800a916:	6923      	ldr	r3, [r4, #16]
 800a918:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a91c:	6918      	ldr	r0, [r3, #16]
 800a91e:	f000 fe79 	bl	800b614 <__hi0bits>
 800a922:	f1c0 0020 	rsb	r0, r0, #32
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	4418      	add	r0, r3
 800a92a:	f010 001f 	ands.w	r0, r0, #31
 800a92e:	f000 8092 	beq.w	800aa56 <_dtoa_r+0x926>
 800a932:	f1c0 0320 	rsb	r3, r0, #32
 800a936:	2b04      	cmp	r3, #4
 800a938:	f340 808a 	ble.w	800aa50 <_dtoa_r+0x920>
 800a93c:	f1c0 001c 	rsb	r0, r0, #28
 800a940:	9b06      	ldr	r3, [sp, #24]
 800a942:	4407      	add	r7, r0
 800a944:	4403      	add	r3, r0
 800a946:	9306      	str	r3, [sp, #24]
 800a948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94a:	4403      	add	r3, r0
 800a94c:	9309      	str	r3, [sp, #36]	; 0x24
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	dd05      	ble.n	800a960 <_dtoa_r+0x830>
 800a954:	4659      	mov	r1, fp
 800a956:	461a      	mov	r2, r3
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 ffc1 	bl	800b8e0 <__lshift>
 800a95e:	4683      	mov	fp, r0
 800a960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a962:	2b00      	cmp	r3, #0
 800a964:	dd05      	ble.n	800a972 <_dtoa_r+0x842>
 800a966:	4621      	mov	r1, r4
 800a968:	461a      	mov	r2, r3
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 ffb8 	bl	800b8e0 <__lshift>
 800a970:	4604      	mov	r4, r0
 800a972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d070      	beq.n	800aa5a <_dtoa_r+0x92a>
 800a978:	4621      	mov	r1, r4
 800a97a:	4658      	mov	r0, fp
 800a97c:	f001 f820 	bl	800b9c0 <__mcmp>
 800a980:	2800      	cmp	r0, #0
 800a982:	da6a      	bge.n	800aa5a <_dtoa_r+0x92a>
 800a984:	2300      	movs	r3, #0
 800a986:	4659      	mov	r1, fp
 800a988:	220a      	movs	r2, #10
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 fdb2 	bl	800b4f4 <__multadd>
 800a990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a992:	4683      	mov	fp, r0
 800a994:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 8194 	beq.w	800acc6 <_dtoa_r+0xb96>
 800a99e:	4631      	mov	r1, r6
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	220a      	movs	r2, #10
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f000 fda5 	bl	800b4f4 <__multadd>
 800a9aa:	f1b9 0f00 	cmp.w	r9, #0
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	f300 8093 	bgt.w	800aada <_dtoa_r+0x9aa>
 800a9b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	dc57      	bgt.n	800aa6a <_dtoa_r+0x93a>
 800a9ba:	e08e      	b.n	800aada <_dtoa_r+0x9aa>
 800a9bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9c2:	e757      	b.n	800a874 <_dtoa_r+0x744>
 800a9c4:	9b08      	ldr	r3, [sp, #32]
 800a9c6:	1e5c      	subs	r4, r3, #1
 800a9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ca:	42a3      	cmp	r3, r4
 800a9cc:	bfb7      	itett	lt
 800a9ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9d0:	1b1c      	subge	r4, r3, r4
 800a9d2:	1ae2      	sublt	r2, r4, r3
 800a9d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a9d6:	bfbe      	ittt	lt
 800a9d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a9da:	189b      	addlt	r3, r3, r2
 800a9dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a9de:	9b08      	ldr	r3, [sp, #32]
 800a9e0:	bfb8      	it	lt
 800a9e2:	2400      	movlt	r4, #0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfbb      	ittet	lt
 800a9e8:	9b06      	ldrlt	r3, [sp, #24]
 800a9ea:	9a08      	ldrlt	r2, [sp, #32]
 800a9ec:	9f06      	ldrge	r7, [sp, #24]
 800a9ee:	1a9f      	sublt	r7, r3, r2
 800a9f0:	bfac      	ite	ge
 800a9f2:	9b08      	ldrge	r3, [sp, #32]
 800a9f4:	2300      	movlt	r3, #0
 800a9f6:	e73f      	b.n	800a878 <_dtoa_r+0x748>
 800a9f8:	3fe00000 	.word	0x3fe00000
 800a9fc:	40240000 	.word	0x40240000
 800aa00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa02:	9f06      	ldr	r7, [sp, #24]
 800aa04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aa06:	e742      	b.n	800a88e <_dtoa_r+0x75e>
 800aa08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa0a:	e76b      	b.n	800a8e4 <_dtoa_r+0x7b4>
 800aa0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	dc19      	bgt.n	800aa46 <_dtoa_r+0x916>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	b9bb      	cbnz	r3, 800aa46 <_dtoa_r+0x916>
 800aa16:	9b05      	ldr	r3, [sp, #20]
 800aa18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa1c:	b99b      	cbnz	r3, 800aa46 <_dtoa_r+0x916>
 800aa1e:	9b05      	ldr	r3, [sp, #20]
 800aa20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa24:	0d1b      	lsrs	r3, r3, #20
 800aa26:	051b      	lsls	r3, r3, #20
 800aa28:	b183      	cbz	r3, 800aa4c <_dtoa_r+0x91c>
 800aa2a:	f04f 0801 	mov.w	r8, #1
 800aa2e:	9b06      	ldr	r3, [sp, #24]
 800aa30:	3301      	adds	r3, #1
 800aa32:	9306      	str	r3, [sp, #24]
 800aa34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa36:	3301      	adds	r3, #1
 800aa38:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f47f af6a 	bne.w	800a916 <_dtoa_r+0x7e6>
 800aa42:	2001      	movs	r0, #1
 800aa44:	e76f      	b.n	800a926 <_dtoa_r+0x7f6>
 800aa46:	f04f 0800 	mov.w	r8, #0
 800aa4a:	e7f6      	b.n	800aa3a <_dtoa_r+0x90a>
 800aa4c:	4698      	mov	r8, r3
 800aa4e:	e7f4      	b.n	800aa3a <_dtoa_r+0x90a>
 800aa50:	f43f af7d 	beq.w	800a94e <_dtoa_r+0x81e>
 800aa54:	4618      	mov	r0, r3
 800aa56:	301c      	adds	r0, #28
 800aa58:	e772      	b.n	800a940 <_dtoa_r+0x810>
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dc36      	bgt.n	800aace <_dtoa_r+0x99e>
 800aa60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	dd33      	ble.n	800aace <_dtoa_r+0x99e>
 800aa66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa6a:	f1b9 0f00 	cmp.w	r9, #0
 800aa6e:	d10d      	bne.n	800aa8c <_dtoa_r+0x95c>
 800aa70:	4621      	mov	r1, r4
 800aa72:	464b      	mov	r3, r9
 800aa74:	2205      	movs	r2, #5
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 fd3c 	bl	800b4f4 <__multadd>
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	4658      	mov	r0, fp
 800aa82:	f000 ff9d 	bl	800b9c0 <__mcmp>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f73f adb8 	bgt.w	800a5fc <_dtoa_r+0x4cc>
 800aa8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa8e:	9f03      	ldr	r7, [sp, #12]
 800aa90:	ea6f 0a03 	mvn.w	sl, r3
 800aa94:	f04f 0800 	mov.w	r8, #0
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f000 fd08 	bl	800b4b0 <_Bfree>
 800aaa0:	2e00      	cmp	r6, #0
 800aaa2:	f43f aea7 	beq.w	800a7f4 <_dtoa_r+0x6c4>
 800aaa6:	f1b8 0f00 	cmp.w	r8, #0
 800aaaa:	d005      	beq.n	800aab8 <_dtoa_r+0x988>
 800aaac:	45b0      	cmp	r8, r6
 800aaae:	d003      	beq.n	800aab8 <_dtoa_r+0x988>
 800aab0:	4641      	mov	r1, r8
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 fcfc 	bl	800b4b0 <_Bfree>
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	f000 fcf8 	bl	800b4b0 <_Bfree>
 800aac0:	e698      	b.n	800a7f4 <_dtoa_r+0x6c4>
 800aac2:	2400      	movs	r4, #0
 800aac4:	4626      	mov	r6, r4
 800aac6:	e7e1      	b.n	800aa8c <_dtoa_r+0x95c>
 800aac8:	46c2      	mov	sl, r8
 800aaca:	4626      	mov	r6, r4
 800aacc:	e596      	b.n	800a5fc <_dtoa_r+0x4cc>
 800aace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 80fd 	beq.w	800acd4 <_dtoa_r+0xba4>
 800aada:	2f00      	cmp	r7, #0
 800aadc:	dd05      	ble.n	800aaea <_dtoa_r+0x9ba>
 800aade:	4631      	mov	r1, r6
 800aae0:	463a      	mov	r2, r7
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 fefc 	bl	800b8e0 <__lshift>
 800aae8:	4606      	mov	r6, r0
 800aaea:	f1b8 0f00 	cmp.w	r8, #0
 800aaee:	d05c      	beq.n	800abaa <_dtoa_r+0xa7a>
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	6871      	ldr	r1, [r6, #4]
 800aaf4:	f000 fc9c 	bl	800b430 <_Balloc>
 800aaf8:	4607      	mov	r7, r0
 800aafa:	b928      	cbnz	r0, 800ab08 <_dtoa_r+0x9d8>
 800aafc:	4602      	mov	r2, r0
 800aafe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab02:	4b7f      	ldr	r3, [pc, #508]	; (800ad00 <_dtoa_r+0xbd0>)
 800ab04:	f7ff bb28 	b.w	800a158 <_dtoa_r+0x28>
 800ab08:	6932      	ldr	r2, [r6, #16]
 800ab0a:	f106 010c 	add.w	r1, r6, #12
 800ab0e:	3202      	adds	r2, #2
 800ab10:	0092      	lsls	r2, r2, #2
 800ab12:	300c      	adds	r0, #12
 800ab14:	f7fd fd42 	bl	800859c <memcpy>
 800ab18:	2201      	movs	r2, #1
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 fedf 	bl	800b8e0 <__lshift>
 800ab22:	46b0      	mov	r8, r6
 800ab24:	4606      	mov	r6, r0
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	9308      	str	r3, [sp, #32]
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	444b      	add	r3, r9
 800ab30:	930a      	str	r3, [sp, #40]	; 0x28
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	4658      	mov	r0, fp
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	f7ff fa68 	bl	800a018 <quorem>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	4641      	mov	r1, r8
 800ab4c:	3330      	adds	r3, #48	; 0x30
 800ab4e:	9006      	str	r0, [sp, #24]
 800ab50:	4658      	mov	r0, fp
 800ab52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab54:	f000 ff34 	bl	800b9c0 <__mcmp>
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4681      	mov	r9, r0
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 ff4a 	bl	800b9f8 <__mdiff>
 800ab64:	68c2      	ldr	r2, [r0, #12]
 800ab66:	4607      	mov	r7, r0
 800ab68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab6a:	bb02      	cbnz	r2, 800abae <_dtoa_r+0xa7e>
 800ab6c:	4601      	mov	r1, r0
 800ab6e:	4658      	mov	r0, fp
 800ab70:	f000 ff26 	bl	800b9c0 <__mcmp>
 800ab74:	4602      	mov	r2, r0
 800ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab78:	4639      	mov	r1, r7
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ab80:	f000 fc96 	bl	800b4b0 <_Bfree>
 800ab84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab88:	9f08      	ldr	r7, [sp, #32]
 800ab8a:	ea43 0102 	orr.w	r1, r3, r2
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	430b      	orrs	r3, r1
 800ab92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab94:	d10d      	bne.n	800abb2 <_dtoa_r+0xa82>
 800ab96:	2b39      	cmp	r3, #57	; 0x39
 800ab98:	d029      	beq.n	800abee <_dtoa_r+0xabe>
 800ab9a:	f1b9 0f00 	cmp.w	r9, #0
 800ab9e:	dd01      	ble.n	800aba4 <_dtoa_r+0xa74>
 800aba0:	9b06      	ldr	r3, [sp, #24]
 800aba2:	3331      	adds	r3, #49	; 0x31
 800aba4:	9a04      	ldr	r2, [sp, #16]
 800aba6:	7013      	strb	r3, [r2, #0]
 800aba8:	e776      	b.n	800aa98 <_dtoa_r+0x968>
 800abaa:	4630      	mov	r0, r6
 800abac:	e7b9      	b.n	800ab22 <_dtoa_r+0x9f2>
 800abae:	2201      	movs	r2, #1
 800abb0:	e7e2      	b.n	800ab78 <_dtoa_r+0xa48>
 800abb2:	f1b9 0f00 	cmp.w	r9, #0
 800abb6:	db06      	blt.n	800abc6 <_dtoa_r+0xa96>
 800abb8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800abba:	ea41 0909 	orr.w	r9, r1, r9
 800abbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abc0:	ea59 0101 	orrs.w	r1, r9, r1
 800abc4:	d120      	bne.n	800ac08 <_dtoa_r+0xad8>
 800abc6:	2a00      	cmp	r2, #0
 800abc8:	ddec      	ble.n	800aba4 <_dtoa_r+0xa74>
 800abca:	4659      	mov	r1, fp
 800abcc:	2201      	movs	r2, #1
 800abce:	4628      	mov	r0, r5
 800abd0:	9308      	str	r3, [sp, #32]
 800abd2:	f000 fe85 	bl	800b8e0 <__lshift>
 800abd6:	4621      	mov	r1, r4
 800abd8:	4683      	mov	fp, r0
 800abda:	f000 fef1 	bl	800b9c0 <__mcmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	9b08      	ldr	r3, [sp, #32]
 800abe2:	dc02      	bgt.n	800abea <_dtoa_r+0xaba>
 800abe4:	d1de      	bne.n	800aba4 <_dtoa_r+0xa74>
 800abe6:	07da      	lsls	r2, r3, #31
 800abe8:	d5dc      	bpl.n	800aba4 <_dtoa_r+0xa74>
 800abea:	2b39      	cmp	r3, #57	; 0x39
 800abec:	d1d8      	bne.n	800aba0 <_dtoa_r+0xa70>
 800abee:	2339      	movs	r3, #57	; 0x39
 800abf0:	9a04      	ldr	r2, [sp, #16]
 800abf2:	7013      	strb	r3, [r2, #0]
 800abf4:	463b      	mov	r3, r7
 800abf6:	461f      	mov	r7, r3
 800abf8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	2a39      	cmp	r2, #57	; 0x39
 800ac00:	d050      	beq.n	800aca4 <_dtoa_r+0xb74>
 800ac02:	3201      	adds	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	e747      	b.n	800aa98 <_dtoa_r+0x968>
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	dd03      	ble.n	800ac14 <_dtoa_r+0xae4>
 800ac0c:	2b39      	cmp	r3, #57	; 0x39
 800ac0e:	d0ee      	beq.n	800abee <_dtoa_r+0xabe>
 800ac10:	3301      	adds	r3, #1
 800ac12:	e7c7      	b.n	800aba4 <_dtoa_r+0xa74>
 800ac14:	9a08      	ldr	r2, [sp, #32]
 800ac16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac18:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac1c:	428a      	cmp	r2, r1
 800ac1e:	d02a      	beq.n	800ac76 <_dtoa_r+0xb46>
 800ac20:	4659      	mov	r1, fp
 800ac22:	2300      	movs	r3, #0
 800ac24:	220a      	movs	r2, #10
 800ac26:	4628      	mov	r0, r5
 800ac28:	f000 fc64 	bl	800b4f4 <__multadd>
 800ac2c:	45b0      	cmp	r8, r6
 800ac2e:	4683      	mov	fp, r0
 800ac30:	f04f 0300 	mov.w	r3, #0
 800ac34:	f04f 020a 	mov.w	r2, #10
 800ac38:	4641      	mov	r1, r8
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	d107      	bne.n	800ac4e <_dtoa_r+0xb1e>
 800ac3e:	f000 fc59 	bl	800b4f4 <__multadd>
 800ac42:	4680      	mov	r8, r0
 800ac44:	4606      	mov	r6, r0
 800ac46:	9b08      	ldr	r3, [sp, #32]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	9308      	str	r3, [sp, #32]
 800ac4c:	e775      	b.n	800ab3a <_dtoa_r+0xa0a>
 800ac4e:	f000 fc51 	bl	800b4f4 <__multadd>
 800ac52:	4631      	mov	r1, r6
 800ac54:	4680      	mov	r8, r0
 800ac56:	2300      	movs	r3, #0
 800ac58:	220a      	movs	r2, #10
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 fc4a 	bl	800b4f4 <__multadd>
 800ac60:	4606      	mov	r6, r0
 800ac62:	e7f0      	b.n	800ac46 <_dtoa_r+0xb16>
 800ac64:	f1b9 0f00 	cmp.w	r9, #0
 800ac68:	bfcc      	ite	gt
 800ac6a:	464f      	movgt	r7, r9
 800ac6c:	2701      	movle	r7, #1
 800ac6e:	f04f 0800 	mov.w	r8, #0
 800ac72:	9a03      	ldr	r2, [sp, #12]
 800ac74:	4417      	add	r7, r2
 800ac76:	4659      	mov	r1, fp
 800ac78:	2201      	movs	r2, #1
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	9308      	str	r3, [sp, #32]
 800ac7e:	f000 fe2f 	bl	800b8e0 <__lshift>
 800ac82:	4621      	mov	r1, r4
 800ac84:	4683      	mov	fp, r0
 800ac86:	f000 fe9b 	bl	800b9c0 <__mcmp>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	dcb2      	bgt.n	800abf4 <_dtoa_r+0xac4>
 800ac8e:	d102      	bne.n	800ac96 <_dtoa_r+0xb66>
 800ac90:	9b08      	ldr	r3, [sp, #32]
 800ac92:	07db      	lsls	r3, r3, #31
 800ac94:	d4ae      	bmi.n	800abf4 <_dtoa_r+0xac4>
 800ac96:	463b      	mov	r3, r7
 800ac98:	461f      	mov	r7, r3
 800ac9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac9e:	2a30      	cmp	r2, #48	; 0x30
 800aca0:	d0fa      	beq.n	800ac98 <_dtoa_r+0xb68>
 800aca2:	e6f9      	b.n	800aa98 <_dtoa_r+0x968>
 800aca4:	9a03      	ldr	r2, [sp, #12]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d1a5      	bne.n	800abf6 <_dtoa_r+0xac6>
 800acaa:	2331      	movs	r3, #49	; 0x31
 800acac:	f10a 0a01 	add.w	sl, sl, #1
 800acb0:	e779      	b.n	800aba6 <_dtoa_r+0xa76>
 800acb2:	4b14      	ldr	r3, [pc, #80]	; (800ad04 <_dtoa_r+0xbd4>)
 800acb4:	f7ff baa8 	b.w	800a208 <_dtoa_r+0xd8>
 800acb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f47f aa81 	bne.w	800a1c2 <_dtoa_r+0x92>
 800acc0:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <_dtoa_r+0xbd8>)
 800acc2:	f7ff baa1 	b.w	800a208 <_dtoa_r+0xd8>
 800acc6:	f1b9 0f00 	cmp.w	r9, #0
 800acca:	dc03      	bgt.n	800acd4 <_dtoa_r+0xba4>
 800accc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acce:	2b02      	cmp	r3, #2
 800acd0:	f73f aecb 	bgt.w	800aa6a <_dtoa_r+0x93a>
 800acd4:	9f03      	ldr	r7, [sp, #12]
 800acd6:	4621      	mov	r1, r4
 800acd8:	4658      	mov	r0, fp
 800acda:	f7ff f99d 	bl	800a018 <quorem>
 800acde:	9a03      	ldr	r2, [sp, #12]
 800ace0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ace4:	f807 3b01 	strb.w	r3, [r7], #1
 800ace8:	1aba      	subs	r2, r7, r2
 800acea:	4591      	cmp	r9, r2
 800acec:	ddba      	ble.n	800ac64 <_dtoa_r+0xb34>
 800acee:	4659      	mov	r1, fp
 800acf0:	2300      	movs	r3, #0
 800acf2:	220a      	movs	r2, #10
 800acf4:	4628      	mov	r0, r5
 800acf6:	f000 fbfd 	bl	800b4f4 <__multadd>
 800acfa:	4683      	mov	fp, r0
 800acfc:	e7eb      	b.n	800acd6 <_dtoa_r+0xba6>
 800acfe:	bf00      	nop
 800ad00:	0800d088 	.word	0x0800d088
 800ad04:	0800ce8c 	.word	0x0800ce8c
 800ad08:	0800d009 	.word	0x0800d009

0800ad0c <rshift>:
 800ad0c:	6903      	ldr	r3, [r0, #16]
 800ad0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad16:	f100 0414 	add.w	r4, r0, #20
 800ad1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad1e:	dd46      	ble.n	800adae <rshift+0xa2>
 800ad20:	f011 011f 	ands.w	r1, r1, #31
 800ad24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad2c:	d10c      	bne.n	800ad48 <rshift+0x3c>
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f100 0710 	add.w	r7, r0, #16
 800ad34:	42b1      	cmp	r1, r6
 800ad36:	d335      	bcc.n	800ada4 <rshift+0x98>
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	1eea      	subs	r2, r5, #3
 800ad3e:	4296      	cmp	r6, r2
 800ad40:	bf38      	it	cc
 800ad42:	2300      	movcc	r3, #0
 800ad44:	4423      	add	r3, r4
 800ad46:	e015      	b.n	800ad74 <rshift+0x68>
 800ad48:	46a1      	mov	r9, r4
 800ad4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad4e:	f1c1 0820 	rsb	r8, r1, #32
 800ad52:	40cf      	lsrs	r7, r1
 800ad54:	f105 0e04 	add.w	lr, r5, #4
 800ad58:	4576      	cmp	r6, lr
 800ad5a:	46f4      	mov	ip, lr
 800ad5c:	d816      	bhi.n	800ad8c <rshift+0x80>
 800ad5e:	1a9a      	subs	r2, r3, r2
 800ad60:	0092      	lsls	r2, r2, #2
 800ad62:	3a04      	subs	r2, #4
 800ad64:	3501      	adds	r5, #1
 800ad66:	42ae      	cmp	r6, r5
 800ad68:	bf38      	it	cc
 800ad6a:	2200      	movcc	r2, #0
 800ad6c:	18a3      	adds	r3, r4, r2
 800ad6e:	50a7      	str	r7, [r4, r2]
 800ad70:	b107      	cbz	r7, 800ad74 <rshift+0x68>
 800ad72:	3304      	adds	r3, #4
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	eba3 0204 	sub.w	r2, r3, r4
 800ad7a:	bf08      	it	eq
 800ad7c:	2300      	moveq	r3, #0
 800ad7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad82:	6102      	str	r2, [r0, #16]
 800ad84:	bf08      	it	eq
 800ad86:	6143      	streq	r3, [r0, #20]
 800ad88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad8c:	f8dc c000 	ldr.w	ip, [ip]
 800ad90:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad94:	ea4c 0707 	orr.w	r7, ip, r7
 800ad98:	f849 7b04 	str.w	r7, [r9], #4
 800ad9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ada0:	40cf      	lsrs	r7, r1
 800ada2:	e7d9      	b.n	800ad58 <rshift+0x4c>
 800ada4:	f851 cb04 	ldr.w	ip, [r1], #4
 800ada8:	f847 cf04 	str.w	ip, [r7, #4]!
 800adac:	e7c2      	b.n	800ad34 <rshift+0x28>
 800adae:	4623      	mov	r3, r4
 800adb0:	e7e0      	b.n	800ad74 <rshift+0x68>

0800adb2 <__hexdig_fun>:
 800adb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800adb6:	2b09      	cmp	r3, #9
 800adb8:	d802      	bhi.n	800adc0 <__hexdig_fun+0xe>
 800adba:	3820      	subs	r0, #32
 800adbc:	b2c0      	uxtb	r0, r0
 800adbe:	4770      	bx	lr
 800adc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d801      	bhi.n	800adcc <__hexdig_fun+0x1a>
 800adc8:	3847      	subs	r0, #71	; 0x47
 800adca:	e7f7      	b.n	800adbc <__hexdig_fun+0xa>
 800adcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800add0:	2b05      	cmp	r3, #5
 800add2:	d801      	bhi.n	800add8 <__hexdig_fun+0x26>
 800add4:	3827      	subs	r0, #39	; 0x27
 800add6:	e7f1      	b.n	800adbc <__hexdig_fun+0xa>
 800add8:	2000      	movs	r0, #0
 800adda:	4770      	bx	lr

0800addc <__gethex>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	b08b      	sub	sp, #44	; 0x2c
 800ade2:	9305      	str	r3, [sp, #20]
 800ade4:	4bb2      	ldr	r3, [pc, #712]	; (800b0b0 <__gethex+0x2d4>)
 800ade6:	9002      	str	r0, [sp, #8]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	468b      	mov	fp, r1
 800adec:	4618      	mov	r0, r3
 800adee:	4690      	mov	r8, r2
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	f7f5 f9ad 	bl	8000150 <strlen>
 800adf6:	4682      	mov	sl, r0
 800adf8:	9b03      	ldr	r3, [sp, #12]
 800adfa:	f8db 2000 	ldr.w	r2, [fp]
 800adfe:	4403      	add	r3, r0
 800ae00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae04:	9306      	str	r3, [sp, #24]
 800ae06:	1c93      	adds	r3, r2, #2
 800ae08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ae0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae10:	32fe      	adds	r2, #254	; 0xfe
 800ae12:	18d1      	adds	r1, r2, r3
 800ae14:	461f      	mov	r7, r3
 800ae16:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae1a:	9101      	str	r1, [sp, #4]
 800ae1c:	2830      	cmp	r0, #48	; 0x30
 800ae1e:	d0f8      	beq.n	800ae12 <__gethex+0x36>
 800ae20:	f7ff ffc7 	bl	800adb2 <__hexdig_fun>
 800ae24:	4604      	mov	r4, r0
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d13a      	bne.n	800aea0 <__gethex+0xc4>
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	9903      	ldr	r1, [sp, #12]
 800ae30:	f001 fa18 	bl	800c264 <strncmp>
 800ae34:	4605      	mov	r5, r0
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d166      	bne.n	800af08 <__gethex+0x12c>
 800ae3a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae3e:	eb07 060a 	add.w	r6, r7, sl
 800ae42:	f7ff ffb6 	bl	800adb2 <__hexdig_fun>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d060      	beq.n	800af0c <__gethex+0x130>
 800ae4a:	4633      	mov	r3, r6
 800ae4c:	7818      	ldrb	r0, [r3, #0]
 800ae4e:	461f      	mov	r7, r3
 800ae50:	2830      	cmp	r0, #48	; 0x30
 800ae52:	f103 0301 	add.w	r3, r3, #1
 800ae56:	d0f9      	beq.n	800ae4c <__gethex+0x70>
 800ae58:	f7ff ffab 	bl	800adb2 <__hexdig_fun>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	fab0 f480 	clz	r4, r0
 800ae62:	4635      	mov	r5, r6
 800ae64:	0964      	lsrs	r4, r4, #5
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	463a      	mov	r2, r7
 800ae6a:	4616      	mov	r6, r2
 800ae6c:	7830      	ldrb	r0, [r6, #0]
 800ae6e:	3201      	adds	r2, #1
 800ae70:	f7ff ff9f 	bl	800adb2 <__hexdig_fun>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d1f8      	bne.n	800ae6a <__gethex+0x8e>
 800ae78:	4652      	mov	r2, sl
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	9903      	ldr	r1, [sp, #12]
 800ae7e:	f001 f9f1 	bl	800c264 <strncmp>
 800ae82:	b980      	cbnz	r0, 800aea6 <__gethex+0xca>
 800ae84:	b94d      	cbnz	r5, 800ae9a <__gethex+0xbe>
 800ae86:	eb06 050a 	add.w	r5, r6, sl
 800ae8a:	462a      	mov	r2, r5
 800ae8c:	4616      	mov	r6, r2
 800ae8e:	7830      	ldrb	r0, [r6, #0]
 800ae90:	3201      	adds	r2, #1
 800ae92:	f7ff ff8e 	bl	800adb2 <__hexdig_fun>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d1f8      	bne.n	800ae8c <__gethex+0xb0>
 800ae9a:	1bad      	subs	r5, r5, r6
 800ae9c:	00ad      	lsls	r5, r5, #2
 800ae9e:	e004      	b.n	800aeaa <__gethex+0xce>
 800aea0:	2400      	movs	r4, #0
 800aea2:	4625      	mov	r5, r4
 800aea4:	e7e0      	b.n	800ae68 <__gethex+0x8c>
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	d1f7      	bne.n	800ae9a <__gethex+0xbe>
 800aeaa:	7833      	ldrb	r3, [r6, #0]
 800aeac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aeb0:	2b50      	cmp	r3, #80	; 0x50
 800aeb2:	d139      	bne.n	800af28 <__gethex+0x14c>
 800aeb4:	7873      	ldrb	r3, [r6, #1]
 800aeb6:	2b2b      	cmp	r3, #43	; 0x2b
 800aeb8:	d02a      	beq.n	800af10 <__gethex+0x134>
 800aeba:	2b2d      	cmp	r3, #45	; 0x2d
 800aebc:	d02c      	beq.n	800af18 <__gethex+0x13c>
 800aebe:	f04f 0900 	mov.w	r9, #0
 800aec2:	1c71      	adds	r1, r6, #1
 800aec4:	7808      	ldrb	r0, [r1, #0]
 800aec6:	f7ff ff74 	bl	800adb2 <__hexdig_fun>
 800aeca:	1e43      	subs	r3, r0, #1
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b18      	cmp	r3, #24
 800aed0:	d82a      	bhi.n	800af28 <__gethex+0x14c>
 800aed2:	f1a0 0210 	sub.w	r2, r0, #16
 800aed6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aeda:	f7ff ff6a 	bl	800adb2 <__hexdig_fun>
 800aede:	1e43      	subs	r3, r0, #1
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b18      	cmp	r3, #24
 800aee4:	d91b      	bls.n	800af1e <__gethex+0x142>
 800aee6:	f1b9 0f00 	cmp.w	r9, #0
 800aeea:	d000      	beq.n	800aeee <__gethex+0x112>
 800aeec:	4252      	negs	r2, r2
 800aeee:	4415      	add	r5, r2
 800aef0:	f8cb 1000 	str.w	r1, [fp]
 800aef4:	b1d4      	cbz	r4, 800af2c <__gethex+0x150>
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bf14      	ite	ne
 800aefc:	2700      	movne	r7, #0
 800aefe:	2706      	moveq	r7, #6
 800af00:	4638      	mov	r0, r7
 800af02:	b00b      	add	sp, #44	; 0x2c
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	463e      	mov	r6, r7
 800af0a:	4625      	mov	r5, r4
 800af0c:	2401      	movs	r4, #1
 800af0e:	e7cc      	b.n	800aeaa <__gethex+0xce>
 800af10:	f04f 0900 	mov.w	r9, #0
 800af14:	1cb1      	adds	r1, r6, #2
 800af16:	e7d5      	b.n	800aec4 <__gethex+0xe8>
 800af18:	f04f 0901 	mov.w	r9, #1
 800af1c:	e7fa      	b.n	800af14 <__gethex+0x138>
 800af1e:	230a      	movs	r3, #10
 800af20:	fb03 0202 	mla	r2, r3, r2, r0
 800af24:	3a10      	subs	r2, #16
 800af26:	e7d6      	b.n	800aed6 <__gethex+0xfa>
 800af28:	4631      	mov	r1, r6
 800af2a:	e7e1      	b.n	800aef0 <__gethex+0x114>
 800af2c:	4621      	mov	r1, r4
 800af2e:	1bf3      	subs	r3, r6, r7
 800af30:	3b01      	subs	r3, #1
 800af32:	2b07      	cmp	r3, #7
 800af34:	dc0a      	bgt.n	800af4c <__gethex+0x170>
 800af36:	9802      	ldr	r0, [sp, #8]
 800af38:	f000 fa7a 	bl	800b430 <_Balloc>
 800af3c:	4604      	mov	r4, r0
 800af3e:	b940      	cbnz	r0, 800af52 <__gethex+0x176>
 800af40:	4602      	mov	r2, r0
 800af42:	21de      	movs	r1, #222	; 0xde
 800af44:	4b5b      	ldr	r3, [pc, #364]	; (800b0b4 <__gethex+0x2d8>)
 800af46:	485c      	ldr	r0, [pc, #368]	; (800b0b8 <__gethex+0x2dc>)
 800af48:	f001 f9ae 	bl	800c2a8 <__assert_func>
 800af4c:	3101      	adds	r1, #1
 800af4e:	105b      	asrs	r3, r3, #1
 800af50:	e7ef      	b.n	800af32 <__gethex+0x156>
 800af52:	f04f 0b00 	mov.w	fp, #0
 800af56:	f100 0914 	add.w	r9, r0, #20
 800af5a:	f1ca 0301 	rsb	r3, sl, #1
 800af5e:	f8cd 9010 	str.w	r9, [sp, #16]
 800af62:	f8cd b004 	str.w	fp, [sp, #4]
 800af66:	9308      	str	r3, [sp, #32]
 800af68:	42b7      	cmp	r7, r6
 800af6a:	d33f      	bcc.n	800afec <__gethex+0x210>
 800af6c:	9f04      	ldr	r7, [sp, #16]
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	f847 3b04 	str.w	r3, [r7], #4
 800af74:	eba7 0709 	sub.w	r7, r7, r9
 800af78:	10bf      	asrs	r7, r7, #2
 800af7a:	6127      	str	r7, [r4, #16]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 fb49 	bl	800b614 <__hi0bits>
 800af82:	017f      	lsls	r7, r7, #5
 800af84:	f8d8 6000 	ldr.w	r6, [r8]
 800af88:	1a3f      	subs	r7, r7, r0
 800af8a:	42b7      	cmp	r7, r6
 800af8c:	dd62      	ble.n	800b054 <__gethex+0x278>
 800af8e:	1bbf      	subs	r7, r7, r6
 800af90:	4639      	mov	r1, r7
 800af92:	4620      	mov	r0, r4
 800af94:	f000 fee3 	bl	800bd5e <__any_on>
 800af98:	4682      	mov	sl, r0
 800af9a:	b1a8      	cbz	r0, 800afc8 <__gethex+0x1ec>
 800af9c:	f04f 0a01 	mov.w	sl, #1
 800afa0:	1e7b      	subs	r3, r7, #1
 800afa2:	1159      	asrs	r1, r3, #5
 800afa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800afa8:	f003 021f 	and.w	r2, r3, #31
 800afac:	fa0a f202 	lsl.w	r2, sl, r2
 800afb0:	420a      	tst	r2, r1
 800afb2:	d009      	beq.n	800afc8 <__gethex+0x1ec>
 800afb4:	4553      	cmp	r3, sl
 800afb6:	dd05      	ble.n	800afc4 <__gethex+0x1e8>
 800afb8:	4620      	mov	r0, r4
 800afba:	1eb9      	subs	r1, r7, #2
 800afbc:	f000 fecf 	bl	800bd5e <__any_on>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d144      	bne.n	800b04e <__gethex+0x272>
 800afc4:	f04f 0a02 	mov.w	sl, #2
 800afc8:	4639      	mov	r1, r7
 800afca:	4620      	mov	r0, r4
 800afcc:	f7ff fe9e 	bl	800ad0c <rshift>
 800afd0:	443d      	add	r5, r7
 800afd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afd6:	42ab      	cmp	r3, r5
 800afd8:	da4a      	bge.n	800b070 <__gethex+0x294>
 800afda:	4621      	mov	r1, r4
 800afdc:	9802      	ldr	r0, [sp, #8]
 800afde:	f000 fa67 	bl	800b4b0 <_Bfree>
 800afe2:	2300      	movs	r3, #0
 800afe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afe6:	27a3      	movs	r7, #163	; 0xa3
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	e789      	b.n	800af00 <__gethex+0x124>
 800afec:	1e73      	subs	r3, r6, #1
 800afee:	9a06      	ldr	r2, [sp, #24]
 800aff0:	9307      	str	r3, [sp, #28]
 800aff2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d019      	beq.n	800b02e <__gethex+0x252>
 800affa:	f1bb 0f20 	cmp.w	fp, #32
 800affe:	d107      	bne.n	800b010 <__gethex+0x234>
 800b000:	9b04      	ldr	r3, [sp, #16]
 800b002:	9a01      	ldr	r2, [sp, #4]
 800b004:	f843 2b04 	str.w	r2, [r3], #4
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	2300      	movs	r3, #0
 800b00c:	469b      	mov	fp, r3
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b014:	f7ff fecd 	bl	800adb2 <__hexdig_fun>
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	f000 000f 	and.w	r0, r0, #15
 800b01e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b022:	4303      	orrs	r3, r0
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	f10b 0b04 	add.w	fp, fp, #4
 800b02a:	9b07      	ldr	r3, [sp, #28]
 800b02c:	e00d      	b.n	800b04a <__gethex+0x26e>
 800b02e:	9a08      	ldr	r2, [sp, #32]
 800b030:	1e73      	subs	r3, r6, #1
 800b032:	4413      	add	r3, r2
 800b034:	42bb      	cmp	r3, r7
 800b036:	d3e0      	bcc.n	800affa <__gethex+0x21e>
 800b038:	4618      	mov	r0, r3
 800b03a:	4652      	mov	r2, sl
 800b03c:	9903      	ldr	r1, [sp, #12]
 800b03e:	9309      	str	r3, [sp, #36]	; 0x24
 800b040:	f001 f910 	bl	800c264 <strncmp>
 800b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b046:	2800      	cmp	r0, #0
 800b048:	d1d7      	bne.n	800affa <__gethex+0x21e>
 800b04a:	461e      	mov	r6, r3
 800b04c:	e78c      	b.n	800af68 <__gethex+0x18c>
 800b04e:	f04f 0a03 	mov.w	sl, #3
 800b052:	e7b9      	b.n	800afc8 <__gethex+0x1ec>
 800b054:	da09      	bge.n	800b06a <__gethex+0x28e>
 800b056:	1bf7      	subs	r7, r6, r7
 800b058:	4621      	mov	r1, r4
 800b05a:	463a      	mov	r2, r7
 800b05c:	9802      	ldr	r0, [sp, #8]
 800b05e:	f000 fc3f 	bl	800b8e0 <__lshift>
 800b062:	4604      	mov	r4, r0
 800b064:	1bed      	subs	r5, r5, r7
 800b066:	f100 0914 	add.w	r9, r0, #20
 800b06a:	f04f 0a00 	mov.w	sl, #0
 800b06e:	e7b0      	b.n	800afd2 <__gethex+0x1f6>
 800b070:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b074:	42a8      	cmp	r0, r5
 800b076:	dd72      	ble.n	800b15e <__gethex+0x382>
 800b078:	1b45      	subs	r5, r0, r5
 800b07a:	42ae      	cmp	r6, r5
 800b07c:	dc35      	bgt.n	800b0ea <__gethex+0x30e>
 800b07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b082:	2b02      	cmp	r3, #2
 800b084:	d029      	beq.n	800b0da <__gethex+0x2fe>
 800b086:	2b03      	cmp	r3, #3
 800b088:	d02b      	beq.n	800b0e2 <__gethex+0x306>
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d11c      	bne.n	800b0c8 <__gethex+0x2ec>
 800b08e:	42ae      	cmp	r6, r5
 800b090:	d11a      	bne.n	800b0c8 <__gethex+0x2ec>
 800b092:	2e01      	cmp	r6, #1
 800b094:	d112      	bne.n	800b0bc <__gethex+0x2e0>
 800b096:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b09a:	9a05      	ldr	r2, [sp, #20]
 800b09c:	2762      	movs	r7, #98	; 0x62
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	f8c9 3000 	str.w	r3, [r9]
 800b0a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0aa:	601c      	str	r4, [r3, #0]
 800b0ac:	e728      	b.n	800af00 <__gethex+0x124>
 800b0ae:	bf00      	nop
 800b0b0:	0800d100 	.word	0x0800d100
 800b0b4:	0800d088 	.word	0x0800d088
 800b0b8:	0800d099 	.word	0x0800d099
 800b0bc:	4620      	mov	r0, r4
 800b0be:	1e71      	subs	r1, r6, #1
 800b0c0:	f000 fe4d 	bl	800bd5e <__any_on>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1e6      	bne.n	800b096 <__gethex+0x2ba>
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	9802      	ldr	r0, [sp, #8]
 800b0cc:	f000 f9f0 	bl	800b4b0 <_Bfree>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0d4:	2750      	movs	r7, #80	; 0x50
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	e712      	b.n	800af00 <__gethex+0x124>
 800b0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f3      	bne.n	800b0c8 <__gethex+0x2ec>
 800b0e0:	e7d9      	b.n	800b096 <__gethex+0x2ba>
 800b0e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1d6      	bne.n	800b096 <__gethex+0x2ba>
 800b0e8:	e7ee      	b.n	800b0c8 <__gethex+0x2ec>
 800b0ea:	1e6f      	subs	r7, r5, #1
 800b0ec:	f1ba 0f00 	cmp.w	sl, #0
 800b0f0:	d132      	bne.n	800b158 <__gethex+0x37c>
 800b0f2:	b127      	cbz	r7, 800b0fe <__gethex+0x322>
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 fe31 	bl	800bd5e <__any_on>
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	2101      	movs	r1, #1
 800b100:	117b      	asrs	r3, r7, #5
 800b102:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b106:	f007 071f 	and.w	r7, r7, #31
 800b10a:	fa01 f707 	lsl.w	r7, r1, r7
 800b10e:	421f      	tst	r7, r3
 800b110:	f04f 0702 	mov.w	r7, #2
 800b114:	4629      	mov	r1, r5
 800b116:	4620      	mov	r0, r4
 800b118:	bf18      	it	ne
 800b11a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b11e:	1b76      	subs	r6, r6, r5
 800b120:	f7ff fdf4 	bl	800ad0c <rshift>
 800b124:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b128:	f1ba 0f00 	cmp.w	sl, #0
 800b12c:	d048      	beq.n	800b1c0 <__gethex+0x3e4>
 800b12e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b132:	2b02      	cmp	r3, #2
 800b134:	d015      	beq.n	800b162 <__gethex+0x386>
 800b136:	2b03      	cmp	r3, #3
 800b138:	d017      	beq.n	800b16a <__gethex+0x38e>
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d109      	bne.n	800b152 <__gethex+0x376>
 800b13e:	f01a 0f02 	tst.w	sl, #2
 800b142:	d006      	beq.n	800b152 <__gethex+0x376>
 800b144:	f8d9 0000 	ldr.w	r0, [r9]
 800b148:	ea4a 0a00 	orr.w	sl, sl, r0
 800b14c:	f01a 0f01 	tst.w	sl, #1
 800b150:	d10e      	bne.n	800b170 <__gethex+0x394>
 800b152:	f047 0710 	orr.w	r7, r7, #16
 800b156:	e033      	b.n	800b1c0 <__gethex+0x3e4>
 800b158:	f04f 0a01 	mov.w	sl, #1
 800b15c:	e7cf      	b.n	800b0fe <__gethex+0x322>
 800b15e:	2701      	movs	r7, #1
 800b160:	e7e2      	b.n	800b128 <__gethex+0x34c>
 800b162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b164:	f1c3 0301 	rsb	r3, r3, #1
 800b168:	9315      	str	r3, [sp, #84]	; 0x54
 800b16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0f0      	beq.n	800b152 <__gethex+0x376>
 800b170:	f04f 0c00 	mov.w	ip, #0
 800b174:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b178:	f104 0314 	add.w	r3, r4, #20
 800b17c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b180:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b184:	4618      	mov	r0, r3
 800b186:	f853 2b04 	ldr.w	r2, [r3], #4
 800b18a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b18e:	d01c      	beq.n	800b1ca <__gethex+0x3ee>
 800b190:	3201      	adds	r2, #1
 800b192:	6002      	str	r2, [r0, #0]
 800b194:	2f02      	cmp	r7, #2
 800b196:	f104 0314 	add.w	r3, r4, #20
 800b19a:	d13d      	bne.n	800b218 <__gethex+0x43c>
 800b19c:	f8d8 2000 	ldr.w	r2, [r8]
 800b1a0:	3a01      	subs	r2, #1
 800b1a2:	42b2      	cmp	r2, r6
 800b1a4:	d10a      	bne.n	800b1bc <__gethex+0x3e0>
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	1171      	asrs	r1, r6, #5
 800b1aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1ae:	f006 061f 	and.w	r6, r6, #31
 800b1b2:	fa02 f606 	lsl.w	r6, r2, r6
 800b1b6:	421e      	tst	r6, r3
 800b1b8:	bf18      	it	ne
 800b1ba:	4617      	movne	r7, r2
 800b1bc:	f047 0720 	orr.w	r7, r7, #32
 800b1c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1c2:	601c      	str	r4, [r3, #0]
 800b1c4:	9b05      	ldr	r3, [sp, #20]
 800b1c6:	601d      	str	r5, [r3, #0]
 800b1c8:	e69a      	b.n	800af00 <__gethex+0x124>
 800b1ca:	4299      	cmp	r1, r3
 800b1cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1d0:	d8d8      	bhi.n	800b184 <__gethex+0x3a8>
 800b1d2:	68a3      	ldr	r3, [r4, #8]
 800b1d4:	459b      	cmp	fp, r3
 800b1d6:	db17      	blt.n	800b208 <__gethex+0x42c>
 800b1d8:	6861      	ldr	r1, [r4, #4]
 800b1da:	9802      	ldr	r0, [sp, #8]
 800b1dc:	3101      	adds	r1, #1
 800b1de:	f000 f927 	bl	800b430 <_Balloc>
 800b1e2:	4681      	mov	r9, r0
 800b1e4:	b918      	cbnz	r0, 800b1ee <__gethex+0x412>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	2184      	movs	r1, #132	; 0x84
 800b1ea:	4b19      	ldr	r3, [pc, #100]	; (800b250 <__gethex+0x474>)
 800b1ec:	e6ab      	b.n	800af46 <__gethex+0x16a>
 800b1ee:	6922      	ldr	r2, [r4, #16]
 800b1f0:	f104 010c 	add.w	r1, r4, #12
 800b1f4:	3202      	adds	r2, #2
 800b1f6:	0092      	lsls	r2, r2, #2
 800b1f8:	300c      	adds	r0, #12
 800b1fa:	f7fd f9cf 	bl	800859c <memcpy>
 800b1fe:	4621      	mov	r1, r4
 800b200:	9802      	ldr	r0, [sp, #8]
 800b202:	f000 f955 	bl	800b4b0 <_Bfree>
 800b206:	464c      	mov	r4, r9
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	6122      	str	r2, [r4, #16]
 800b20e:	2201      	movs	r2, #1
 800b210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b214:	615a      	str	r2, [r3, #20]
 800b216:	e7bd      	b.n	800b194 <__gethex+0x3b8>
 800b218:	6922      	ldr	r2, [r4, #16]
 800b21a:	455a      	cmp	r2, fp
 800b21c:	dd0b      	ble.n	800b236 <__gethex+0x45a>
 800b21e:	2101      	movs	r1, #1
 800b220:	4620      	mov	r0, r4
 800b222:	f7ff fd73 	bl	800ad0c <rshift>
 800b226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b22a:	3501      	adds	r5, #1
 800b22c:	42ab      	cmp	r3, r5
 800b22e:	f6ff aed4 	blt.w	800afda <__gethex+0x1fe>
 800b232:	2701      	movs	r7, #1
 800b234:	e7c2      	b.n	800b1bc <__gethex+0x3e0>
 800b236:	f016 061f 	ands.w	r6, r6, #31
 800b23a:	d0fa      	beq.n	800b232 <__gethex+0x456>
 800b23c:	4453      	add	r3, sl
 800b23e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b242:	f000 f9e7 	bl	800b614 <__hi0bits>
 800b246:	f1c6 0620 	rsb	r6, r6, #32
 800b24a:	42b0      	cmp	r0, r6
 800b24c:	dbe7      	blt.n	800b21e <__gethex+0x442>
 800b24e:	e7f0      	b.n	800b232 <__gethex+0x456>
 800b250:	0800d088 	.word	0x0800d088

0800b254 <L_shift>:
 800b254:	f1c2 0208 	rsb	r2, r2, #8
 800b258:	0092      	lsls	r2, r2, #2
 800b25a:	b570      	push	{r4, r5, r6, lr}
 800b25c:	f1c2 0620 	rsb	r6, r2, #32
 800b260:	6843      	ldr	r3, [r0, #4]
 800b262:	6804      	ldr	r4, [r0, #0]
 800b264:	fa03 f506 	lsl.w	r5, r3, r6
 800b268:	432c      	orrs	r4, r5
 800b26a:	40d3      	lsrs	r3, r2
 800b26c:	6004      	str	r4, [r0, #0]
 800b26e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b272:	4288      	cmp	r0, r1
 800b274:	d3f4      	bcc.n	800b260 <L_shift+0xc>
 800b276:	bd70      	pop	{r4, r5, r6, pc}

0800b278 <__match>:
 800b278:	b530      	push	{r4, r5, lr}
 800b27a:	6803      	ldr	r3, [r0, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b282:	b914      	cbnz	r4, 800b28a <__match+0x12>
 800b284:	6003      	str	r3, [r0, #0]
 800b286:	2001      	movs	r0, #1
 800b288:	bd30      	pop	{r4, r5, pc}
 800b28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b28e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b292:	2d19      	cmp	r5, #25
 800b294:	bf98      	it	ls
 800b296:	3220      	addls	r2, #32
 800b298:	42a2      	cmp	r2, r4
 800b29a:	d0f0      	beq.n	800b27e <__match+0x6>
 800b29c:	2000      	movs	r0, #0
 800b29e:	e7f3      	b.n	800b288 <__match+0x10>

0800b2a0 <__hexnan>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	2500      	movs	r5, #0
 800b2a6:	680b      	ldr	r3, [r1, #0]
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	115e      	asrs	r6, r3, #5
 800b2ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2b0:	f013 031f 	ands.w	r3, r3, #31
 800b2b4:	bf18      	it	ne
 800b2b6:	3604      	addne	r6, #4
 800b2b8:	1f37      	subs	r7, r6, #4
 800b2ba:	46b9      	mov	r9, r7
 800b2bc:	463c      	mov	r4, r7
 800b2be:	46ab      	mov	fp, r5
 800b2c0:	b087      	sub	sp, #28
 800b2c2:	4690      	mov	r8, r2
 800b2c4:	6802      	ldr	r2, [r0, #0]
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2cc:	9502      	str	r5, [sp, #8]
 800b2ce:	7851      	ldrb	r1, [r2, #1]
 800b2d0:	1c53      	adds	r3, r2, #1
 800b2d2:	9303      	str	r3, [sp, #12]
 800b2d4:	b341      	cbz	r1, 800b328 <__hexnan+0x88>
 800b2d6:	4608      	mov	r0, r1
 800b2d8:	9205      	str	r2, [sp, #20]
 800b2da:	9104      	str	r1, [sp, #16]
 800b2dc:	f7ff fd69 	bl	800adb2 <__hexdig_fun>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d14f      	bne.n	800b384 <__hexnan+0xe4>
 800b2e4:	9904      	ldr	r1, [sp, #16]
 800b2e6:	9a05      	ldr	r2, [sp, #20]
 800b2e8:	2920      	cmp	r1, #32
 800b2ea:	d818      	bhi.n	800b31e <__hexnan+0x7e>
 800b2ec:	9b02      	ldr	r3, [sp, #8]
 800b2ee:	459b      	cmp	fp, r3
 800b2f0:	dd13      	ble.n	800b31a <__hexnan+0x7a>
 800b2f2:	454c      	cmp	r4, r9
 800b2f4:	d206      	bcs.n	800b304 <__hexnan+0x64>
 800b2f6:	2d07      	cmp	r5, #7
 800b2f8:	dc04      	bgt.n	800b304 <__hexnan+0x64>
 800b2fa:	462a      	mov	r2, r5
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff ffa8 	bl	800b254 <L_shift>
 800b304:	4544      	cmp	r4, r8
 800b306:	d950      	bls.n	800b3aa <__hexnan+0x10a>
 800b308:	2300      	movs	r3, #0
 800b30a:	f1a4 0904 	sub.w	r9, r4, #4
 800b30e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b312:	461d      	mov	r5, r3
 800b314:	464c      	mov	r4, r9
 800b316:	f8cd b008 	str.w	fp, [sp, #8]
 800b31a:	9a03      	ldr	r2, [sp, #12]
 800b31c:	e7d7      	b.n	800b2ce <__hexnan+0x2e>
 800b31e:	2929      	cmp	r1, #41	; 0x29
 800b320:	d156      	bne.n	800b3d0 <__hexnan+0x130>
 800b322:	3202      	adds	r2, #2
 800b324:	f8ca 2000 	str.w	r2, [sl]
 800b328:	f1bb 0f00 	cmp.w	fp, #0
 800b32c:	d050      	beq.n	800b3d0 <__hexnan+0x130>
 800b32e:	454c      	cmp	r4, r9
 800b330:	d206      	bcs.n	800b340 <__hexnan+0xa0>
 800b332:	2d07      	cmp	r5, #7
 800b334:	dc04      	bgt.n	800b340 <__hexnan+0xa0>
 800b336:	462a      	mov	r2, r5
 800b338:	4649      	mov	r1, r9
 800b33a:	4620      	mov	r0, r4
 800b33c:	f7ff ff8a 	bl	800b254 <L_shift>
 800b340:	4544      	cmp	r4, r8
 800b342:	d934      	bls.n	800b3ae <__hexnan+0x10e>
 800b344:	4623      	mov	r3, r4
 800b346:	f1a8 0204 	sub.w	r2, r8, #4
 800b34a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b34e:	429f      	cmp	r7, r3
 800b350:	f842 1f04 	str.w	r1, [r2, #4]!
 800b354:	d2f9      	bcs.n	800b34a <__hexnan+0xaa>
 800b356:	1b3b      	subs	r3, r7, r4
 800b358:	f023 0303 	bic.w	r3, r3, #3
 800b35c:	3304      	adds	r3, #4
 800b35e:	3401      	adds	r4, #1
 800b360:	3e03      	subs	r6, #3
 800b362:	42b4      	cmp	r4, r6
 800b364:	bf88      	it	hi
 800b366:	2304      	movhi	r3, #4
 800b368:	2200      	movs	r2, #0
 800b36a:	4443      	add	r3, r8
 800b36c:	f843 2b04 	str.w	r2, [r3], #4
 800b370:	429f      	cmp	r7, r3
 800b372:	d2fb      	bcs.n	800b36c <__hexnan+0xcc>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	b91b      	cbnz	r3, 800b380 <__hexnan+0xe0>
 800b378:	4547      	cmp	r7, r8
 800b37a:	d127      	bne.n	800b3cc <__hexnan+0x12c>
 800b37c:	2301      	movs	r3, #1
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	2005      	movs	r0, #5
 800b382:	e026      	b.n	800b3d2 <__hexnan+0x132>
 800b384:	3501      	adds	r5, #1
 800b386:	2d08      	cmp	r5, #8
 800b388:	f10b 0b01 	add.w	fp, fp, #1
 800b38c:	dd06      	ble.n	800b39c <__hexnan+0xfc>
 800b38e:	4544      	cmp	r4, r8
 800b390:	d9c3      	bls.n	800b31a <__hexnan+0x7a>
 800b392:	2300      	movs	r3, #0
 800b394:	2501      	movs	r5, #1
 800b396:	f844 3c04 	str.w	r3, [r4, #-4]
 800b39a:	3c04      	subs	r4, #4
 800b39c:	6822      	ldr	r2, [r4, #0]
 800b39e:	f000 000f 	and.w	r0, r0, #15
 800b3a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b3a6:	6022      	str	r2, [r4, #0]
 800b3a8:	e7b7      	b.n	800b31a <__hexnan+0x7a>
 800b3aa:	2508      	movs	r5, #8
 800b3ac:	e7b5      	b.n	800b31a <__hexnan+0x7a>
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0df      	beq.n	800b374 <__hexnan+0xd4>
 800b3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b8:	f1c3 0320 	rsb	r3, r3, #32
 800b3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3c4:	401a      	ands	r2, r3
 800b3c6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b3ca:	e7d3      	b.n	800b374 <__hexnan+0xd4>
 800b3cc:	3f04      	subs	r7, #4
 800b3ce:	e7d1      	b.n	800b374 <__hexnan+0xd4>
 800b3d0:	2004      	movs	r0, #4
 800b3d2:	b007      	add	sp, #28
 800b3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3d8 <_localeconv_r>:
 800b3d8:	4800      	ldr	r0, [pc, #0]	; (800b3dc <_localeconv_r+0x4>)
 800b3da:	4770      	bx	lr
 800b3dc:	20000424 	.word	0x20000424

0800b3e0 <malloc>:
 800b3e0:	4b02      	ldr	r3, [pc, #8]	; (800b3ec <malloc+0xc>)
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	6818      	ldr	r0, [r3, #0]
 800b3e6:	f000 bd57 	b.w	800be98 <_malloc_r>
 800b3ea:	bf00      	nop
 800b3ec:	200002cc 	.word	0x200002cc

0800b3f0 <__ascii_mbtowc>:
 800b3f0:	b082      	sub	sp, #8
 800b3f2:	b901      	cbnz	r1, 800b3f6 <__ascii_mbtowc+0x6>
 800b3f4:	a901      	add	r1, sp, #4
 800b3f6:	b142      	cbz	r2, 800b40a <__ascii_mbtowc+0x1a>
 800b3f8:	b14b      	cbz	r3, 800b40e <__ascii_mbtowc+0x1e>
 800b3fa:	7813      	ldrb	r3, [r2, #0]
 800b3fc:	600b      	str	r3, [r1, #0]
 800b3fe:	7812      	ldrb	r2, [r2, #0]
 800b400:	1e10      	subs	r0, r2, #0
 800b402:	bf18      	it	ne
 800b404:	2001      	movne	r0, #1
 800b406:	b002      	add	sp, #8
 800b408:	4770      	bx	lr
 800b40a:	4610      	mov	r0, r2
 800b40c:	e7fb      	b.n	800b406 <__ascii_mbtowc+0x16>
 800b40e:	f06f 0001 	mvn.w	r0, #1
 800b412:	e7f8      	b.n	800b406 <__ascii_mbtowc+0x16>

0800b414 <memchr>:
 800b414:	4603      	mov	r3, r0
 800b416:	b510      	push	{r4, lr}
 800b418:	b2c9      	uxtb	r1, r1
 800b41a:	4402      	add	r2, r0
 800b41c:	4293      	cmp	r3, r2
 800b41e:	4618      	mov	r0, r3
 800b420:	d101      	bne.n	800b426 <memchr+0x12>
 800b422:	2000      	movs	r0, #0
 800b424:	e003      	b.n	800b42e <memchr+0x1a>
 800b426:	7804      	ldrb	r4, [r0, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	428c      	cmp	r4, r1
 800b42c:	d1f6      	bne.n	800b41c <memchr+0x8>
 800b42e:	bd10      	pop	{r4, pc}

0800b430 <_Balloc>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b434:	4604      	mov	r4, r0
 800b436:	460d      	mov	r5, r1
 800b438:	b976      	cbnz	r6, 800b458 <_Balloc+0x28>
 800b43a:	2010      	movs	r0, #16
 800b43c:	f7ff ffd0 	bl	800b3e0 <malloc>
 800b440:	4602      	mov	r2, r0
 800b442:	6260      	str	r0, [r4, #36]	; 0x24
 800b444:	b920      	cbnz	r0, 800b450 <_Balloc+0x20>
 800b446:	2166      	movs	r1, #102	; 0x66
 800b448:	4b17      	ldr	r3, [pc, #92]	; (800b4a8 <_Balloc+0x78>)
 800b44a:	4818      	ldr	r0, [pc, #96]	; (800b4ac <_Balloc+0x7c>)
 800b44c:	f000 ff2c 	bl	800c2a8 <__assert_func>
 800b450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b454:	6006      	str	r6, [r0, #0]
 800b456:	60c6      	str	r6, [r0, #12]
 800b458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b45a:	68f3      	ldr	r3, [r6, #12]
 800b45c:	b183      	cbz	r3, 800b480 <_Balloc+0x50>
 800b45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b466:	b9b8      	cbnz	r0, 800b498 <_Balloc+0x68>
 800b468:	2101      	movs	r1, #1
 800b46a:	fa01 f605 	lsl.w	r6, r1, r5
 800b46e:	1d72      	adds	r2, r6, #5
 800b470:	4620      	mov	r0, r4
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	f000 fc94 	bl	800bda0 <_calloc_r>
 800b478:	b160      	cbz	r0, 800b494 <_Balloc+0x64>
 800b47a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b47e:	e00e      	b.n	800b49e <_Balloc+0x6e>
 800b480:	2221      	movs	r2, #33	; 0x21
 800b482:	2104      	movs	r1, #4
 800b484:	4620      	mov	r0, r4
 800b486:	f000 fc8b 	bl	800bda0 <_calloc_r>
 800b48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b48c:	60f0      	str	r0, [r6, #12]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e4      	bne.n	800b45e <_Balloc+0x2e>
 800b494:	2000      	movs	r0, #0
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	6802      	ldr	r2, [r0, #0]
 800b49a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4a4:	e7f7      	b.n	800b496 <_Balloc+0x66>
 800b4a6:	bf00      	nop
 800b4a8:	0800d016 	.word	0x0800d016
 800b4ac:	0800d114 	.word	0x0800d114

0800b4b0 <_Bfree>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	b976      	cbnz	r6, 800b4d8 <_Bfree+0x28>
 800b4ba:	2010      	movs	r0, #16
 800b4bc:	f7ff ff90 	bl	800b3e0 <malloc>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	6268      	str	r0, [r5, #36]	; 0x24
 800b4c4:	b920      	cbnz	r0, 800b4d0 <_Bfree+0x20>
 800b4c6:	218a      	movs	r1, #138	; 0x8a
 800b4c8:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <_Bfree+0x3c>)
 800b4ca:	4809      	ldr	r0, [pc, #36]	; (800b4f0 <_Bfree+0x40>)
 800b4cc:	f000 feec 	bl	800c2a8 <__assert_func>
 800b4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4d4:	6006      	str	r6, [r0, #0]
 800b4d6:	60c6      	str	r6, [r0, #12]
 800b4d8:	b13c      	cbz	r4, 800b4ea <_Bfree+0x3a>
 800b4da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4dc:	6862      	ldr	r2, [r4, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4e4:	6021      	str	r1, [r4, #0]
 800b4e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
 800b4ec:	0800d016 	.word	0x0800d016
 800b4f0:	0800d114 	.word	0x0800d114

0800b4f4 <__multadd>:
 800b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	461e      	mov	r6, r3
 800b4fe:	2000      	movs	r0, #0
 800b500:	690d      	ldr	r5, [r1, #16]
 800b502:	f101 0c14 	add.w	ip, r1, #20
 800b506:	f8dc 3000 	ldr.w	r3, [ip]
 800b50a:	3001      	adds	r0, #1
 800b50c:	b299      	uxth	r1, r3
 800b50e:	fb02 6101 	mla	r1, r2, r1, r6
 800b512:	0c1e      	lsrs	r6, r3, #16
 800b514:	0c0b      	lsrs	r3, r1, #16
 800b516:	fb02 3306 	mla	r3, r2, r6, r3
 800b51a:	b289      	uxth	r1, r1
 800b51c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b520:	4285      	cmp	r5, r0
 800b522:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b526:	f84c 1b04 	str.w	r1, [ip], #4
 800b52a:	dcec      	bgt.n	800b506 <__multadd+0x12>
 800b52c:	b30e      	cbz	r6, 800b572 <__multadd+0x7e>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc19      	bgt.n	800b568 <__multadd+0x74>
 800b534:	6861      	ldr	r1, [r4, #4]
 800b536:	4638      	mov	r0, r7
 800b538:	3101      	adds	r1, #1
 800b53a:	f7ff ff79 	bl	800b430 <_Balloc>
 800b53e:	4680      	mov	r8, r0
 800b540:	b928      	cbnz	r0, 800b54e <__multadd+0x5a>
 800b542:	4602      	mov	r2, r0
 800b544:	21b5      	movs	r1, #181	; 0xb5
 800b546:	4b0c      	ldr	r3, [pc, #48]	; (800b578 <__multadd+0x84>)
 800b548:	480c      	ldr	r0, [pc, #48]	; (800b57c <__multadd+0x88>)
 800b54a:	f000 fead 	bl	800c2a8 <__assert_func>
 800b54e:	6922      	ldr	r2, [r4, #16]
 800b550:	f104 010c 	add.w	r1, r4, #12
 800b554:	3202      	adds	r2, #2
 800b556:	0092      	lsls	r2, r2, #2
 800b558:	300c      	adds	r0, #12
 800b55a:	f7fd f81f 	bl	800859c <memcpy>
 800b55e:	4621      	mov	r1, r4
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ffa5 	bl	800b4b0 <_Bfree>
 800b566:	4644      	mov	r4, r8
 800b568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b56c:	3501      	adds	r5, #1
 800b56e:	615e      	str	r6, [r3, #20]
 800b570:	6125      	str	r5, [r4, #16]
 800b572:	4620      	mov	r0, r4
 800b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b578:	0800d088 	.word	0x0800d088
 800b57c:	0800d114 	.word	0x0800d114

0800b580 <__s2b>:
 800b580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b584:	4615      	mov	r5, r2
 800b586:	2209      	movs	r2, #9
 800b588:	461f      	mov	r7, r3
 800b58a:	3308      	adds	r3, #8
 800b58c:	460c      	mov	r4, r1
 800b58e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b592:	4606      	mov	r6, r0
 800b594:	2201      	movs	r2, #1
 800b596:	2100      	movs	r1, #0
 800b598:	429a      	cmp	r2, r3
 800b59a:	db09      	blt.n	800b5b0 <__s2b+0x30>
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff ff47 	bl	800b430 <_Balloc>
 800b5a2:	b940      	cbnz	r0, 800b5b6 <__s2b+0x36>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	21ce      	movs	r1, #206	; 0xce
 800b5a8:	4b18      	ldr	r3, [pc, #96]	; (800b60c <__s2b+0x8c>)
 800b5aa:	4819      	ldr	r0, [pc, #100]	; (800b610 <__s2b+0x90>)
 800b5ac:	f000 fe7c 	bl	800c2a8 <__assert_func>
 800b5b0:	0052      	lsls	r2, r2, #1
 800b5b2:	3101      	adds	r1, #1
 800b5b4:	e7f0      	b.n	800b598 <__s2b+0x18>
 800b5b6:	9b08      	ldr	r3, [sp, #32]
 800b5b8:	2d09      	cmp	r5, #9
 800b5ba:	6143      	str	r3, [r0, #20]
 800b5bc:	f04f 0301 	mov.w	r3, #1
 800b5c0:	6103      	str	r3, [r0, #16]
 800b5c2:	dd16      	ble.n	800b5f2 <__s2b+0x72>
 800b5c4:	f104 0909 	add.w	r9, r4, #9
 800b5c8:	46c8      	mov	r8, r9
 800b5ca:	442c      	add	r4, r5
 800b5cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b5d0:	4601      	mov	r1, r0
 800b5d2:	220a      	movs	r2, #10
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	3b30      	subs	r3, #48	; 0x30
 800b5d8:	f7ff ff8c 	bl	800b4f4 <__multadd>
 800b5dc:	45a0      	cmp	r8, r4
 800b5de:	d1f5      	bne.n	800b5cc <__s2b+0x4c>
 800b5e0:	f1a5 0408 	sub.w	r4, r5, #8
 800b5e4:	444c      	add	r4, r9
 800b5e6:	1b2d      	subs	r5, r5, r4
 800b5e8:	1963      	adds	r3, r4, r5
 800b5ea:	42bb      	cmp	r3, r7
 800b5ec:	db04      	blt.n	800b5f8 <__s2b+0x78>
 800b5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f2:	2509      	movs	r5, #9
 800b5f4:	340a      	adds	r4, #10
 800b5f6:	e7f6      	b.n	800b5e6 <__s2b+0x66>
 800b5f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	220a      	movs	r2, #10
 800b600:	4630      	mov	r0, r6
 800b602:	3b30      	subs	r3, #48	; 0x30
 800b604:	f7ff ff76 	bl	800b4f4 <__multadd>
 800b608:	e7ee      	b.n	800b5e8 <__s2b+0x68>
 800b60a:	bf00      	nop
 800b60c:	0800d088 	.word	0x0800d088
 800b610:	0800d114 	.word	0x0800d114

0800b614 <__hi0bits>:
 800b614:	0c02      	lsrs	r2, r0, #16
 800b616:	0412      	lsls	r2, r2, #16
 800b618:	4603      	mov	r3, r0
 800b61a:	b9ca      	cbnz	r2, 800b650 <__hi0bits+0x3c>
 800b61c:	0403      	lsls	r3, r0, #16
 800b61e:	2010      	movs	r0, #16
 800b620:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b624:	bf04      	itt	eq
 800b626:	021b      	lsleq	r3, r3, #8
 800b628:	3008      	addeq	r0, #8
 800b62a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b62e:	bf04      	itt	eq
 800b630:	011b      	lsleq	r3, r3, #4
 800b632:	3004      	addeq	r0, #4
 800b634:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b638:	bf04      	itt	eq
 800b63a:	009b      	lsleq	r3, r3, #2
 800b63c:	3002      	addeq	r0, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	db05      	blt.n	800b64e <__hi0bits+0x3a>
 800b642:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b646:	f100 0001 	add.w	r0, r0, #1
 800b64a:	bf08      	it	eq
 800b64c:	2020      	moveq	r0, #32
 800b64e:	4770      	bx	lr
 800b650:	2000      	movs	r0, #0
 800b652:	e7e5      	b.n	800b620 <__hi0bits+0xc>

0800b654 <__lo0bits>:
 800b654:	6803      	ldr	r3, [r0, #0]
 800b656:	4602      	mov	r2, r0
 800b658:	f013 0007 	ands.w	r0, r3, #7
 800b65c:	d00b      	beq.n	800b676 <__lo0bits+0x22>
 800b65e:	07d9      	lsls	r1, r3, #31
 800b660:	d421      	bmi.n	800b6a6 <__lo0bits+0x52>
 800b662:	0798      	lsls	r0, r3, #30
 800b664:	bf49      	itett	mi
 800b666:	085b      	lsrmi	r3, r3, #1
 800b668:	089b      	lsrpl	r3, r3, #2
 800b66a:	2001      	movmi	r0, #1
 800b66c:	6013      	strmi	r3, [r2, #0]
 800b66e:	bf5c      	itt	pl
 800b670:	2002      	movpl	r0, #2
 800b672:	6013      	strpl	r3, [r2, #0]
 800b674:	4770      	bx	lr
 800b676:	b299      	uxth	r1, r3
 800b678:	b909      	cbnz	r1, 800b67e <__lo0bits+0x2a>
 800b67a:	2010      	movs	r0, #16
 800b67c:	0c1b      	lsrs	r3, r3, #16
 800b67e:	b2d9      	uxtb	r1, r3
 800b680:	b909      	cbnz	r1, 800b686 <__lo0bits+0x32>
 800b682:	3008      	adds	r0, #8
 800b684:	0a1b      	lsrs	r3, r3, #8
 800b686:	0719      	lsls	r1, r3, #28
 800b688:	bf04      	itt	eq
 800b68a:	091b      	lsreq	r3, r3, #4
 800b68c:	3004      	addeq	r0, #4
 800b68e:	0799      	lsls	r1, r3, #30
 800b690:	bf04      	itt	eq
 800b692:	089b      	lsreq	r3, r3, #2
 800b694:	3002      	addeq	r0, #2
 800b696:	07d9      	lsls	r1, r3, #31
 800b698:	d403      	bmi.n	800b6a2 <__lo0bits+0x4e>
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	f100 0001 	add.w	r0, r0, #1
 800b6a0:	d003      	beq.n	800b6aa <__lo0bits+0x56>
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	4770      	bx	lr
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	4770      	bx	lr
 800b6aa:	2020      	movs	r0, #32
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <__i2b>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	f7ff febb 	bl	800b430 <_Balloc>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	b928      	cbnz	r0, 800b6ca <__i2b+0x1a>
 800b6be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6c2:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <__i2b+0x24>)
 800b6c4:	4804      	ldr	r0, [pc, #16]	; (800b6d8 <__i2b+0x28>)
 800b6c6:	f000 fdef 	bl	800c2a8 <__assert_func>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	6144      	str	r4, [r0, #20]
 800b6ce:	6103      	str	r3, [r0, #16]
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	bf00      	nop
 800b6d4:	0800d088 	.word	0x0800d088
 800b6d8:	0800d114 	.word	0x0800d114

0800b6dc <__multiply>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	4691      	mov	r9, r2
 800b6e2:	690a      	ldr	r2, [r1, #16]
 800b6e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	bfbe      	ittt	lt
 800b6ee:	460b      	movlt	r3, r1
 800b6f0:	464c      	movlt	r4, r9
 800b6f2:	4699      	movlt	r9, r3
 800b6f4:	6927      	ldr	r7, [r4, #16]
 800b6f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	eb07 060a 	add.w	r6, r7, sl
 800b702:	42b3      	cmp	r3, r6
 800b704:	b085      	sub	sp, #20
 800b706:	bfb8      	it	lt
 800b708:	3101      	addlt	r1, #1
 800b70a:	f7ff fe91 	bl	800b430 <_Balloc>
 800b70e:	b930      	cbnz	r0, 800b71e <__multiply+0x42>
 800b710:	4602      	mov	r2, r0
 800b712:	f240 115d 	movw	r1, #349	; 0x15d
 800b716:	4b43      	ldr	r3, [pc, #268]	; (800b824 <__multiply+0x148>)
 800b718:	4843      	ldr	r0, [pc, #268]	; (800b828 <__multiply+0x14c>)
 800b71a:	f000 fdc5 	bl	800c2a8 <__assert_func>
 800b71e:	f100 0514 	add.w	r5, r0, #20
 800b722:	462b      	mov	r3, r5
 800b724:	2200      	movs	r2, #0
 800b726:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b72a:	4543      	cmp	r3, r8
 800b72c:	d321      	bcc.n	800b772 <__multiply+0x96>
 800b72e:	f104 0314 	add.w	r3, r4, #20
 800b732:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b736:	f109 0314 	add.w	r3, r9, #20
 800b73a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b73e:	9202      	str	r2, [sp, #8]
 800b740:	1b3a      	subs	r2, r7, r4
 800b742:	3a15      	subs	r2, #21
 800b744:	f022 0203 	bic.w	r2, r2, #3
 800b748:	3204      	adds	r2, #4
 800b74a:	f104 0115 	add.w	r1, r4, #21
 800b74e:	428f      	cmp	r7, r1
 800b750:	bf38      	it	cc
 800b752:	2204      	movcc	r2, #4
 800b754:	9201      	str	r2, [sp, #4]
 800b756:	9a02      	ldr	r2, [sp, #8]
 800b758:	9303      	str	r3, [sp, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d80c      	bhi.n	800b778 <__multiply+0x9c>
 800b75e:	2e00      	cmp	r6, #0
 800b760:	dd03      	ble.n	800b76a <__multiply+0x8e>
 800b762:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b766:	2b00      	cmp	r3, #0
 800b768:	d059      	beq.n	800b81e <__multiply+0x142>
 800b76a:	6106      	str	r6, [r0, #16]
 800b76c:	b005      	add	sp, #20
 800b76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b772:	f843 2b04 	str.w	r2, [r3], #4
 800b776:	e7d8      	b.n	800b72a <__multiply+0x4e>
 800b778:	f8b3 a000 	ldrh.w	sl, [r3]
 800b77c:	f1ba 0f00 	cmp.w	sl, #0
 800b780:	d023      	beq.n	800b7ca <__multiply+0xee>
 800b782:	46a9      	mov	r9, r5
 800b784:	f04f 0c00 	mov.w	ip, #0
 800b788:	f104 0e14 	add.w	lr, r4, #20
 800b78c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b790:	f8d9 1000 	ldr.w	r1, [r9]
 800b794:	fa1f fb82 	uxth.w	fp, r2
 800b798:	b289      	uxth	r1, r1
 800b79a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b79e:	4461      	add	r1, ip
 800b7a0:	f8d9 c000 	ldr.w	ip, [r9]
 800b7a4:	0c12      	lsrs	r2, r2, #16
 800b7a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b7aa:	fb0a c202 	mla	r2, sl, r2, ip
 800b7ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7b2:	b289      	uxth	r1, r1
 800b7b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7b8:	4577      	cmp	r7, lr
 800b7ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7be:	f849 1b04 	str.w	r1, [r9], #4
 800b7c2:	d8e3      	bhi.n	800b78c <__multiply+0xb0>
 800b7c4:	9a01      	ldr	r2, [sp, #4]
 800b7c6:	f845 c002 	str.w	ip, [r5, r2]
 800b7ca:	9a03      	ldr	r2, [sp, #12]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7d2:	f1b9 0f00 	cmp.w	r9, #0
 800b7d6:	d020      	beq.n	800b81a <__multiply+0x13e>
 800b7d8:	46ae      	mov	lr, r5
 800b7da:	f04f 0a00 	mov.w	sl, #0
 800b7de:	6829      	ldr	r1, [r5, #0]
 800b7e0:	f104 0c14 	add.w	ip, r4, #20
 800b7e4:	f8bc b000 	ldrh.w	fp, [ip]
 800b7e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b7ec:	b289      	uxth	r1, r1
 800b7ee:	fb09 220b 	mla	r2, r9, fp, r2
 800b7f2:	4492      	add	sl, r2
 800b7f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b7f8:	f84e 1b04 	str.w	r1, [lr], #4
 800b7fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b800:	f8be 1000 	ldrh.w	r1, [lr]
 800b804:	0c12      	lsrs	r2, r2, #16
 800b806:	fb09 1102 	mla	r1, r9, r2, r1
 800b80a:	4567      	cmp	r7, ip
 800b80c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b810:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b814:	d8e6      	bhi.n	800b7e4 <__multiply+0x108>
 800b816:	9a01      	ldr	r2, [sp, #4]
 800b818:	50a9      	str	r1, [r5, r2]
 800b81a:	3504      	adds	r5, #4
 800b81c:	e79b      	b.n	800b756 <__multiply+0x7a>
 800b81e:	3e01      	subs	r6, #1
 800b820:	e79d      	b.n	800b75e <__multiply+0x82>
 800b822:	bf00      	nop
 800b824:	0800d088 	.word	0x0800d088
 800b828:	0800d114 	.word	0x0800d114

0800b82c <__pow5mult>:
 800b82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b830:	4615      	mov	r5, r2
 800b832:	f012 0203 	ands.w	r2, r2, #3
 800b836:	4606      	mov	r6, r0
 800b838:	460f      	mov	r7, r1
 800b83a:	d007      	beq.n	800b84c <__pow5mult+0x20>
 800b83c:	4c25      	ldr	r4, [pc, #148]	; (800b8d4 <__pow5mult+0xa8>)
 800b83e:	3a01      	subs	r2, #1
 800b840:	2300      	movs	r3, #0
 800b842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b846:	f7ff fe55 	bl	800b4f4 <__multadd>
 800b84a:	4607      	mov	r7, r0
 800b84c:	10ad      	asrs	r5, r5, #2
 800b84e:	d03d      	beq.n	800b8cc <__pow5mult+0xa0>
 800b850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b852:	b97c      	cbnz	r4, 800b874 <__pow5mult+0x48>
 800b854:	2010      	movs	r0, #16
 800b856:	f7ff fdc3 	bl	800b3e0 <malloc>
 800b85a:	4602      	mov	r2, r0
 800b85c:	6270      	str	r0, [r6, #36]	; 0x24
 800b85e:	b928      	cbnz	r0, 800b86c <__pow5mult+0x40>
 800b860:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b864:	4b1c      	ldr	r3, [pc, #112]	; (800b8d8 <__pow5mult+0xac>)
 800b866:	481d      	ldr	r0, [pc, #116]	; (800b8dc <__pow5mult+0xb0>)
 800b868:	f000 fd1e 	bl	800c2a8 <__assert_func>
 800b86c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b870:	6004      	str	r4, [r0, #0]
 800b872:	60c4      	str	r4, [r0, #12]
 800b874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b87c:	b94c      	cbnz	r4, 800b892 <__pow5mult+0x66>
 800b87e:	f240 2171 	movw	r1, #625	; 0x271
 800b882:	4630      	mov	r0, r6
 800b884:	f7ff ff14 	bl	800b6b0 <__i2b>
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b890:	6003      	str	r3, [r0, #0]
 800b892:	f04f 0900 	mov.w	r9, #0
 800b896:	07eb      	lsls	r3, r5, #31
 800b898:	d50a      	bpl.n	800b8b0 <__pow5mult+0x84>
 800b89a:	4639      	mov	r1, r7
 800b89c:	4622      	mov	r2, r4
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff ff1c 	bl	800b6dc <__multiply>
 800b8a4:	4680      	mov	r8, r0
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f7ff fe01 	bl	800b4b0 <_Bfree>
 800b8ae:	4647      	mov	r7, r8
 800b8b0:	106d      	asrs	r5, r5, #1
 800b8b2:	d00b      	beq.n	800b8cc <__pow5mult+0xa0>
 800b8b4:	6820      	ldr	r0, [r4, #0]
 800b8b6:	b938      	cbnz	r0, 800b8c8 <__pow5mult+0x9c>
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7ff ff0d 	bl	800b6dc <__multiply>
 800b8c2:	6020      	str	r0, [r4, #0]
 800b8c4:	f8c0 9000 	str.w	r9, [r0]
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	e7e4      	b.n	800b896 <__pow5mult+0x6a>
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0800d260 	.word	0x0800d260
 800b8d8:	0800d016 	.word	0x0800d016
 800b8dc:	0800d114 	.word	0x0800d114

0800b8e0 <__lshift>:
 800b8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	4691      	mov	r9, r2
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	6849      	ldr	r1, [r1, #4]
 800b8ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8f8:	f108 0601 	add.w	r6, r8, #1
 800b8fc:	42b3      	cmp	r3, r6
 800b8fe:	db0b      	blt.n	800b918 <__lshift+0x38>
 800b900:	4638      	mov	r0, r7
 800b902:	f7ff fd95 	bl	800b430 <_Balloc>
 800b906:	4605      	mov	r5, r0
 800b908:	b948      	cbnz	r0, 800b91e <__lshift+0x3e>
 800b90a:	4602      	mov	r2, r0
 800b90c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b910:	4b29      	ldr	r3, [pc, #164]	; (800b9b8 <__lshift+0xd8>)
 800b912:	482a      	ldr	r0, [pc, #168]	; (800b9bc <__lshift+0xdc>)
 800b914:	f000 fcc8 	bl	800c2a8 <__assert_func>
 800b918:	3101      	adds	r1, #1
 800b91a:	005b      	lsls	r3, r3, #1
 800b91c:	e7ee      	b.n	800b8fc <__lshift+0x1c>
 800b91e:	2300      	movs	r3, #0
 800b920:	f100 0114 	add.w	r1, r0, #20
 800b924:	f100 0210 	add.w	r2, r0, #16
 800b928:	4618      	mov	r0, r3
 800b92a:	4553      	cmp	r3, sl
 800b92c:	db37      	blt.n	800b99e <__lshift+0xbe>
 800b92e:	6920      	ldr	r0, [r4, #16]
 800b930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b934:	f104 0314 	add.w	r3, r4, #20
 800b938:	f019 091f 	ands.w	r9, r9, #31
 800b93c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b944:	d02f      	beq.n	800b9a6 <__lshift+0xc6>
 800b946:	468a      	mov	sl, r1
 800b948:	f04f 0c00 	mov.w	ip, #0
 800b94c:	f1c9 0e20 	rsb	lr, r9, #32
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	fa02 f209 	lsl.w	r2, r2, r9
 800b956:	ea42 020c 	orr.w	r2, r2, ip
 800b95a:	f84a 2b04 	str.w	r2, [sl], #4
 800b95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b962:	4298      	cmp	r0, r3
 800b964:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b968:	d8f2      	bhi.n	800b950 <__lshift+0x70>
 800b96a:	1b03      	subs	r3, r0, r4
 800b96c:	3b15      	subs	r3, #21
 800b96e:	f023 0303 	bic.w	r3, r3, #3
 800b972:	3304      	adds	r3, #4
 800b974:	f104 0215 	add.w	r2, r4, #21
 800b978:	4290      	cmp	r0, r2
 800b97a:	bf38      	it	cc
 800b97c:	2304      	movcc	r3, #4
 800b97e:	f841 c003 	str.w	ip, [r1, r3]
 800b982:	f1bc 0f00 	cmp.w	ip, #0
 800b986:	d001      	beq.n	800b98c <__lshift+0xac>
 800b988:	f108 0602 	add.w	r6, r8, #2
 800b98c:	3e01      	subs	r6, #1
 800b98e:	4638      	mov	r0, r7
 800b990:	4621      	mov	r1, r4
 800b992:	612e      	str	r6, [r5, #16]
 800b994:	f7ff fd8c 	bl	800b4b0 <_Bfree>
 800b998:	4628      	mov	r0, r5
 800b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	e7c1      	b.n	800b92a <__lshift+0x4a>
 800b9a6:	3904      	subs	r1, #4
 800b9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ac:	4298      	cmp	r0, r3
 800b9ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9b2:	d8f9      	bhi.n	800b9a8 <__lshift+0xc8>
 800b9b4:	e7ea      	b.n	800b98c <__lshift+0xac>
 800b9b6:	bf00      	nop
 800b9b8:	0800d088 	.word	0x0800d088
 800b9bc:	0800d114 	.word	0x0800d114

0800b9c0 <__mcmp>:
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	690a      	ldr	r2, [r1, #16]
 800b9c4:	6900      	ldr	r0, [r0, #16]
 800b9c6:	b530      	push	{r4, r5, lr}
 800b9c8:	1a80      	subs	r0, r0, r2
 800b9ca:	d10d      	bne.n	800b9e8 <__mcmp+0x28>
 800b9cc:	3314      	adds	r3, #20
 800b9ce:	3114      	adds	r1, #20
 800b9d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9e0:	4295      	cmp	r5, r2
 800b9e2:	d002      	beq.n	800b9ea <__mcmp+0x2a>
 800b9e4:	d304      	bcc.n	800b9f0 <__mcmp+0x30>
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	bd30      	pop	{r4, r5, pc}
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	d3f4      	bcc.n	800b9d8 <__mcmp+0x18>
 800b9ee:	e7fb      	b.n	800b9e8 <__mcmp+0x28>
 800b9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f4:	e7f8      	b.n	800b9e8 <__mcmp+0x28>
	...

0800b9f8 <__mdiff>:
 800b9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	4607      	mov	r7, r0
 800ba00:	4611      	mov	r1, r2
 800ba02:	4628      	mov	r0, r5
 800ba04:	4614      	mov	r4, r2
 800ba06:	f7ff ffdb 	bl	800b9c0 <__mcmp>
 800ba0a:	1e06      	subs	r6, r0, #0
 800ba0c:	d111      	bne.n	800ba32 <__mdiff+0x3a>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff fd0d 	bl	800b430 <_Balloc>
 800ba16:	4602      	mov	r2, r0
 800ba18:	b928      	cbnz	r0, 800ba26 <__mdiff+0x2e>
 800ba1a:	f240 2132 	movw	r1, #562	; 0x232
 800ba1e:	4b3a      	ldr	r3, [pc, #232]	; (800bb08 <__mdiff+0x110>)
 800ba20:	483a      	ldr	r0, [pc, #232]	; (800bb0c <__mdiff+0x114>)
 800ba22:	f000 fc41 	bl	800c2a8 <__assert_func>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba32:	bfa4      	itt	ge
 800ba34:	4623      	movge	r3, r4
 800ba36:	462c      	movge	r4, r5
 800ba38:	4638      	mov	r0, r7
 800ba3a:	6861      	ldr	r1, [r4, #4]
 800ba3c:	bfa6      	itte	ge
 800ba3e:	461d      	movge	r5, r3
 800ba40:	2600      	movge	r6, #0
 800ba42:	2601      	movlt	r6, #1
 800ba44:	f7ff fcf4 	bl	800b430 <_Balloc>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	b918      	cbnz	r0, 800ba54 <__mdiff+0x5c>
 800ba4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba50:	4b2d      	ldr	r3, [pc, #180]	; (800bb08 <__mdiff+0x110>)
 800ba52:	e7e5      	b.n	800ba20 <__mdiff+0x28>
 800ba54:	f102 0814 	add.w	r8, r2, #20
 800ba58:	46c2      	mov	sl, r8
 800ba5a:	f04f 0c00 	mov.w	ip, #0
 800ba5e:	6927      	ldr	r7, [r4, #16]
 800ba60:	60c6      	str	r6, [r0, #12]
 800ba62:	692e      	ldr	r6, [r5, #16]
 800ba64:	f104 0014 	add.w	r0, r4, #20
 800ba68:	f105 0914 	add.w	r9, r5, #20
 800ba6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ba70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba74:	3410      	adds	r4, #16
 800ba76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ba7a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba7e:	fa1f f18b 	uxth.w	r1, fp
 800ba82:	448c      	add	ip, r1
 800ba84:	b299      	uxth	r1, r3
 800ba86:	0c1b      	lsrs	r3, r3, #16
 800ba88:	ebac 0101 	sub.w	r1, ip, r1
 800ba8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba94:	b289      	uxth	r1, r1
 800ba96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ba9a:	454e      	cmp	r6, r9
 800ba9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800baa0:	f84a 3b04 	str.w	r3, [sl], #4
 800baa4:	d8e7      	bhi.n	800ba76 <__mdiff+0x7e>
 800baa6:	1b73      	subs	r3, r6, r5
 800baa8:	3b15      	subs	r3, #21
 800baaa:	f023 0303 	bic.w	r3, r3, #3
 800baae:	3515      	adds	r5, #21
 800bab0:	3304      	adds	r3, #4
 800bab2:	42ae      	cmp	r6, r5
 800bab4:	bf38      	it	cc
 800bab6:	2304      	movcc	r3, #4
 800bab8:	4418      	add	r0, r3
 800baba:	4443      	add	r3, r8
 800babc:	461e      	mov	r6, r3
 800babe:	4605      	mov	r5, r0
 800bac0:	4575      	cmp	r5, lr
 800bac2:	d30e      	bcc.n	800bae2 <__mdiff+0xea>
 800bac4:	f10e 0103 	add.w	r1, lr, #3
 800bac8:	1a09      	subs	r1, r1, r0
 800baca:	f021 0103 	bic.w	r1, r1, #3
 800bace:	3803      	subs	r0, #3
 800bad0:	4586      	cmp	lr, r0
 800bad2:	bf38      	it	cc
 800bad4:	2100      	movcc	r1, #0
 800bad6:	4419      	add	r1, r3
 800bad8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800badc:	b18b      	cbz	r3, 800bb02 <__mdiff+0x10a>
 800bade:	6117      	str	r7, [r2, #16]
 800bae0:	e7a4      	b.n	800ba2c <__mdiff+0x34>
 800bae2:	f855 8b04 	ldr.w	r8, [r5], #4
 800bae6:	fa1f f188 	uxth.w	r1, r8
 800baea:	4461      	add	r1, ip
 800baec:	140c      	asrs	r4, r1, #16
 800baee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800baf2:	b289      	uxth	r1, r1
 800baf4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800baf8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bafc:	f846 1b04 	str.w	r1, [r6], #4
 800bb00:	e7de      	b.n	800bac0 <__mdiff+0xc8>
 800bb02:	3f01      	subs	r7, #1
 800bb04:	e7e8      	b.n	800bad8 <__mdiff+0xe0>
 800bb06:	bf00      	nop
 800bb08:	0800d088 	.word	0x0800d088
 800bb0c:	0800d114 	.word	0x0800d114

0800bb10 <__ulp>:
 800bb10:	4b11      	ldr	r3, [pc, #68]	; (800bb58 <__ulp+0x48>)
 800bb12:	400b      	ands	r3, r1
 800bb14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dd02      	ble.n	800bb22 <__ulp+0x12>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4770      	bx	lr
 800bb22:	425b      	negs	r3, r3
 800bb24:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bb28:	f04f 0000 	mov.w	r0, #0
 800bb2c:	f04f 0100 	mov.w	r1, #0
 800bb30:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb34:	da04      	bge.n	800bb40 <__ulp+0x30>
 800bb36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb3a:	fa43 f102 	asr.w	r1, r3, r2
 800bb3e:	4770      	bx	lr
 800bb40:	f1a2 0314 	sub.w	r3, r2, #20
 800bb44:	2b1e      	cmp	r3, #30
 800bb46:	bfd6      	itet	le
 800bb48:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bb4c:	2301      	movgt	r3, #1
 800bb4e:	fa22 f303 	lsrle.w	r3, r2, r3
 800bb52:	4618      	mov	r0, r3
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	7ff00000 	.word	0x7ff00000

0800bb5c <__b2d>:
 800bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb60:	6907      	ldr	r7, [r0, #16]
 800bb62:	f100 0914 	add.w	r9, r0, #20
 800bb66:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bb6a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bb6e:	f1a7 0804 	sub.w	r8, r7, #4
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7ff fd4e 	bl	800b614 <__hi0bits>
 800bb78:	f1c0 0320 	rsb	r3, r0, #32
 800bb7c:	280a      	cmp	r0, #10
 800bb7e:	600b      	str	r3, [r1, #0]
 800bb80:	491f      	ldr	r1, [pc, #124]	; (800bc00 <__b2d+0xa4>)
 800bb82:	dc17      	bgt.n	800bbb4 <__b2d+0x58>
 800bb84:	45c1      	cmp	r9, r8
 800bb86:	bf28      	it	cs
 800bb88:	2200      	movcs	r2, #0
 800bb8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb8e:	fa26 f30c 	lsr.w	r3, r6, ip
 800bb92:	bf38      	it	cc
 800bb94:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bb98:	ea43 0501 	orr.w	r5, r3, r1
 800bb9c:	f100 0315 	add.w	r3, r0, #21
 800bba0:	fa06 f303 	lsl.w	r3, r6, r3
 800bba4:	fa22 f20c 	lsr.w	r2, r2, ip
 800bba8:	ea43 0402 	orr.w	r4, r3, r2
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb4:	45c1      	cmp	r9, r8
 800bbb6:	bf2e      	itee	cs
 800bbb8:	2200      	movcs	r2, #0
 800bbba:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bbbe:	f1a7 0808 	subcc.w	r8, r7, #8
 800bbc2:	f1b0 030b 	subs.w	r3, r0, #11
 800bbc6:	d016      	beq.n	800bbf6 <__b2d+0x9a>
 800bbc8:	f1c3 0720 	rsb	r7, r3, #32
 800bbcc:	fa22 f107 	lsr.w	r1, r2, r7
 800bbd0:	45c8      	cmp	r8, r9
 800bbd2:	fa06 f603 	lsl.w	r6, r6, r3
 800bbd6:	ea46 0601 	orr.w	r6, r6, r1
 800bbda:	bf94      	ite	ls
 800bbdc:	2100      	movls	r1, #0
 800bbde:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bbe2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bbe6:	fa02 f003 	lsl.w	r0, r2, r3
 800bbea:	40f9      	lsrs	r1, r7
 800bbec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bbf0:	ea40 0401 	orr.w	r4, r0, r1
 800bbf4:	e7da      	b.n	800bbac <__b2d+0x50>
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	ea46 0501 	orr.w	r5, r6, r1
 800bbfc:	e7d6      	b.n	800bbac <__b2d+0x50>
 800bbfe:	bf00      	nop
 800bc00:	3ff00000 	.word	0x3ff00000

0800bc04 <__d2b>:
 800bc04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bc08:	2101      	movs	r1, #1
 800bc0a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bc0e:	4690      	mov	r8, r2
 800bc10:	461d      	mov	r5, r3
 800bc12:	f7ff fc0d 	bl	800b430 <_Balloc>
 800bc16:	4604      	mov	r4, r0
 800bc18:	b930      	cbnz	r0, 800bc28 <__d2b+0x24>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	f240 310a 	movw	r1, #778	; 0x30a
 800bc20:	4b24      	ldr	r3, [pc, #144]	; (800bcb4 <__d2b+0xb0>)
 800bc22:	4825      	ldr	r0, [pc, #148]	; (800bcb8 <__d2b+0xb4>)
 800bc24:	f000 fb40 	bl	800c2a8 <__assert_func>
 800bc28:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bc2c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bc30:	bb2d      	cbnz	r5, 800bc7e <__d2b+0x7a>
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	f1b8 0300 	subs.w	r3, r8, #0
 800bc38:	d026      	beq.n	800bc88 <__d2b+0x84>
 800bc3a:	4668      	mov	r0, sp
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	f7ff fd09 	bl	800b654 <__lo0bits>
 800bc42:	9900      	ldr	r1, [sp, #0]
 800bc44:	b1f0      	cbz	r0, 800bc84 <__d2b+0x80>
 800bc46:	9a01      	ldr	r2, [sp, #4]
 800bc48:	f1c0 0320 	rsb	r3, r0, #32
 800bc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc50:	430b      	orrs	r3, r1
 800bc52:	40c2      	lsrs	r2, r0
 800bc54:	6163      	str	r3, [r4, #20]
 800bc56:	9201      	str	r2, [sp, #4]
 800bc58:	9b01      	ldr	r3, [sp, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bf14      	ite	ne
 800bc5e:	2102      	movne	r1, #2
 800bc60:	2101      	moveq	r1, #1
 800bc62:	61a3      	str	r3, [r4, #24]
 800bc64:	6121      	str	r1, [r4, #16]
 800bc66:	b1c5      	cbz	r5, 800bc9a <__d2b+0x96>
 800bc68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc6c:	4405      	add	r5, r0
 800bc6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc72:	603d      	str	r5, [r7, #0]
 800bc74:	6030      	str	r0, [r6, #0]
 800bc76:	4620      	mov	r0, r4
 800bc78:	b002      	add	sp, #8
 800bc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc82:	e7d6      	b.n	800bc32 <__d2b+0x2e>
 800bc84:	6161      	str	r1, [r4, #20]
 800bc86:	e7e7      	b.n	800bc58 <__d2b+0x54>
 800bc88:	a801      	add	r0, sp, #4
 800bc8a:	f7ff fce3 	bl	800b654 <__lo0bits>
 800bc8e:	2101      	movs	r1, #1
 800bc90:	9b01      	ldr	r3, [sp, #4]
 800bc92:	6121      	str	r1, [r4, #16]
 800bc94:	6163      	str	r3, [r4, #20]
 800bc96:	3020      	adds	r0, #32
 800bc98:	e7e5      	b.n	800bc66 <__d2b+0x62>
 800bc9a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bc9e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bca2:	6038      	str	r0, [r7, #0]
 800bca4:	6918      	ldr	r0, [r3, #16]
 800bca6:	f7ff fcb5 	bl	800b614 <__hi0bits>
 800bcaa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bcae:	6031      	str	r1, [r6, #0]
 800bcb0:	e7e1      	b.n	800bc76 <__d2b+0x72>
 800bcb2:	bf00      	nop
 800bcb4:	0800d088 	.word	0x0800d088
 800bcb8:	0800d114 	.word	0x0800d114

0800bcbc <__ratio>:
 800bcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4688      	mov	r8, r1
 800bcc2:	4669      	mov	r1, sp
 800bcc4:	4681      	mov	r9, r0
 800bcc6:	f7ff ff49 	bl	800bb5c <__b2d>
 800bcca:	460f      	mov	r7, r1
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	a901      	add	r1, sp, #4
 800bcd4:	f7ff ff42 	bl	800bb5c <__b2d>
 800bcd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bce0:	468b      	mov	fp, r1
 800bce2:	eba3 0c02 	sub.w	ip, r3, r2
 800bce6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bfd5      	itete	le
 800bcf4:	460a      	movle	r2, r1
 800bcf6:	462a      	movgt	r2, r5
 800bcf8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bcfc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd00:	bfd8      	it	le
 800bd02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bd06:	465b      	mov	r3, fp
 800bd08:	4602      	mov	r2, r0
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f7f4 fd0d 	bl	800072c <__aeabi_ddiv>
 800bd12:	b003      	add	sp, #12
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd18 <__copybits>:
 800bd18:	3901      	subs	r1, #1
 800bd1a:	b570      	push	{r4, r5, r6, lr}
 800bd1c:	1149      	asrs	r1, r1, #5
 800bd1e:	6914      	ldr	r4, [r2, #16]
 800bd20:	3101      	adds	r1, #1
 800bd22:	f102 0314 	add.w	r3, r2, #20
 800bd26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd2e:	1f05      	subs	r5, r0, #4
 800bd30:	42a3      	cmp	r3, r4
 800bd32:	d30c      	bcc.n	800bd4e <__copybits+0x36>
 800bd34:	1aa3      	subs	r3, r4, r2
 800bd36:	3b11      	subs	r3, #17
 800bd38:	f023 0303 	bic.w	r3, r3, #3
 800bd3c:	3211      	adds	r2, #17
 800bd3e:	42a2      	cmp	r2, r4
 800bd40:	bf88      	it	hi
 800bd42:	2300      	movhi	r3, #0
 800bd44:	4418      	add	r0, r3
 800bd46:	2300      	movs	r3, #0
 800bd48:	4288      	cmp	r0, r1
 800bd4a:	d305      	bcc.n	800bd58 <__copybits+0x40>
 800bd4c:	bd70      	pop	{r4, r5, r6, pc}
 800bd4e:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd52:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd56:	e7eb      	b.n	800bd30 <__copybits+0x18>
 800bd58:	f840 3b04 	str.w	r3, [r0], #4
 800bd5c:	e7f4      	b.n	800bd48 <__copybits+0x30>

0800bd5e <__any_on>:
 800bd5e:	f100 0214 	add.w	r2, r0, #20
 800bd62:	6900      	ldr	r0, [r0, #16]
 800bd64:	114b      	asrs	r3, r1, #5
 800bd66:	4298      	cmp	r0, r3
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	db11      	blt.n	800bd90 <__any_on+0x32>
 800bd6c:	dd0a      	ble.n	800bd84 <__any_on+0x26>
 800bd6e:	f011 011f 	ands.w	r1, r1, #31
 800bd72:	d007      	beq.n	800bd84 <__any_on+0x26>
 800bd74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd78:	fa24 f001 	lsr.w	r0, r4, r1
 800bd7c:	fa00 f101 	lsl.w	r1, r0, r1
 800bd80:	428c      	cmp	r4, r1
 800bd82:	d10b      	bne.n	800bd9c <__any_on+0x3e>
 800bd84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d803      	bhi.n	800bd94 <__any_on+0x36>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	bd10      	pop	{r4, pc}
 800bd90:	4603      	mov	r3, r0
 800bd92:	e7f7      	b.n	800bd84 <__any_on+0x26>
 800bd94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd98:	2900      	cmp	r1, #0
 800bd9a:	d0f5      	beq.n	800bd88 <__any_on+0x2a>
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	e7f6      	b.n	800bd8e <__any_on+0x30>

0800bda0 <_calloc_r>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	fba1 5402 	umull	r5, r4, r1, r2
 800bda6:	b934      	cbnz	r4, 800bdb6 <_calloc_r+0x16>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f000 f875 	bl	800be98 <_malloc_r>
 800bdae:	4606      	mov	r6, r0
 800bdb0:	b928      	cbnz	r0, 800bdbe <_calloc_r+0x1e>
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	bd70      	pop	{r4, r5, r6, pc}
 800bdb6:	220c      	movs	r2, #12
 800bdb8:	2600      	movs	r6, #0
 800bdba:	6002      	str	r2, [r0, #0]
 800bdbc:	e7f9      	b.n	800bdb2 <_calloc_r+0x12>
 800bdbe:	462a      	mov	r2, r5
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	f7fc fbf9 	bl	80085b8 <memset>
 800bdc6:	e7f4      	b.n	800bdb2 <_calloc_r+0x12>

0800bdc8 <_free_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4605      	mov	r5, r0
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d040      	beq.n	800be52 <_free_r+0x8a>
 800bdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd4:	1f0c      	subs	r4, r1, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bfb8      	it	lt
 800bdda:	18e4      	addlt	r4, r4, r3
 800bddc:	f000 faae 	bl	800c33c <__malloc_lock>
 800bde0:	4a1c      	ldr	r2, [pc, #112]	; (800be54 <_free_r+0x8c>)
 800bde2:	6813      	ldr	r3, [r2, #0]
 800bde4:	b933      	cbnz	r3, 800bdf4 <_free_r+0x2c>
 800bde6:	6063      	str	r3, [r4, #4]
 800bde8:	6014      	str	r4, [r2, #0]
 800bdea:	4628      	mov	r0, r5
 800bdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf0:	f000 baaa 	b.w	800c348 <__malloc_unlock>
 800bdf4:	42a3      	cmp	r3, r4
 800bdf6:	d908      	bls.n	800be0a <_free_r+0x42>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	1821      	adds	r1, r4, r0
 800bdfc:	428b      	cmp	r3, r1
 800bdfe:	bf01      	itttt	eq
 800be00:	6819      	ldreq	r1, [r3, #0]
 800be02:	685b      	ldreq	r3, [r3, #4]
 800be04:	1809      	addeq	r1, r1, r0
 800be06:	6021      	streq	r1, [r4, #0]
 800be08:	e7ed      	b.n	800bde6 <_free_r+0x1e>
 800be0a:	461a      	mov	r2, r3
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	b10b      	cbz	r3, 800be14 <_free_r+0x4c>
 800be10:	42a3      	cmp	r3, r4
 800be12:	d9fa      	bls.n	800be0a <_free_r+0x42>
 800be14:	6811      	ldr	r1, [r2, #0]
 800be16:	1850      	adds	r0, r2, r1
 800be18:	42a0      	cmp	r0, r4
 800be1a:	d10b      	bne.n	800be34 <_free_r+0x6c>
 800be1c:	6820      	ldr	r0, [r4, #0]
 800be1e:	4401      	add	r1, r0
 800be20:	1850      	adds	r0, r2, r1
 800be22:	4283      	cmp	r3, r0
 800be24:	6011      	str	r1, [r2, #0]
 800be26:	d1e0      	bne.n	800bdea <_free_r+0x22>
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4401      	add	r1, r0
 800be2e:	6011      	str	r1, [r2, #0]
 800be30:	6053      	str	r3, [r2, #4]
 800be32:	e7da      	b.n	800bdea <_free_r+0x22>
 800be34:	d902      	bls.n	800be3c <_free_r+0x74>
 800be36:	230c      	movs	r3, #12
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	e7d6      	b.n	800bdea <_free_r+0x22>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	1821      	adds	r1, r4, r0
 800be40:	428b      	cmp	r3, r1
 800be42:	bf01      	itttt	eq
 800be44:	6819      	ldreq	r1, [r3, #0]
 800be46:	685b      	ldreq	r3, [r3, #4]
 800be48:	1809      	addeq	r1, r1, r0
 800be4a:	6021      	streq	r1, [r4, #0]
 800be4c:	6063      	str	r3, [r4, #4]
 800be4e:	6054      	str	r4, [r2, #4]
 800be50:	e7cb      	b.n	800bdea <_free_r+0x22>
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20000790 	.word	0x20000790

0800be58 <sbrk_aligned>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	4e0e      	ldr	r6, [pc, #56]	; (800be94 <sbrk_aligned+0x3c>)
 800be5c:	460c      	mov	r4, r1
 800be5e:	6831      	ldr	r1, [r6, #0]
 800be60:	4605      	mov	r5, r0
 800be62:	b911      	cbnz	r1, 800be6a <sbrk_aligned+0x12>
 800be64:	f000 f9ee 	bl	800c244 <_sbrk_r>
 800be68:	6030      	str	r0, [r6, #0]
 800be6a:	4621      	mov	r1, r4
 800be6c:	4628      	mov	r0, r5
 800be6e:	f000 f9e9 	bl	800c244 <_sbrk_r>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	d00a      	beq.n	800be8c <sbrk_aligned+0x34>
 800be76:	1cc4      	adds	r4, r0, #3
 800be78:	f024 0403 	bic.w	r4, r4, #3
 800be7c:	42a0      	cmp	r0, r4
 800be7e:	d007      	beq.n	800be90 <sbrk_aligned+0x38>
 800be80:	1a21      	subs	r1, r4, r0
 800be82:	4628      	mov	r0, r5
 800be84:	f000 f9de 	bl	800c244 <_sbrk_r>
 800be88:	3001      	adds	r0, #1
 800be8a:	d101      	bne.n	800be90 <sbrk_aligned+0x38>
 800be8c:	f04f 34ff 	mov.w	r4, #4294967295
 800be90:	4620      	mov	r0, r4
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	20000794 	.word	0x20000794

0800be98 <_malloc_r>:
 800be98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9c:	1ccd      	adds	r5, r1, #3
 800be9e:	f025 0503 	bic.w	r5, r5, #3
 800bea2:	3508      	adds	r5, #8
 800bea4:	2d0c      	cmp	r5, #12
 800bea6:	bf38      	it	cc
 800bea8:	250c      	movcc	r5, #12
 800beaa:	2d00      	cmp	r5, #0
 800beac:	4607      	mov	r7, r0
 800beae:	db01      	blt.n	800beb4 <_malloc_r+0x1c>
 800beb0:	42a9      	cmp	r1, r5
 800beb2:	d905      	bls.n	800bec0 <_malloc_r+0x28>
 800beb4:	230c      	movs	r3, #12
 800beb6:	2600      	movs	r6, #0
 800beb8:	603b      	str	r3, [r7, #0]
 800beba:	4630      	mov	r0, r6
 800bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec0:	4e2e      	ldr	r6, [pc, #184]	; (800bf7c <_malloc_r+0xe4>)
 800bec2:	f000 fa3b 	bl	800c33c <__malloc_lock>
 800bec6:	6833      	ldr	r3, [r6, #0]
 800bec8:	461c      	mov	r4, r3
 800beca:	bb34      	cbnz	r4, 800bf1a <_malloc_r+0x82>
 800becc:	4629      	mov	r1, r5
 800bece:	4638      	mov	r0, r7
 800bed0:	f7ff ffc2 	bl	800be58 <sbrk_aligned>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	4604      	mov	r4, r0
 800bed8:	d14d      	bne.n	800bf76 <_malloc_r+0xde>
 800beda:	6834      	ldr	r4, [r6, #0]
 800bedc:	4626      	mov	r6, r4
 800bede:	2e00      	cmp	r6, #0
 800bee0:	d140      	bne.n	800bf64 <_malloc_r+0xcc>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	4631      	mov	r1, r6
 800bee6:	4638      	mov	r0, r7
 800bee8:	eb04 0803 	add.w	r8, r4, r3
 800beec:	f000 f9aa 	bl	800c244 <_sbrk_r>
 800bef0:	4580      	cmp	r8, r0
 800bef2:	d13a      	bne.n	800bf6a <_malloc_r+0xd2>
 800bef4:	6821      	ldr	r1, [r4, #0]
 800bef6:	3503      	adds	r5, #3
 800bef8:	1a6d      	subs	r5, r5, r1
 800befa:	f025 0503 	bic.w	r5, r5, #3
 800befe:	3508      	adds	r5, #8
 800bf00:	2d0c      	cmp	r5, #12
 800bf02:	bf38      	it	cc
 800bf04:	250c      	movcc	r5, #12
 800bf06:	4638      	mov	r0, r7
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7ff ffa5 	bl	800be58 <sbrk_aligned>
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d02b      	beq.n	800bf6a <_malloc_r+0xd2>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	442b      	add	r3, r5
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	e00e      	b.n	800bf38 <_malloc_r+0xa0>
 800bf1a:	6822      	ldr	r2, [r4, #0]
 800bf1c:	1b52      	subs	r2, r2, r5
 800bf1e:	d41e      	bmi.n	800bf5e <_malloc_r+0xc6>
 800bf20:	2a0b      	cmp	r2, #11
 800bf22:	d916      	bls.n	800bf52 <_malloc_r+0xba>
 800bf24:	1961      	adds	r1, r4, r5
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	6025      	str	r5, [r4, #0]
 800bf2a:	bf18      	it	ne
 800bf2c:	6059      	strne	r1, [r3, #4]
 800bf2e:	6863      	ldr	r3, [r4, #4]
 800bf30:	bf08      	it	eq
 800bf32:	6031      	streq	r1, [r6, #0]
 800bf34:	5162      	str	r2, [r4, r5]
 800bf36:	604b      	str	r3, [r1, #4]
 800bf38:	4638      	mov	r0, r7
 800bf3a:	f104 060b 	add.w	r6, r4, #11
 800bf3e:	f000 fa03 	bl	800c348 <__malloc_unlock>
 800bf42:	f026 0607 	bic.w	r6, r6, #7
 800bf46:	1d23      	adds	r3, r4, #4
 800bf48:	1af2      	subs	r2, r6, r3
 800bf4a:	d0b6      	beq.n	800beba <_malloc_r+0x22>
 800bf4c:	1b9b      	subs	r3, r3, r6
 800bf4e:	50a3      	str	r3, [r4, r2]
 800bf50:	e7b3      	b.n	800beba <_malloc_r+0x22>
 800bf52:	6862      	ldr	r2, [r4, #4]
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	bf0c      	ite	eq
 800bf58:	6032      	streq	r2, [r6, #0]
 800bf5a:	605a      	strne	r2, [r3, #4]
 800bf5c:	e7ec      	b.n	800bf38 <_malloc_r+0xa0>
 800bf5e:	4623      	mov	r3, r4
 800bf60:	6864      	ldr	r4, [r4, #4]
 800bf62:	e7b2      	b.n	800beca <_malloc_r+0x32>
 800bf64:	4634      	mov	r4, r6
 800bf66:	6876      	ldr	r6, [r6, #4]
 800bf68:	e7b9      	b.n	800bede <_malloc_r+0x46>
 800bf6a:	230c      	movs	r3, #12
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	f000 f9ea 	bl	800c348 <__malloc_unlock>
 800bf74:	e7a1      	b.n	800beba <_malloc_r+0x22>
 800bf76:	6025      	str	r5, [r4, #0]
 800bf78:	e7de      	b.n	800bf38 <_malloc_r+0xa0>
 800bf7a:	bf00      	nop
 800bf7c:	20000790 	.word	0x20000790

0800bf80 <__ssputs_r>:
 800bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf84:	688e      	ldr	r6, [r1, #8]
 800bf86:	4682      	mov	sl, r0
 800bf88:	429e      	cmp	r6, r3
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4690      	mov	r8, r2
 800bf8e:	461f      	mov	r7, r3
 800bf90:	d838      	bhi.n	800c004 <__ssputs_r+0x84>
 800bf92:	898a      	ldrh	r2, [r1, #12]
 800bf94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf98:	d032      	beq.n	800c000 <__ssputs_r+0x80>
 800bf9a:	6825      	ldr	r5, [r4, #0]
 800bf9c:	6909      	ldr	r1, [r1, #16]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	eba5 0901 	sub.w	r9, r5, r1
 800bfa4:	6965      	ldr	r5, [r4, #20]
 800bfa6:	444b      	add	r3, r9
 800bfa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfb0:	106d      	asrs	r5, r5, #1
 800bfb2:	429d      	cmp	r5, r3
 800bfb4:	bf38      	it	cc
 800bfb6:	461d      	movcc	r5, r3
 800bfb8:	0553      	lsls	r3, r2, #21
 800bfba:	d531      	bpl.n	800c020 <__ssputs_r+0xa0>
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	f7ff ff6b 	bl	800be98 <_malloc_r>
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	b950      	cbnz	r0, 800bfdc <__ssputs_r+0x5c>
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfcc:	f8ca 3000 	str.w	r3, [sl]
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfdc:	464a      	mov	r2, r9
 800bfde:	6921      	ldr	r1, [r4, #16]
 800bfe0:	f7fc fadc 	bl	800859c <memcpy>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	6126      	str	r6, [r4, #16]
 800bff2:	444e      	add	r6, r9
 800bff4:	6026      	str	r6, [r4, #0]
 800bff6:	463e      	mov	r6, r7
 800bff8:	6165      	str	r5, [r4, #20]
 800bffa:	eba5 0509 	sub.w	r5, r5, r9
 800bffe:	60a5      	str	r5, [r4, #8]
 800c000:	42be      	cmp	r6, r7
 800c002:	d900      	bls.n	800c006 <__ssputs_r+0x86>
 800c004:	463e      	mov	r6, r7
 800c006:	4632      	mov	r2, r6
 800c008:	4641      	mov	r1, r8
 800c00a:	6820      	ldr	r0, [r4, #0]
 800c00c:	f000 f97c 	bl	800c308 <memmove>
 800c010:	68a3      	ldr	r3, [r4, #8]
 800c012:	2000      	movs	r0, #0
 800c014:	1b9b      	subs	r3, r3, r6
 800c016:	60a3      	str	r3, [r4, #8]
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	4433      	add	r3, r6
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	e7db      	b.n	800bfd8 <__ssputs_r+0x58>
 800c020:	462a      	mov	r2, r5
 800c022:	f000 f997 	bl	800c354 <_realloc_r>
 800c026:	4606      	mov	r6, r0
 800c028:	2800      	cmp	r0, #0
 800c02a:	d1e1      	bne.n	800bff0 <__ssputs_r+0x70>
 800c02c:	4650      	mov	r0, sl
 800c02e:	6921      	ldr	r1, [r4, #16]
 800c030:	f7ff feca 	bl	800bdc8 <_free_r>
 800c034:	e7c7      	b.n	800bfc6 <__ssputs_r+0x46>
	...

0800c038 <_svfiprintf_r>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	4698      	mov	r8, r3
 800c03e:	898b      	ldrh	r3, [r1, #12]
 800c040:	4607      	mov	r7, r0
 800c042:	061b      	lsls	r3, r3, #24
 800c044:	460d      	mov	r5, r1
 800c046:	4614      	mov	r4, r2
 800c048:	b09d      	sub	sp, #116	; 0x74
 800c04a:	d50e      	bpl.n	800c06a <_svfiprintf_r+0x32>
 800c04c:	690b      	ldr	r3, [r1, #16]
 800c04e:	b963      	cbnz	r3, 800c06a <_svfiprintf_r+0x32>
 800c050:	2140      	movs	r1, #64	; 0x40
 800c052:	f7ff ff21 	bl	800be98 <_malloc_r>
 800c056:	6028      	str	r0, [r5, #0]
 800c058:	6128      	str	r0, [r5, #16]
 800c05a:	b920      	cbnz	r0, 800c066 <_svfiprintf_r+0x2e>
 800c05c:	230c      	movs	r3, #12
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	f04f 30ff 	mov.w	r0, #4294967295
 800c064:	e0d1      	b.n	800c20a <_svfiprintf_r+0x1d2>
 800c066:	2340      	movs	r3, #64	; 0x40
 800c068:	616b      	str	r3, [r5, #20]
 800c06a:	2300      	movs	r3, #0
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	2320      	movs	r3, #32
 800c070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c074:	2330      	movs	r3, #48	; 0x30
 800c076:	f04f 0901 	mov.w	r9, #1
 800c07a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c07e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c224 <_svfiprintf_r+0x1ec>
 800c082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c086:	4623      	mov	r3, r4
 800c088:	469a      	mov	sl, r3
 800c08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08e:	b10a      	cbz	r2, 800c094 <_svfiprintf_r+0x5c>
 800c090:	2a25      	cmp	r2, #37	; 0x25
 800c092:	d1f9      	bne.n	800c088 <_svfiprintf_r+0x50>
 800c094:	ebba 0b04 	subs.w	fp, sl, r4
 800c098:	d00b      	beq.n	800c0b2 <_svfiprintf_r+0x7a>
 800c09a:	465b      	mov	r3, fp
 800c09c:	4622      	mov	r2, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ff6d 	bl	800bf80 <__ssputs_r>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f000 80aa 	beq.w	800c200 <_svfiprintf_r+0x1c8>
 800c0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0ae:	445a      	add	r2, fp
 800c0b0:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 80a2 	beq.w	800c200 <_svfiprintf_r+0x1c8>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d2:	931a      	str	r3, [sp, #104]	; 0x68
 800c0d4:	4654      	mov	r4, sl
 800c0d6:	2205      	movs	r2, #5
 800c0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0dc:	4851      	ldr	r0, [pc, #324]	; (800c224 <_svfiprintf_r+0x1ec>)
 800c0de:	f7ff f999 	bl	800b414 <memchr>
 800c0e2:	9a04      	ldr	r2, [sp, #16]
 800c0e4:	b9d8      	cbnz	r0, 800c11e <_svfiprintf_r+0xe6>
 800c0e6:	06d0      	lsls	r0, r2, #27
 800c0e8:	bf44      	itt	mi
 800c0ea:	2320      	movmi	r3, #32
 800c0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f0:	0711      	lsls	r1, r2, #28
 800c0f2:	bf44      	itt	mi
 800c0f4:	232b      	movmi	r3, #43	; 0x2b
 800c0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c100:	d015      	beq.n	800c12e <_svfiprintf_r+0xf6>
 800c102:	4654      	mov	r4, sl
 800c104:	2000      	movs	r0, #0
 800c106:	f04f 0c0a 	mov.w	ip, #10
 800c10a:	9a07      	ldr	r2, [sp, #28]
 800c10c:	4621      	mov	r1, r4
 800c10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c112:	3b30      	subs	r3, #48	; 0x30
 800c114:	2b09      	cmp	r3, #9
 800c116:	d94e      	bls.n	800c1b6 <_svfiprintf_r+0x17e>
 800c118:	b1b0      	cbz	r0, 800c148 <_svfiprintf_r+0x110>
 800c11a:	9207      	str	r2, [sp, #28]
 800c11c:	e014      	b.n	800c148 <_svfiprintf_r+0x110>
 800c11e:	eba0 0308 	sub.w	r3, r0, r8
 800c122:	fa09 f303 	lsl.w	r3, r9, r3
 800c126:	4313      	orrs	r3, r2
 800c128:	46a2      	mov	sl, r4
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	e7d2      	b.n	800c0d4 <_svfiprintf_r+0x9c>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	1d19      	adds	r1, r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	9103      	str	r1, [sp, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfbb      	ittet	lt
 800c13a:	425b      	neglt	r3, r3
 800c13c:	f042 0202 	orrlt.w	r2, r2, #2
 800c140:	9307      	strge	r3, [sp, #28]
 800c142:	9307      	strlt	r3, [sp, #28]
 800c144:	bfb8      	it	lt
 800c146:	9204      	strlt	r2, [sp, #16]
 800c148:	7823      	ldrb	r3, [r4, #0]
 800c14a:	2b2e      	cmp	r3, #46	; 0x2e
 800c14c:	d10c      	bne.n	800c168 <_svfiprintf_r+0x130>
 800c14e:	7863      	ldrb	r3, [r4, #1]
 800c150:	2b2a      	cmp	r3, #42	; 0x2a
 800c152:	d135      	bne.n	800c1c0 <_svfiprintf_r+0x188>
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	3402      	adds	r4, #2
 800c158:	1d1a      	adds	r2, r3, #4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	9203      	str	r2, [sp, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bfb8      	it	lt
 800c162:	f04f 33ff 	movlt.w	r3, #4294967295
 800c166:	9305      	str	r3, [sp, #20]
 800c168:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c228 <_svfiprintf_r+0x1f0>
 800c16c:	2203      	movs	r2, #3
 800c16e:	4650      	mov	r0, sl
 800c170:	7821      	ldrb	r1, [r4, #0]
 800c172:	f7ff f94f 	bl	800b414 <memchr>
 800c176:	b140      	cbz	r0, 800c18a <_svfiprintf_r+0x152>
 800c178:	2340      	movs	r3, #64	; 0x40
 800c17a:	eba0 000a 	sub.w	r0, r0, sl
 800c17e:	fa03 f000 	lsl.w	r0, r3, r0
 800c182:	9b04      	ldr	r3, [sp, #16]
 800c184:	3401      	adds	r4, #1
 800c186:	4303      	orrs	r3, r0
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18e:	2206      	movs	r2, #6
 800c190:	4826      	ldr	r0, [pc, #152]	; (800c22c <_svfiprintf_r+0x1f4>)
 800c192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c196:	f7ff f93d 	bl	800b414 <memchr>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d038      	beq.n	800c210 <_svfiprintf_r+0x1d8>
 800c19e:	4b24      	ldr	r3, [pc, #144]	; (800c230 <_svfiprintf_r+0x1f8>)
 800c1a0:	bb1b      	cbnz	r3, 800c1ea <_svfiprintf_r+0x1b2>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	3307      	adds	r3, #7
 800c1a6:	f023 0307 	bic.w	r3, r3, #7
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	9303      	str	r3, [sp, #12]
 800c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b0:	4433      	add	r3, r6
 800c1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b4:	e767      	b.n	800c086 <_svfiprintf_r+0x4e>
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	2001      	movs	r0, #1
 800c1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1be:	e7a5      	b.n	800c10c <_svfiprintf_r+0xd4>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f04f 0c0a 	mov.w	ip, #10
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	3401      	adds	r4, #1
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d2:	3a30      	subs	r2, #48	; 0x30
 800c1d4:	2a09      	cmp	r2, #9
 800c1d6:	d903      	bls.n	800c1e0 <_svfiprintf_r+0x1a8>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0c5      	beq.n	800c168 <_svfiprintf_r+0x130>
 800c1dc:	9105      	str	r1, [sp, #20]
 800c1de:	e7c3      	b.n	800c168 <_svfiprintf_r+0x130>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e8:	e7f0      	b.n	800c1cc <_svfiprintf_r+0x194>
 800c1ea:	ab03      	add	r3, sp, #12
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	4638      	mov	r0, r7
 800c1f2:	4b10      	ldr	r3, [pc, #64]	; (800c234 <_svfiprintf_r+0x1fc>)
 800c1f4:	a904      	add	r1, sp, #16
 800c1f6:	f7fc fa85 	bl	8008704 <_printf_float>
 800c1fa:	1c42      	adds	r2, r0, #1
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	d1d6      	bne.n	800c1ae <_svfiprintf_r+0x176>
 800c200:	89ab      	ldrh	r3, [r5, #12]
 800c202:	065b      	lsls	r3, r3, #25
 800c204:	f53f af2c 	bmi.w	800c060 <_svfiprintf_r+0x28>
 800c208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c20a:	b01d      	add	sp, #116	; 0x74
 800c20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c210:	ab03      	add	r3, sp, #12
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	462a      	mov	r2, r5
 800c216:	4638      	mov	r0, r7
 800c218:	4b06      	ldr	r3, [pc, #24]	; (800c234 <_svfiprintf_r+0x1fc>)
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	f7fc fd0e 	bl	8008c3c <_printf_i>
 800c220:	e7eb      	b.n	800c1fa <_svfiprintf_r+0x1c2>
 800c222:	bf00      	nop
 800c224:	0800d26c 	.word	0x0800d26c
 800c228:	0800d272 	.word	0x0800d272
 800c22c:	0800d276 	.word	0x0800d276
 800c230:	08008705 	.word	0x08008705
 800c234:	0800bf81 	.word	0x0800bf81

0800c238 <nan>:
 800c238:	2000      	movs	r0, #0
 800c23a:	4901      	ldr	r1, [pc, #4]	; (800c240 <nan+0x8>)
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	7ff80000 	.word	0x7ff80000

0800c244 <_sbrk_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	2300      	movs	r3, #0
 800c248:	4d05      	ldr	r5, [pc, #20]	; (800c260 <_sbrk_r+0x1c>)
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	602b      	str	r3, [r5, #0]
 800c250:	f7f4 ff96 	bl	8001180 <_sbrk>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_sbrk_r+0x1a>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_sbrk_r+0x1a>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	20000798 	.word	0x20000798

0800c264 <strncmp>:
 800c264:	4603      	mov	r3, r0
 800c266:	b510      	push	{r4, lr}
 800c268:	b172      	cbz	r2, 800c288 <strncmp+0x24>
 800c26a:	3901      	subs	r1, #1
 800c26c:	1884      	adds	r4, r0, r2
 800c26e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c272:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c276:	4290      	cmp	r0, r2
 800c278:	d101      	bne.n	800c27e <strncmp+0x1a>
 800c27a:	42a3      	cmp	r3, r4
 800c27c:	d101      	bne.n	800c282 <strncmp+0x1e>
 800c27e:	1a80      	subs	r0, r0, r2
 800c280:	bd10      	pop	{r4, pc}
 800c282:	2800      	cmp	r0, #0
 800c284:	d1f3      	bne.n	800c26e <strncmp+0xa>
 800c286:	e7fa      	b.n	800c27e <strncmp+0x1a>
 800c288:	4610      	mov	r0, r2
 800c28a:	e7f9      	b.n	800c280 <strncmp+0x1c>

0800c28c <__ascii_wctomb>:
 800c28c:	4603      	mov	r3, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	b141      	cbz	r1, 800c2a4 <__ascii_wctomb+0x18>
 800c292:	2aff      	cmp	r2, #255	; 0xff
 800c294:	d904      	bls.n	800c2a0 <__ascii_wctomb+0x14>
 800c296:	228a      	movs	r2, #138	; 0x8a
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	4770      	bx	lr
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	700a      	strb	r2, [r1, #0]
 800c2a4:	4770      	bx	lr
	...

0800c2a8 <__assert_func>:
 800c2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2aa:	4614      	mov	r4, r2
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <__assert_func+0x2c>)
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68d8      	ldr	r0, [r3, #12]
 800c2b6:	b14c      	cbz	r4, 800c2cc <__assert_func+0x24>
 800c2b8:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <__assert_func+0x30>)
 800c2ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2be:	9100      	str	r1, [sp, #0]
 800c2c0:	462b      	mov	r3, r5
 800c2c2:	4906      	ldr	r1, [pc, #24]	; (800c2dc <__assert_func+0x34>)
 800c2c4:	f000 f80e 	bl	800c2e4 <fiprintf>
 800c2c8:	f000 fa8a 	bl	800c7e0 <abort>
 800c2cc:	4b04      	ldr	r3, [pc, #16]	; (800c2e0 <__assert_func+0x38>)
 800c2ce:	461c      	mov	r4, r3
 800c2d0:	e7f3      	b.n	800c2ba <__assert_func+0x12>
 800c2d2:	bf00      	nop
 800c2d4:	200002cc 	.word	0x200002cc
 800c2d8:	0800d27d 	.word	0x0800d27d
 800c2dc:	0800d28a 	.word	0x0800d28a
 800c2e0:	0800d2b8 	.word	0x0800d2b8

0800c2e4 <fiprintf>:
 800c2e4:	b40e      	push	{r1, r2, r3}
 800c2e6:	b503      	push	{r0, r1, lr}
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	ab03      	add	r3, sp, #12
 800c2ec:	4805      	ldr	r0, [pc, #20]	; (800c304 <fiprintf+0x20>)
 800c2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f2:	6800      	ldr	r0, [r0, #0]
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	f000 f883 	bl	800c400 <_vfiprintf_r>
 800c2fa:	b002      	add	sp, #8
 800c2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c300:	b003      	add	sp, #12
 800c302:	4770      	bx	lr
 800c304:	200002cc 	.word	0x200002cc

0800c308 <memmove>:
 800c308:	4288      	cmp	r0, r1
 800c30a:	b510      	push	{r4, lr}
 800c30c:	eb01 0402 	add.w	r4, r1, r2
 800c310:	d902      	bls.n	800c318 <memmove+0x10>
 800c312:	4284      	cmp	r4, r0
 800c314:	4623      	mov	r3, r4
 800c316:	d807      	bhi.n	800c328 <memmove+0x20>
 800c318:	1e43      	subs	r3, r0, #1
 800c31a:	42a1      	cmp	r1, r4
 800c31c:	d008      	beq.n	800c330 <memmove+0x28>
 800c31e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c322:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c326:	e7f8      	b.n	800c31a <memmove+0x12>
 800c328:	4601      	mov	r1, r0
 800c32a:	4402      	add	r2, r0
 800c32c:	428a      	cmp	r2, r1
 800c32e:	d100      	bne.n	800c332 <memmove+0x2a>
 800c330:	bd10      	pop	{r4, pc}
 800c332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c33a:	e7f7      	b.n	800c32c <memmove+0x24>

0800c33c <__malloc_lock>:
 800c33c:	4801      	ldr	r0, [pc, #4]	; (800c344 <__malloc_lock+0x8>)
 800c33e:	f000 bc0b 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800c342:	bf00      	nop
 800c344:	2000079c 	.word	0x2000079c

0800c348 <__malloc_unlock>:
 800c348:	4801      	ldr	r0, [pc, #4]	; (800c350 <__malloc_unlock+0x8>)
 800c34a:	f000 bc06 	b.w	800cb5a <__retarget_lock_release_recursive>
 800c34e:	bf00      	nop
 800c350:	2000079c 	.word	0x2000079c

0800c354 <_realloc_r>:
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	4680      	mov	r8, r0
 800c35a:	4614      	mov	r4, r2
 800c35c:	460e      	mov	r6, r1
 800c35e:	b921      	cbnz	r1, 800c36a <_realloc_r+0x16>
 800c360:	4611      	mov	r1, r2
 800c362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c366:	f7ff bd97 	b.w	800be98 <_malloc_r>
 800c36a:	b92a      	cbnz	r2, 800c378 <_realloc_r+0x24>
 800c36c:	f7ff fd2c 	bl	800bdc8 <_free_r>
 800c370:	4625      	mov	r5, r4
 800c372:	4628      	mov	r0, r5
 800c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c378:	f000 fc56 	bl	800cc28 <_malloc_usable_size_r>
 800c37c:	4284      	cmp	r4, r0
 800c37e:	4607      	mov	r7, r0
 800c380:	d802      	bhi.n	800c388 <_realloc_r+0x34>
 800c382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c386:	d812      	bhi.n	800c3ae <_realloc_r+0x5a>
 800c388:	4621      	mov	r1, r4
 800c38a:	4640      	mov	r0, r8
 800c38c:	f7ff fd84 	bl	800be98 <_malloc_r>
 800c390:	4605      	mov	r5, r0
 800c392:	2800      	cmp	r0, #0
 800c394:	d0ed      	beq.n	800c372 <_realloc_r+0x1e>
 800c396:	42bc      	cmp	r4, r7
 800c398:	4622      	mov	r2, r4
 800c39a:	4631      	mov	r1, r6
 800c39c:	bf28      	it	cs
 800c39e:	463a      	movcs	r2, r7
 800c3a0:	f7fc f8fc 	bl	800859c <memcpy>
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	f7ff fd0e 	bl	800bdc8 <_free_r>
 800c3ac:	e7e1      	b.n	800c372 <_realloc_r+0x1e>
 800c3ae:	4635      	mov	r5, r6
 800c3b0:	e7df      	b.n	800c372 <_realloc_r+0x1e>

0800c3b2 <__sfputc_r>:
 800c3b2:	6893      	ldr	r3, [r2, #8]
 800c3b4:	b410      	push	{r4}
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	6093      	str	r3, [r2, #8]
 800c3bc:	da07      	bge.n	800c3ce <__sfputc_r+0x1c>
 800c3be:	6994      	ldr	r4, [r2, #24]
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	db01      	blt.n	800c3c8 <__sfputc_r+0x16>
 800c3c4:	290a      	cmp	r1, #10
 800c3c6:	d102      	bne.n	800c3ce <__sfputc_r+0x1c>
 800c3c8:	bc10      	pop	{r4}
 800c3ca:	f000 b949 	b.w	800c660 <__swbuf_r>
 800c3ce:	6813      	ldr	r3, [r2, #0]
 800c3d0:	1c58      	adds	r0, r3, #1
 800c3d2:	6010      	str	r0, [r2, #0]
 800c3d4:	7019      	strb	r1, [r3, #0]
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	bc10      	pop	{r4}
 800c3da:	4770      	bx	lr

0800c3dc <__sfputs_r>:
 800c3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460f      	mov	r7, r1
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	18d5      	adds	r5, r2, r3
 800c3e6:	42ac      	cmp	r4, r5
 800c3e8:	d101      	bne.n	800c3ee <__sfputs_r+0x12>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e007      	b.n	800c3fe <__sfputs_r+0x22>
 800c3ee:	463a      	mov	r2, r7
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f6:	f7ff ffdc 	bl	800c3b2 <__sfputc_r>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	d1f3      	bne.n	800c3e6 <__sfputs_r+0xa>
 800c3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c400 <_vfiprintf_r>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	460d      	mov	r5, r1
 800c406:	4614      	mov	r4, r2
 800c408:	4698      	mov	r8, r3
 800c40a:	4606      	mov	r6, r0
 800c40c:	b09d      	sub	sp, #116	; 0x74
 800c40e:	b118      	cbz	r0, 800c418 <_vfiprintf_r+0x18>
 800c410:	6983      	ldr	r3, [r0, #24]
 800c412:	b90b      	cbnz	r3, 800c418 <_vfiprintf_r+0x18>
 800c414:	f000 fb02 	bl	800ca1c <__sinit>
 800c418:	4b89      	ldr	r3, [pc, #548]	; (800c640 <_vfiprintf_r+0x240>)
 800c41a:	429d      	cmp	r5, r3
 800c41c:	d11b      	bne.n	800c456 <_vfiprintf_r+0x56>
 800c41e:	6875      	ldr	r5, [r6, #4]
 800c420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c422:	07d9      	lsls	r1, r3, #31
 800c424:	d405      	bmi.n	800c432 <_vfiprintf_r+0x32>
 800c426:	89ab      	ldrh	r3, [r5, #12]
 800c428:	059a      	lsls	r2, r3, #22
 800c42a:	d402      	bmi.n	800c432 <_vfiprintf_r+0x32>
 800c42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c42e:	f000 fb93 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c432:	89ab      	ldrh	r3, [r5, #12]
 800c434:	071b      	lsls	r3, r3, #28
 800c436:	d501      	bpl.n	800c43c <_vfiprintf_r+0x3c>
 800c438:	692b      	ldr	r3, [r5, #16]
 800c43a:	b9eb      	cbnz	r3, 800c478 <_vfiprintf_r+0x78>
 800c43c:	4629      	mov	r1, r5
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f960 	bl	800c704 <__swsetup_r>
 800c444:	b1c0      	cbz	r0, 800c478 <_vfiprintf_r+0x78>
 800c446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c448:	07dc      	lsls	r4, r3, #31
 800c44a:	d50e      	bpl.n	800c46a <_vfiprintf_r+0x6a>
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	b01d      	add	sp, #116	; 0x74
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	4b7b      	ldr	r3, [pc, #492]	; (800c644 <_vfiprintf_r+0x244>)
 800c458:	429d      	cmp	r5, r3
 800c45a:	d101      	bne.n	800c460 <_vfiprintf_r+0x60>
 800c45c:	68b5      	ldr	r5, [r6, #8]
 800c45e:	e7df      	b.n	800c420 <_vfiprintf_r+0x20>
 800c460:	4b79      	ldr	r3, [pc, #484]	; (800c648 <_vfiprintf_r+0x248>)
 800c462:	429d      	cmp	r5, r3
 800c464:	bf08      	it	eq
 800c466:	68f5      	ldreq	r5, [r6, #12]
 800c468:	e7da      	b.n	800c420 <_vfiprintf_r+0x20>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	0598      	lsls	r0, r3, #22
 800c46e:	d4ed      	bmi.n	800c44c <_vfiprintf_r+0x4c>
 800c470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c472:	f000 fb72 	bl	800cb5a <__retarget_lock_release_recursive>
 800c476:	e7e9      	b.n	800c44c <_vfiprintf_r+0x4c>
 800c478:	2300      	movs	r3, #0
 800c47a:	9309      	str	r3, [sp, #36]	; 0x24
 800c47c:	2320      	movs	r3, #32
 800c47e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c482:	2330      	movs	r3, #48	; 0x30
 800c484:	f04f 0901 	mov.w	r9, #1
 800c488:	f8cd 800c 	str.w	r8, [sp, #12]
 800c48c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c64c <_vfiprintf_r+0x24c>
 800c490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c494:	4623      	mov	r3, r4
 800c496:	469a      	mov	sl, r3
 800c498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c49c:	b10a      	cbz	r2, 800c4a2 <_vfiprintf_r+0xa2>
 800c49e:	2a25      	cmp	r2, #37	; 0x25
 800c4a0:	d1f9      	bne.n	800c496 <_vfiprintf_r+0x96>
 800c4a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4a6:	d00b      	beq.n	800c4c0 <_vfiprintf_r+0xc0>
 800c4a8:	465b      	mov	r3, fp
 800c4aa:	4622      	mov	r2, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f7ff ff94 	bl	800c3dc <__sfputs_r>
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f000 80aa 	beq.w	800c60e <_vfiprintf_r+0x20e>
 800c4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4bc:	445a      	add	r2, fp
 800c4be:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 80a2 	beq.w	800c60e <_vfiprintf_r+0x20e>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d4:	f10a 0a01 	add.w	sl, sl, #1
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	9307      	str	r3, [sp, #28]
 800c4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4e0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4e2:	4654      	mov	r4, sl
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ea:	4858      	ldr	r0, [pc, #352]	; (800c64c <_vfiprintf_r+0x24c>)
 800c4ec:	f7fe ff92 	bl	800b414 <memchr>
 800c4f0:	9a04      	ldr	r2, [sp, #16]
 800c4f2:	b9d8      	cbnz	r0, 800c52c <_vfiprintf_r+0x12c>
 800c4f4:	06d1      	lsls	r1, r2, #27
 800c4f6:	bf44      	itt	mi
 800c4f8:	2320      	movmi	r3, #32
 800c4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4fe:	0713      	lsls	r3, r2, #28
 800c500:	bf44      	itt	mi
 800c502:	232b      	movmi	r3, #43	; 0x2b
 800c504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c508:	f89a 3000 	ldrb.w	r3, [sl]
 800c50c:	2b2a      	cmp	r3, #42	; 0x2a
 800c50e:	d015      	beq.n	800c53c <_vfiprintf_r+0x13c>
 800c510:	4654      	mov	r4, sl
 800c512:	2000      	movs	r0, #0
 800c514:	f04f 0c0a 	mov.w	ip, #10
 800c518:	9a07      	ldr	r2, [sp, #28]
 800c51a:	4621      	mov	r1, r4
 800c51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c520:	3b30      	subs	r3, #48	; 0x30
 800c522:	2b09      	cmp	r3, #9
 800c524:	d94e      	bls.n	800c5c4 <_vfiprintf_r+0x1c4>
 800c526:	b1b0      	cbz	r0, 800c556 <_vfiprintf_r+0x156>
 800c528:	9207      	str	r2, [sp, #28]
 800c52a:	e014      	b.n	800c556 <_vfiprintf_r+0x156>
 800c52c:	eba0 0308 	sub.w	r3, r0, r8
 800c530:	fa09 f303 	lsl.w	r3, r9, r3
 800c534:	4313      	orrs	r3, r2
 800c536:	46a2      	mov	sl, r4
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	e7d2      	b.n	800c4e2 <_vfiprintf_r+0xe2>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	1d19      	adds	r1, r3, #4
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	9103      	str	r1, [sp, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	bfbb      	ittet	lt
 800c548:	425b      	neglt	r3, r3
 800c54a:	f042 0202 	orrlt.w	r2, r2, #2
 800c54e:	9307      	strge	r3, [sp, #28]
 800c550:	9307      	strlt	r3, [sp, #28]
 800c552:	bfb8      	it	lt
 800c554:	9204      	strlt	r2, [sp, #16]
 800c556:	7823      	ldrb	r3, [r4, #0]
 800c558:	2b2e      	cmp	r3, #46	; 0x2e
 800c55a:	d10c      	bne.n	800c576 <_vfiprintf_r+0x176>
 800c55c:	7863      	ldrb	r3, [r4, #1]
 800c55e:	2b2a      	cmp	r3, #42	; 0x2a
 800c560:	d135      	bne.n	800c5ce <_vfiprintf_r+0x1ce>
 800c562:	9b03      	ldr	r3, [sp, #12]
 800c564:	3402      	adds	r4, #2
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9203      	str	r2, [sp, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bfb8      	it	lt
 800c570:	f04f 33ff 	movlt.w	r3, #4294967295
 800c574:	9305      	str	r3, [sp, #20]
 800c576:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c650 <_vfiprintf_r+0x250>
 800c57a:	2203      	movs	r2, #3
 800c57c:	4650      	mov	r0, sl
 800c57e:	7821      	ldrb	r1, [r4, #0]
 800c580:	f7fe ff48 	bl	800b414 <memchr>
 800c584:	b140      	cbz	r0, 800c598 <_vfiprintf_r+0x198>
 800c586:	2340      	movs	r3, #64	; 0x40
 800c588:	eba0 000a 	sub.w	r0, r0, sl
 800c58c:	fa03 f000 	lsl.w	r0, r3, r0
 800c590:	9b04      	ldr	r3, [sp, #16]
 800c592:	3401      	adds	r4, #1
 800c594:	4303      	orrs	r3, r0
 800c596:	9304      	str	r3, [sp, #16]
 800c598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59c:	2206      	movs	r2, #6
 800c59e:	482d      	ldr	r0, [pc, #180]	; (800c654 <_vfiprintf_r+0x254>)
 800c5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5a4:	f7fe ff36 	bl	800b414 <memchr>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d03f      	beq.n	800c62c <_vfiprintf_r+0x22c>
 800c5ac:	4b2a      	ldr	r3, [pc, #168]	; (800c658 <_vfiprintf_r+0x258>)
 800c5ae:	bb1b      	cbnz	r3, 800c5f8 <_vfiprintf_r+0x1f8>
 800c5b0:	9b03      	ldr	r3, [sp, #12]
 800c5b2:	3307      	adds	r3, #7
 800c5b4:	f023 0307 	bic.w	r3, r3, #7
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5be:	443b      	add	r3, r7
 800c5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c2:	e767      	b.n	800c494 <_vfiprintf_r+0x94>
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5cc:	e7a5      	b.n	800c51a <_vfiprintf_r+0x11a>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f04f 0c0a 	mov.w	ip, #10
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	3401      	adds	r4, #1
 800c5d8:	9305      	str	r3, [sp, #20]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5e0:	3a30      	subs	r2, #48	; 0x30
 800c5e2:	2a09      	cmp	r2, #9
 800c5e4:	d903      	bls.n	800c5ee <_vfiprintf_r+0x1ee>
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0c5      	beq.n	800c576 <_vfiprintf_r+0x176>
 800c5ea:	9105      	str	r1, [sp, #20]
 800c5ec:	e7c3      	b.n	800c576 <_vfiprintf_r+0x176>
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5f6:	e7f0      	b.n	800c5da <_vfiprintf_r+0x1da>
 800c5f8:	ab03      	add	r3, sp, #12
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	462a      	mov	r2, r5
 800c5fe:	4630      	mov	r0, r6
 800c600:	4b16      	ldr	r3, [pc, #88]	; (800c65c <_vfiprintf_r+0x25c>)
 800c602:	a904      	add	r1, sp, #16
 800c604:	f7fc f87e 	bl	8008704 <_printf_float>
 800c608:	4607      	mov	r7, r0
 800c60a:	1c78      	adds	r0, r7, #1
 800c60c:	d1d6      	bne.n	800c5bc <_vfiprintf_r+0x1bc>
 800c60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c610:	07d9      	lsls	r1, r3, #31
 800c612:	d405      	bmi.n	800c620 <_vfiprintf_r+0x220>
 800c614:	89ab      	ldrh	r3, [r5, #12]
 800c616:	059a      	lsls	r2, r3, #22
 800c618:	d402      	bmi.n	800c620 <_vfiprintf_r+0x220>
 800c61a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c61c:	f000 fa9d 	bl	800cb5a <__retarget_lock_release_recursive>
 800c620:	89ab      	ldrh	r3, [r5, #12]
 800c622:	065b      	lsls	r3, r3, #25
 800c624:	f53f af12 	bmi.w	800c44c <_vfiprintf_r+0x4c>
 800c628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c62a:	e711      	b.n	800c450 <_vfiprintf_r+0x50>
 800c62c:	ab03      	add	r3, sp, #12
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	462a      	mov	r2, r5
 800c632:	4630      	mov	r0, r6
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <_vfiprintf_r+0x25c>)
 800c636:	a904      	add	r1, sp, #16
 800c638:	f7fc fb00 	bl	8008c3c <_printf_i>
 800c63c:	e7e4      	b.n	800c608 <_vfiprintf_r+0x208>
 800c63e:	bf00      	nop
 800c640:	0800d2dc 	.word	0x0800d2dc
 800c644:	0800d2fc 	.word	0x0800d2fc
 800c648:	0800d2bc 	.word	0x0800d2bc
 800c64c:	0800d26c 	.word	0x0800d26c
 800c650:	0800d272 	.word	0x0800d272
 800c654:	0800d276 	.word	0x0800d276
 800c658:	08008705 	.word	0x08008705
 800c65c:	0800c3dd 	.word	0x0800c3dd

0800c660 <__swbuf_r>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	460e      	mov	r6, r1
 800c664:	4614      	mov	r4, r2
 800c666:	4605      	mov	r5, r0
 800c668:	b118      	cbz	r0, 800c672 <__swbuf_r+0x12>
 800c66a:	6983      	ldr	r3, [r0, #24]
 800c66c:	b90b      	cbnz	r3, 800c672 <__swbuf_r+0x12>
 800c66e:	f000 f9d5 	bl	800ca1c <__sinit>
 800c672:	4b21      	ldr	r3, [pc, #132]	; (800c6f8 <__swbuf_r+0x98>)
 800c674:	429c      	cmp	r4, r3
 800c676:	d12b      	bne.n	800c6d0 <__swbuf_r+0x70>
 800c678:	686c      	ldr	r4, [r5, #4]
 800c67a:	69a3      	ldr	r3, [r4, #24]
 800c67c:	60a3      	str	r3, [r4, #8]
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	071a      	lsls	r2, r3, #28
 800c682:	d52f      	bpl.n	800c6e4 <__swbuf_r+0x84>
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	b36b      	cbz	r3, 800c6e4 <__swbuf_r+0x84>
 800c688:	6923      	ldr	r3, [r4, #16]
 800c68a:	6820      	ldr	r0, [r4, #0]
 800c68c:	b2f6      	uxtb	r6, r6
 800c68e:	1ac0      	subs	r0, r0, r3
 800c690:	6963      	ldr	r3, [r4, #20]
 800c692:	4637      	mov	r7, r6
 800c694:	4283      	cmp	r3, r0
 800c696:	dc04      	bgt.n	800c6a2 <__swbuf_r+0x42>
 800c698:	4621      	mov	r1, r4
 800c69a:	4628      	mov	r0, r5
 800c69c:	f000 f92a 	bl	800c8f4 <_fflush_r>
 800c6a0:	bb30      	cbnz	r0, 800c6f0 <__swbuf_r+0x90>
 800c6a2:	68a3      	ldr	r3, [r4, #8]
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	60a3      	str	r3, [r4, #8]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	6022      	str	r2, [r4, #0]
 800c6b0:	701e      	strb	r6, [r3, #0]
 800c6b2:	6963      	ldr	r3, [r4, #20]
 800c6b4:	4283      	cmp	r3, r0
 800c6b6:	d004      	beq.n	800c6c2 <__swbuf_r+0x62>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	07db      	lsls	r3, r3, #31
 800c6bc:	d506      	bpl.n	800c6cc <__swbuf_r+0x6c>
 800c6be:	2e0a      	cmp	r6, #10
 800c6c0:	d104      	bne.n	800c6cc <__swbuf_r+0x6c>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f000 f915 	bl	800c8f4 <_fflush_r>
 800c6ca:	b988      	cbnz	r0, 800c6f0 <__swbuf_r+0x90>
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d0:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <__swbuf_r+0x9c>)
 800c6d2:	429c      	cmp	r4, r3
 800c6d4:	d101      	bne.n	800c6da <__swbuf_r+0x7a>
 800c6d6:	68ac      	ldr	r4, [r5, #8]
 800c6d8:	e7cf      	b.n	800c67a <__swbuf_r+0x1a>
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <__swbuf_r+0xa0>)
 800c6dc:	429c      	cmp	r4, r3
 800c6de:	bf08      	it	eq
 800c6e0:	68ec      	ldreq	r4, [r5, #12]
 800c6e2:	e7ca      	b.n	800c67a <__swbuf_r+0x1a>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f000 f80c 	bl	800c704 <__swsetup_r>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d0cb      	beq.n	800c688 <__swbuf_r+0x28>
 800c6f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c6f4:	e7ea      	b.n	800c6cc <__swbuf_r+0x6c>
 800c6f6:	bf00      	nop
 800c6f8:	0800d2dc 	.word	0x0800d2dc
 800c6fc:	0800d2fc 	.word	0x0800d2fc
 800c700:	0800d2bc 	.word	0x0800d2bc

0800c704 <__swsetup_r>:
 800c704:	4b32      	ldr	r3, [pc, #200]	; (800c7d0 <__swsetup_r+0xcc>)
 800c706:	b570      	push	{r4, r5, r6, lr}
 800c708:	681d      	ldr	r5, [r3, #0]
 800c70a:	4606      	mov	r6, r0
 800c70c:	460c      	mov	r4, r1
 800c70e:	b125      	cbz	r5, 800c71a <__swsetup_r+0x16>
 800c710:	69ab      	ldr	r3, [r5, #24]
 800c712:	b913      	cbnz	r3, 800c71a <__swsetup_r+0x16>
 800c714:	4628      	mov	r0, r5
 800c716:	f000 f981 	bl	800ca1c <__sinit>
 800c71a:	4b2e      	ldr	r3, [pc, #184]	; (800c7d4 <__swsetup_r+0xd0>)
 800c71c:	429c      	cmp	r4, r3
 800c71e:	d10f      	bne.n	800c740 <__swsetup_r+0x3c>
 800c720:	686c      	ldr	r4, [r5, #4]
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c728:	0719      	lsls	r1, r3, #28
 800c72a:	d42c      	bmi.n	800c786 <__swsetup_r+0x82>
 800c72c:	06dd      	lsls	r5, r3, #27
 800c72e:	d411      	bmi.n	800c754 <__swsetup_r+0x50>
 800c730:	2309      	movs	r3, #9
 800c732:	6033      	str	r3, [r6, #0]
 800c734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	e03e      	b.n	800c7be <__swsetup_r+0xba>
 800c740:	4b25      	ldr	r3, [pc, #148]	; (800c7d8 <__swsetup_r+0xd4>)
 800c742:	429c      	cmp	r4, r3
 800c744:	d101      	bne.n	800c74a <__swsetup_r+0x46>
 800c746:	68ac      	ldr	r4, [r5, #8]
 800c748:	e7eb      	b.n	800c722 <__swsetup_r+0x1e>
 800c74a:	4b24      	ldr	r3, [pc, #144]	; (800c7dc <__swsetup_r+0xd8>)
 800c74c:	429c      	cmp	r4, r3
 800c74e:	bf08      	it	eq
 800c750:	68ec      	ldreq	r4, [r5, #12]
 800c752:	e7e6      	b.n	800c722 <__swsetup_r+0x1e>
 800c754:	0758      	lsls	r0, r3, #29
 800c756:	d512      	bpl.n	800c77e <__swsetup_r+0x7a>
 800c758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c75a:	b141      	cbz	r1, 800c76e <__swsetup_r+0x6a>
 800c75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c760:	4299      	cmp	r1, r3
 800c762:	d002      	beq.n	800c76a <__swsetup_r+0x66>
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff fb2f 	bl	800bdc8 <_free_r>
 800c76a:	2300      	movs	r3, #0
 800c76c:	6363      	str	r3, [r4, #52]	; 0x34
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	2300      	movs	r3, #0
 800c778:	6063      	str	r3, [r4, #4]
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0308 	orr.w	r3, r3, #8
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	b94b      	cbnz	r3, 800c79e <__swsetup_r+0x9a>
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c794:	d003      	beq.n	800c79e <__swsetup_r+0x9a>
 800c796:	4621      	mov	r1, r4
 800c798:	4630      	mov	r0, r6
 800c79a:	f000 fa05 	bl	800cba8 <__smakebuf_r>
 800c79e:	89a0      	ldrh	r0, [r4, #12]
 800c7a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7a4:	f010 0301 	ands.w	r3, r0, #1
 800c7a8:	d00a      	beq.n	800c7c0 <__swsetup_r+0xbc>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60a3      	str	r3, [r4, #8]
 800c7ae:	6963      	ldr	r3, [r4, #20]
 800c7b0:	425b      	negs	r3, r3
 800c7b2:	61a3      	str	r3, [r4, #24]
 800c7b4:	6923      	ldr	r3, [r4, #16]
 800c7b6:	b943      	cbnz	r3, 800c7ca <__swsetup_r+0xc6>
 800c7b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7bc:	d1ba      	bne.n	800c734 <__swsetup_r+0x30>
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	0781      	lsls	r1, r0, #30
 800c7c2:	bf58      	it	pl
 800c7c4:	6963      	ldrpl	r3, [r4, #20]
 800c7c6:	60a3      	str	r3, [r4, #8]
 800c7c8:	e7f4      	b.n	800c7b4 <__swsetup_r+0xb0>
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e7f7      	b.n	800c7be <__swsetup_r+0xba>
 800c7ce:	bf00      	nop
 800c7d0:	200002cc 	.word	0x200002cc
 800c7d4:	0800d2dc 	.word	0x0800d2dc
 800c7d8:	0800d2fc 	.word	0x0800d2fc
 800c7dc:	0800d2bc 	.word	0x0800d2bc

0800c7e0 <abort>:
 800c7e0:	2006      	movs	r0, #6
 800c7e2:	b508      	push	{r3, lr}
 800c7e4:	f000 fa50 	bl	800cc88 <raise>
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	f7f4 fc55 	bl	8001098 <_exit>
	...

0800c7f0 <__sflush_r>:
 800c7f0:	898a      	ldrh	r2, [r1, #12]
 800c7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	0710      	lsls	r0, r2, #28
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	d457      	bmi.n	800c8ac <__sflush_r+0xbc>
 800c7fc:	684b      	ldr	r3, [r1, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dc04      	bgt.n	800c80c <__sflush_r+0x1c>
 800c802:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c804:	2b00      	cmp	r3, #0
 800c806:	dc01      	bgt.n	800c80c <__sflush_r+0x1c>
 800c808:	2000      	movs	r0, #0
 800c80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c80c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c80e:	2e00      	cmp	r6, #0
 800c810:	d0fa      	beq.n	800c808 <__sflush_r+0x18>
 800c812:	2300      	movs	r3, #0
 800c814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c818:	682f      	ldr	r7, [r5, #0]
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	d032      	beq.n	800c884 <__sflush_r+0x94>
 800c81e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	075a      	lsls	r2, r3, #29
 800c824:	d505      	bpl.n	800c832 <__sflush_r+0x42>
 800c826:	6863      	ldr	r3, [r4, #4]
 800c828:	1ac0      	subs	r0, r0, r3
 800c82a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c82c:	b10b      	cbz	r3, 800c832 <__sflush_r+0x42>
 800c82e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c830:	1ac0      	subs	r0, r0, r3
 800c832:	2300      	movs	r3, #0
 800c834:	4602      	mov	r2, r0
 800c836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c838:	4628      	mov	r0, r5
 800c83a:	6a21      	ldr	r1, [r4, #32]
 800c83c:	47b0      	blx	r6
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	d106      	bne.n	800c852 <__sflush_r+0x62>
 800c844:	6829      	ldr	r1, [r5, #0]
 800c846:	291d      	cmp	r1, #29
 800c848:	d82c      	bhi.n	800c8a4 <__sflush_r+0xb4>
 800c84a:	4a29      	ldr	r2, [pc, #164]	; (800c8f0 <__sflush_r+0x100>)
 800c84c:	40ca      	lsrs	r2, r1
 800c84e:	07d6      	lsls	r6, r2, #31
 800c850:	d528      	bpl.n	800c8a4 <__sflush_r+0xb4>
 800c852:	2200      	movs	r2, #0
 800c854:	6062      	str	r2, [r4, #4]
 800c856:	6922      	ldr	r2, [r4, #16]
 800c858:	04d9      	lsls	r1, r3, #19
 800c85a:	6022      	str	r2, [r4, #0]
 800c85c:	d504      	bpl.n	800c868 <__sflush_r+0x78>
 800c85e:	1c42      	adds	r2, r0, #1
 800c860:	d101      	bne.n	800c866 <__sflush_r+0x76>
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	b903      	cbnz	r3, 800c868 <__sflush_r+0x78>
 800c866:	6560      	str	r0, [r4, #84]	; 0x54
 800c868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c86a:	602f      	str	r7, [r5, #0]
 800c86c:	2900      	cmp	r1, #0
 800c86e:	d0cb      	beq.n	800c808 <__sflush_r+0x18>
 800c870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c874:	4299      	cmp	r1, r3
 800c876:	d002      	beq.n	800c87e <__sflush_r+0x8e>
 800c878:	4628      	mov	r0, r5
 800c87a:	f7ff faa5 	bl	800bdc8 <_free_r>
 800c87e:	2000      	movs	r0, #0
 800c880:	6360      	str	r0, [r4, #52]	; 0x34
 800c882:	e7c2      	b.n	800c80a <__sflush_r+0x1a>
 800c884:	6a21      	ldr	r1, [r4, #32]
 800c886:	2301      	movs	r3, #1
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	1c41      	adds	r1, r0, #1
 800c88e:	d1c7      	bne.n	800c820 <__sflush_r+0x30>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0c4      	beq.n	800c820 <__sflush_r+0x30>
 800c896:	2b1d      	cmp	r3, #29
 800c898:	d001      	beq.n	800c89e <__sflush_r+0xae>
 800c89a:	2b16      	cmp	r3, #22
 800c89c:	d101      	bne.n	800c8a2 <__sflush_r+0xb2>
 800c89e:	602f      	str	r7, [r5, #0]
 800c8a0:	e7b2      	b.n	800c808 <__sflush_r+0x18>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	e7ae      	b.n	800c80a <__sflush_r+0x1a>
 800c8ac:	690f      	ldr	r7, [r1, #16]
 800c8ae:	2f00      	cmp	r7, #0
 800c8b0:	d0aa      	beq.n	800c808 <__sflush_r+0x18>
 800c8b2:	0793      	lsls	r3, r2, #30
 800c8b4:	bf18      	it	ne
 800c8b6:	2300      	movne	r3, #0
 800c8b8:	680e      	ldr	r6, [r1, #0]
 800c8ba:	bf08      	it	eq
 800c8bc:	694b      	ldreq	r3, [r1, #20]
 800c8be:	1bf6      	subs	r6, r6, r7
 800c8c0:	600f      	str	r7, [r1, #0]
 800c8c2:	608b      	str	r3, [r1, #8]
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	dd9f      	ble.n	800c808 <__sflush_r+0x18>
 800c8c8:	4633      	mov	r3, r6
 800c8ca:	463a      	mov	r2, r7
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	6a21      	ldr	r1, [r4, #32]
 800c8d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c8d4:	47e0      	blx	ip
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	dc06      	bgt.n	800c8e8 <__sflush_r+0xf8>
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	e790      	b.n	800c80a <__sflush_r+0x1a>
 800c8e8:	4407      	add	r7, r0
 800c8ea:	1a36      	subs	r6, r6, r0
 800c8ec:	e7ea      	b.n	800c8c4 <__sflush_r+0xd4>
 800c8ee:	bf00      	nop
 800c8f0:	20400001 	.word	0x20400001

0800c8f4 <_fflush_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	690b      	ldr	r3, [r1, #16]
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	b913      	cbnz	r3, 800c904 <_fflush_r+0x10>
 800c8fe:	2500      	movs	r5, #0
 800c900:	4628      	mov	r0, r5
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	b118      	cbz	r0, 800c90e <_fflush_r+0x1a>
 800c906:	6983      	ldr	r3, [r0, #24]
 800c908:	b90b      	cbnz	r3, 800c90e <_fflush_r+0x1a>
 800c90a:	f000 f887 	bl	800ca1c <__sinit>
 800c90e:	4b14      	ldr	r3, [pc, #80]	; (800c960 <_fflush_r+0x6c>)
 800c910:	429c      	cmp	r4, r3
 800c912:	d11b      	bne.n	800c94c <_fflush_r+0x58>
 800c914:	686c      	ldr	r4, [r5, #4]
 800c916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0ef      	beq.n	800c8fe <_fflush_r+0xa>
 800c91e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c920:	07d0      	lsls	r0, r2, #31
 800c922:	d404      	bmi.n	800c92e <_fflush_r+0x3a>
 800c924:	0599      	lsls	r1, r3, #22
 800c926:	d402      	bmi.n	800c92e <_fflush_r+0x3a>
 800c928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c92a:	f000 f915 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c92e:	4628      	mov	r0, r5
 800c930:	4621      	mov	r1, r4
 800c932:	f7ff ff5d 	bl	800c7f0 <__sflush_r>
 800c936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c938:	4605      	mov	r5, r0
 800c93a:	07da      	lsls	r2, r3, #31
 800c93c:	d4e0      	bmi.n	800c900 <_fflush_r+0xc>
 800c93e:	89a3      	ldrh	r3, [r4, #12]
 800c940:	059b      	lsls	r3, r3, #22
 800c942:	d4dd      	bmi.n	800c900 <_fflush_r+0xc>
 800c944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c946:	f000 f908 	bl	800cb5a <__retarget_lock_release_recursive>
 800c94a:	e7d9      	b.n	800c900 <_fflush_r+0xc>
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <_fflush_r+0x70>)
 800c94e:	429c      	cmp	r4, r3
 800c950:	d101      	bne.n	800c956 <_fflush_r+0x62>
 800c952:	68ac      	ldr	r4, [r5, #8]
 800c954:	e7df      	b.n	800c916 <_fflush_r+0x22>
 800c956:	4b04      	ldr	r3, [pc, #16]	; (800c968 <_fflush_r+0x74>)
 800c958:	429c      	cmp	r4, r3
 800c95a:	bf08      	it	eq
 800c95c:	68ec      	ldreq	r4, [r5, #12]
 800c95e:	e7da      	b.n	800c916 <_fflush_r+0x22>
 800c960:	0800d2dc 	.word	0x0800d2dc
 800c964:	0800d2fc 	.word	0x0800d2fc
 800c968:	0800d2bc 	.word	0x0800d2bc

0800c96c <std>:
 800c96c:	2300      	movs	r3, #0
 800c96e:	b510      	push	{r4, lr}
 800c970:	4604      	mov	r4, r0
 800c972:	e9c0 3300 	strd	r3, r3, [r0]
 800c976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c97a:	6083      	str	r3, [r0, #8]
 800c97c:	8181      	strh	r1, [r0, #12]
 800c97e:	6643      	str	r3, [r0, #100]	; 0x64
 800c980:	81c2      	strh	r2, [r0, #14]
 800c982:	6183      	str	r3, [r0, #24]
 800c984:	4619      	mov	r1, r3
 800c986:	2208      	movs	r2, #8
 800c988:	305c      	adds	r0, #92	; 0x5c
 800c98a:	f7fb fe15 	bl	80085b8 <memset>
 800c98e:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <std+0x38>)
 800c990:	6224      	str	r4, [r4, #32]
 800c992:	6263      	str	r3, [r4, #36]	; 0x24
 800c994:	4b04      	ldr	r3, [pc, #16]	; (800c9a8 <std+0x3c>)
 800c996:	62a3      	str	r3, [r4, #40]	; 0x28
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <std+0x40>)
 800c99a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c99c:	4b04      	ldr	r3, [pc, #16]	; (800c9b0 <std+0x44>)
 800c99e:	6323      	str	r3, [r4, #48]	; 0x30
 800c9a0:	bd10      	pop	{r4, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0800ccc1 	.word	0x0800ccc1
 800c9a8:	0800cce3 	.word	0x0800cce3
 800c9ac:	0800cd1b 	.word	0x0800cd1b
 800c9b0:	0800cd3f 	.word	0x0800cd3f

0800c9b4 <_cleanup_r>:
 800c9b4:	4901      	ldr	r1, [pc, #4]	; (800c9bc <_cleanup_r+0x8>)
 800c9b6:	f000 b8af 	b.w	800cb18 <_fwalk_reent>
 800c9ba:	bf00      	nop
 800c9bc:	0800c8f5 	.word	0x0800c8f5

0800c9c0 <__sfmoreglue>:
 800c9c0:	2268      	movs	r2, #104	; 0x68
 800c9c2:	b570      	push	{r4, r5, r6, lr}
 800c9c4:	1e4d      	subs	r5, r1, #1
 800c9c6:	4355      	muls	r5, r2
 800c9c8:	460e      	mov	r6, r1
 800c9ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9ce:	f7ff fa63 	bl	800be98 <_malloc_r>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	b140      	cbz	r0, 800c9e8 <__sfmoreglue+0x28>
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	e9c0 1600 	strd	r1, r6, [r0]
 800c9dc:	300c      	adds	r0, #12
 800c9de:	60a0      	str	r0, [r4, #8]
 800c9e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9e4:	f7fb fde8 	bl	80085b8 <memset>
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}

0800c9ec <__sfp_lock_acquire>:
 800c9ec:	4801      	ldr	r0, [pc, #4]	; (800c9f4 <__sfp_lock_acquire+0x8>)
 800c9ee:	f000 b8b3 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800c9f2:	bf00      	nop
 800c9f4:	2000079d 	.word	0x2000079d

0800c9f8 <__sfp_lock_release>:
 800c9f8:	4801      	ldr	r0, [pc, #4]	; (800ca00 <__sfp_lock_release+0x8>)
 800c9fa:	f000 b8ae 	b.w	800cb5a <__retarget_lock_release_recursive>
 800c9fe:	bf00      	nop
 800ca00:	2000079d 	.word	0x2000079d

0800ca04 <__sinit_lock_acquire>:
 800ca04:	4801      	ldr	r0, [pc, #4]	; (800ca0c <__sinit_lock_acquire+0x8>)
 800ca06:	f000 b8a7 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800ca0a:	bf00      	nop
 800ca0c:	2000079e 	.word	0x2000079e

0800ca10 <__sinit_lock_release>:
 800ca10:	4801      	ldr	r0, [pc, #4]	; (800ca18 <__sinit_lock_release+0x8>)
 800ca12:	f000 b8a2 	b.w	800cb5a <__retarget_lock_release_recursive>
 800ca16:	bf00      	nop
 800ca18:	2000079e 	.word	0x2000079e

0800ca1c <__sinit>:
 800ca1c:	b510      	push	{r4, lr}
 800ca1e:	4604      	mov	r4, r0
 800ca20:	f7ff fff0 	bl	800ca04 <__sinit_lock_acquire>
 800ca24:	69a3      	ldr	r3, [r4, #24]
 800ca26:	b11b      	cbz	r3, 800ca30 <__sinit+0x14>
 800ca28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca2c:	f7ff bff0 	b.w	800ca10 <__sinit_lock_release>
 800ca30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca34:	6523      	str	r3, [r4, #80]	; 0x50
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <__sinit+0x68>)
 800ca38:	4a13      	ldr	r2, [pc, #76]	; (800ca88 <__sinit+0x6c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca3e:	42a3      	cmp	r3, r4
 800ca40:	bf08      	it	eq
 800ca42:	2301      	moveq	r3, #1
 800ca44:	4620      	mov	r0, r4
 800ca46:	bf08      	it	eq
 800ca48:	61a3      	streq	r3, [r4, #24]
 800ca4a:	f000 f81f 	bl	800ca8c <__sfp>
 800ca4e:	6060      	str	r0, [r4, #4]
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 f81b 	bl	800ca8c <__sfp>
 800ca56:	60a0      	str	r0, [r4, #8]
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 f817 	bl	800ca8c <__sfp>
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2104      	movs	r1, #4
 800ca62:	60e0      	str	r0, [r4, #12]
 800ca64:	6860      	ldr	r0, [r4, #4]
 800ca66:	f7ff ff81 	bl	800c96c <std>
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	2109      	movs	r1, #9
 800ca6e:	68a0      	ldr	r0, [r4, #8]
 800ca70:	f7ff ff7c 	bl	800c96c <std>
 800ca74:	2202      	movs	r2, #2
 800ca76:	2112      	movs	r1, #18
 800ca78:	68e0      	ldr	r0, [r4, #12]
 800ca7a:	f7ff ff77 	bl	800c96c <std>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	61a3      	str	r3, [r4, #24]
 800ca82:	e7d1      	b.n	800ca28 <__sinit+0xc>
 800ca84:	0800ce78 	.word	0x0800ce78
 800ca88:	0800c9b5 	.word	0x0800c9b5

0800ca8c <__sfp>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	4607      	mov	r7, r0
 800ca90:	f7ff ffac 	bl	800c9ec <__sfp_lock_acquire>
 800ca94:	4b1e      	ldr	r3, [pc, #120]	; (800cb10 <__sfp+0x84>)
 800ca96:	681e      	ldr	r6, [r3, #0]
 800ca98:	69b3      	ldr	r3, [r6, #24]
 800ca9a:	b913      	cbnz	r3, 800caa2 <__sfp+0x16>
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7ff ffbd 	bl	800ca1c <__sinit>
 800caa2:	3648      	adds	r6, #72	; 0x48
 800caa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	d503      	bpl.n	800cab4 <__sfp+0x28>
 800caac:	6833      	ldr	r3, [r6, #0]
 800caae:	b30b      	cbz	r3, 800caf4 <__sfp+0x68>
 800cab0:	6836      	ldr	r6, [r6, #0]
 800cab2:	e7f7      	b.n	800caa4 <__sfp+0x18>
 800cab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cab8:	b9d5      	cbnz	r5, 800caf0 <__sfp+0x64>
 800caba:	4b16      	ldr	r3, [pc, #88]	; (800cb14 <__sfp+0x88>)
 800cabc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cac0:	60e3      	str	r3, [r4, #12]
 800cac2:	6665      	str	r5, [r4, #100]	; 0x64
 800cac4:	f000 f847 	bl	800cb56 <__retarget_lock_init_recursive>
 800cac8:	f7ff ff96 	bl	800c9f8 <__sfp_lock_release>
 800cacc:	2208      	movs	r2, #8
 800cace:	4629      	mov	r1, r5
 800cad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cad8:	6025      	str	r5, [r4, #0]
 800cada:	61a5      	str	r5, [r4, #24]
 800cadc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cae0:	f7fb fd6a 	bl	80085b8 <memset>
 800cae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800caec:	4620      	mov	r0, r4
 800caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf0:	3468      	adds	r4, #104	; 0x68
 800caf2:	e7d9      	b.n	800caa8 <__sfp+0x1c>
 800caf4:	2104      	movs	r1, #4
 800caf6:	4638      	mov	r0, r7
 800caf8:	f7ff ff62 	bl	800c9c0 <__sfmoreglue>
 800cafc:	4604      	mov	r4, r0
 800cafe:	6030      	str	r0, [r6, #0]
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d1d5      	bne.n	800cab0 <__sfp+0x24>
 800cb04:	f7ff ff78 	bl	800c9f8 <__sfp_lock_release>
 800cb08:	230c      	movs	r3, #12
 800cb0a:	603b      	str	r3, [r7, #0]
 800cb0c:	e7ee      	b.n	800caec <__sfp+0x60>
 800cb0e:	bf00      	nop
 800cb10:	0800ce78 	.word	0x0800ce78
 800cb14:	ffff0001 	.word	0xffff0001

0800cb18 <_fwalk_reent>:
 800cb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	4688      	mov	r8, r1
 800cb20:	2700      	movs	r7, #0
 800cb22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb2a:	f1b9 0901 	subs.w	r9, r9, #1
 800cb2e:	d505      	bpl.n	800cb3c <_fwalk_reent+0x24>
 800cb30:	6824      	ldr	r4, [r4, #0]
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	d1f7      	bne.n	800cb26 <_fwalk_reent+0xe>
 800cb36:	4638      	mov	r0, r7
 800cb38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3c:	89ab      	ldrh	r3, [r5, #12]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d907      	bls.n	800cb52 <_fwalk_reent+0x3a>
 800cb42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb46:	3301      	adds	r3, #1
 800cb48:	d003      	beq.n	800cb52 <_fwalk_reent+0x3a>
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	47c0      	blx	r8
 800cb50:	4307      	orrs	r7, r0
 800cb52:	3568      	adds	r5, #104	; 0x68
 800cb54:	e7e9      	b.n	800cb2a <_fwalk_reent+0x12>

0800cb56 <__retarget_lock_init_recursive>:
 800cb56:	4770      	bx	lr

0800cb58 <__retarget_lock_acquire_recursive>:
 800cb58:	4770      	bx	lr

0800cb5a <__retarget_lock_release_recursive>:
 800cb5a:	4770      	bx	lr

0800cb5c <__swhatbuf_r>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	460e      	mov	r6, r1
 800cb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb64:	4614      	mov	r4, r2
 800cb66:	2900      	cmp	r1, #0
 800cb68:	461d      	mov	r5, r3
 800cb6a:	b096      	sub	sp, #88	; 0x58
 800cb6c:	da08      	bge.n	800cb80 <__swhatbuf_r+0x24>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb74:	602a      	str	r2, [r5, #0]
 800cb76:	061a      	lsls	r2, r3, #24
 800cb78:	d410      	bmi.n	800cb9c <__swhatbuf_r+0x40>
 800cb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb7e:	e00e      	b.n	800cb9e <__swhatbuf_r+0x42>
 800cb80:	466a      	mov	r2, sp
 800cb82:	f000 f903 	bl	800cd8c <_fstat_r>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	dbf1      	blt.n	800cb6e <__swhatbuf_r+0x12>
 800cb8a:	9a01      	ldr	r2, [sp, #4]
 800cb8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb94:	425a      	negs	r2, r3
 800cb96:	415a      	adcs	r2, r3
 800cb98:	602a      	str	r2, [r5, #0]
 800cb9a:	e7ee      	b.n	800cb7a <__swhatbuf_r+0x1e>
 800cb9c:	2340      	movs	r3, #64	; 0x40
 800cb9e:	2000      	movs	r0, #0
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	b016      	add	sp, #88	; 0x58
 800cba4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cba8 <__smakebuf_r>:
 800cba8:	898b      	ldrh	r3, [r1, #12]
 800cbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbac:	079d      	lsls	r5, r3, #30
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	d507      	bpl.n	800cbc4 <__smakebuf_r+0x1c>
 800cbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	6123      	str	r3, [r4, #16]
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	6163      	str	r3, [r4, #20]
 800cbc0:	b002      	add	sp, #8
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	466a      	mov	r2, sp
 800cbc6:	ab01      	add	r3, sp, #4
 800cbc8:	f7ff ffc8 	bl	800cb5c <__swhatbuf_r>
 800cbcc:	9900      	ldr	r1, [sp, #0]
 800cbce:	4605      	mov	r5, r0
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7ff f961 	bl	800be98 <_malloc_r>
 800cbd6:	b948      	cbnz	r0, 800cbec <__smakebuf_r+0x44>
 800cbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbdc:	059a      	lsls	r2, r3, #22
 800cbde:	d4ef      	bmi.n	800cbc0 <__smakebuf_r+0x18>
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	f043 0302 	orr.w	r3, r3, #2
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	e7e3      	b.n	800cbb4 <__smakebuf_r+0xc>
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <__smakebuf_r+0x7c>)
 800cbee:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	6020      	str	r0, [r4, #0]
 800cbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	9b00      	ldr	r3, [sp, #0]
 800cbfc:	6120      	str	r0, [r4, #16]
 800cbfe:	6163      	str	r3, [r4, #20]
 800cc00:	9b01      	ldr	r3, [sp, #4]
 800cc02:	b15b      	cbz	r3, 800cc1c <__smakebuf_r+0x74>
 800cc04:	4630      	mov	r0, r6
 800cc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc0a:	f000 f8d1 	bl	800cdb0 <_isatty_r>
 800cc0e:	b128      	cbz	r0, 800cc1c <__smakebuf_r+0x74>
 800cc10:	89a3      	ldrh	r3, [r4, #12]
 800cc12:	f023 0303 	bic.w	r3, r3, #3
 800cc16:	f043 0301 	orr.w	r3, r3, #1
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	89a0      	ldrh	r0, [r4, #12]
 800cc1e:	4305      	orrs	r5, r0
 800cc20:	81a5      	strh	r5, [r4, #12]
 800cc22:	e7cd      	b.n	800cbc0 <__smakebuf_r+0x18>
 800cc24:	0800c9b5 	.word	0x0800c9b5

0800cc28 <_malloc_usable_size_r>:
 800cc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc2c:	1f18      	subs	r0, r3, #4
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfbc      	itt	lt
 800cc32:	580b      	ldrlt	r3, [r1, r0]
 800cc34:	18c0      	addlt	r0, r0, r3
 800cc36:	4770      	bx	lr

0800cc38 <_raise_r>:
 800cc38:	291f      	cmp	r1, #31
 800cc3a:	b538      	push	{r3, r4, r5, lr}
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	460d      	mov	r5, r1
 800cc40:	d904      	bls.n	800cc4c <_raise_r+0x14>
 800cc42:	2316      	movs	r3, #22
 800cc44:	6003      	str	r3, [r0, #0]
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc4e:	b112      	cbz	r2, 800cc56 <_raise_r+0x1e>
 800cc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc54:	b94b      	cbnz	r3, 800cc6a <_raise_r+0x32>
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 f830 	bl	800ccbc <_getpid_r>
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4620      	mov	r0, r4
 800cc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc66:	f000 b817 	b.w	800cc98 <_kill_r>
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d00a      	beq.n	800cc84 <_raise_r+0x4c>
 800cc6e:	1c59      	adds	r1, r3, #1
 800cc70:	d103      	bne.n	800cc7a <_raise_r+0x42>
 800cc72:	2316      	movs	r3, #22
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	2001      	movs	r0, #1
 800cc78:	e7e7      	b.n	800cc4a <_raise_r+0x12>
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc82:	4798      	blx	r3
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7e0      	b.n	800cc4a <_raise_r+0x12>

0800cc88 <raise>:
 800cc88:	4b02      	ldr	r3, [pc, #8]	; (800cc94 <raise+0xc>)
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	6818      	ldr	r0, [r3, #0]
 800cc8e:	f7ff bfd3 	b.w	800cc38 <_raise_r>
 800cc92:	bf00      	nop
 800cc94:	200002cc 	.word	0x200002cc

0800cc98 <_kill_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	4d06      	ldr	r5, [pc, #24]	; (800ccb8 <_kill_r+0x20>)
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	4611      	mov	r1, r2
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	f7f4 f9e7 	bl	8001078 <_kill>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d102      	bne.n	800ccb4 <_kill_r+0x1c>
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	b103      	cbz	r3, 800ccb4 <_kill_r+0x1c>
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	bd38      	pop	{r3, r4, r5, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000798 	.word	0x20000798

0800ccbc <_getpid_r>:
 800ccbc:	f7f4 b9d5 	b.w	800106a <_getpid>

0800ccc0 <__sread>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc8:	f000 f894 	bl	800cdf4 <_read_r>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	bfab      	itete	ge
 800ccd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccd2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccd4:	181b      	addge	r3, r3, r0
 800ccd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccda:	bfac      	ite	ge
 800ccdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccde:	81a3      	strhlt	r3, [r4, #12]
 800cce0:	bd10      	pop	{r4, pc}

0800cce2 <__swrite>:
 800cce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce6:	461f      	mov	r7, r3
 800cce8:	898b      	ldrh	r3, [r1, #12]
 800ccea:	4605      	mov	r5, r0
 800ccec:	05db      	lsls	r3, r3, #23
 800ccee:	460c      	mov	r4, r1
 800ccf0:	4616      	mov	r6, r2
 800ccf2:	d505      	bpl.n	800cd00 <__swrite+0x1e>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfc:	f000 f868 	bl	800cdd0 <_lseek_r>
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	4632      	mov	r2, r6
 800cd04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd08:	81a3      	strh	r3, [r4, #12]
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	463b      	mov	r3, r7
 800cd0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd16:	f000 b817 	b.w	800cd48 <_write_r>

0800cd1a <__sseek>:
 800cd1a:	b510      	push	{r4, lr}
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd22:	f000 f855 	bl	800cdd0 <_lseek_r>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	bf15      	itete	ne
 800cd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd36:	81a3      	strheq	r3, [r4, #12]
 800cd38:	bf18      	it	ne
 800cd3a:	81a3      	strhne	r3, [r4, #12]
 800cd3c:	bd10      	pop	{r4, pc}

0800cd3e <__sclose>:
 800cd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd42:	f000 b813 	b.w	800cd6c <_close_r>
	...

0800cd48 <_write_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	4611      	mov	r1, r2
 800cd50:	2200      	movs	r2, #0
 800cd52:	4d05      	ldr	r5, [pc, #20]	; (800cd68 <_write_r+0x20>)
 800cd54:	602a      	str	r2, [r5, #0]
 800cd56:	461a      	mov	r2, r3
 800cd58:	f7f4 f9c5 	bl	80010e6 <_write>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_write_r+0x1e>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_write_r+0x1e>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	20000798 	.word	0x20000798

0800cd6c <_close_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	2300      	movs	r3, #0
 800cd70:	4d05      	ldr	r5, [pc, #20]	; (800cd88 <_close_r+0x1c>)
 800cd72:	4604      	mov	r4, r0
 800cd74:	4608      	mov	r0, r1
 800cd76:	602b      	str	r3, [r5, #0]
 800cd78:	f7f4 f9d1 	bl	800111e <_close>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_close_r+0x1a>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_close_r+0x1a>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	20000798 	.word	0x20000798

0800cd8c <_fstat_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	2300      	movs	r3, #0
 800cd90:	4d06      	ldr	r5, [pc, #24]	; (800cdac <_fstat_r+0x20>)
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	4611      	mov	r1, r2
 800cd98:	602b      	str	r3, [r5, #0]
 800cd9a:	f7f4 f9cb 	bl	8001134 <_fstat>
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	d102      	bne.n	800cda8 <_fstat_r+0x1c>
 800cda2:	682b      	ldr	r3, [r5, #0]
 800cda4:	b103      	cbz	r3, 800cda8 <_fstat_r+0x1c>
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	bd38      	pop	{r3, r4, r5, pc}
 800cdaa:	bf00      	nop
 800cdac:	20000798 	.word	0x20000798

0800cdb0 <_isatty_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4d05      	ldr	r5, [pc, #20]	; (800cdcc <_isatty_r+0x1c>)
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	4608      	mov	r0, r1
 800cdba:	602b      	str	r3, [r5, #0]
 800cdbc:	f7f4 f9c9 	bl	8001152 <_isatty>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_isatty_r+0x1a>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_isatty_r+0x1a>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	20000798 	.word	0x20000798

0800cdd0 <_lseek_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4d05      	ldr	r5, [pc, #20]	; (800cdf0 <_lseek_r+0x20>)
 800cddc:	602a      	str	r2, [r5, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	f7f4 f9c1 	bl	8001166 <_lseek>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d102      	bne.n	800cdee <_lseek_r+0x1e>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	b103      	cbz	r3, 800cdee <_lseek_r+0x1e>
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	20000798 	.word	0x20000798

0800cdf4 <_read_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	4d05      	ldr	r5, [pc, #20]	; (800ce14 <_read_r+0x20>)
 800ce00:	602a      	str	r2, [r5, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	f7f4 f952 	bl	80010ac <_read>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_read_r+0x1e>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_read_r+0x1e>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	20000798 	.word	0x20000798

0800ce18 <_init>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr

0800ce24 <_fini>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr
